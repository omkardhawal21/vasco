Classfile /home/shashin/projects/vasco/test-classes/if-else/boosted/Main.class
  Last modified 5 Jul, 2022; size 1281 bytes
  MD5 checksum 4dbcb3dff7f91bdb01f49b3ec3a28b65
  Compiled from "Main.java"
class Main
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Utf8               Main
   #2 = Class              #1             // Main
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               Main.java
   #6 = Utf8               <clinit>
   #7 = Utf8               ()V
   #8 = Utf8               java/lang/Exception
   #9 = Class              #8             // java/lang/Exception
  #10 = Utf8               A
  #11 = String             #10            // A
  #12 = Utf8               soot/rtlib/tamiflex/ReflectiveCalls
  #13 = Class              #12            // soot/rtlib/tamiflex/ReflectiveCalls
  #14 = Utf8               knownClassForName
  #15 = Utf8               (ILjava/lang/String;)V
  #16 = NameAndType        #14:#15        // knownClassForName:(ILjava/lang/String;)V
  #17 = Methodref          #13.#16        // soot/rtlib/tamiflex/ReflectiveCalls.knownClassForName:(ILjava/lang/String;)V
  #18 = Utf8               soot/rtlib/tamiflex/OpaquePredicate
  #19 = Class              #18            // soot/rtlib/tamiflex/OpaquePredicate
  #20 = Utf8               getFalse
  #21 = Utf8               ()Z
  #22 = NameAndType        #20:#21        // getFalse:()Z
  #23 = Methodref          #19.#22        // soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
  #24 = Utf8               soot/rtlib/tamiflex/ReflectiveCallsWrapper
  #25 = Class              #24            // soot/rtlib/tamiflex/ReflectiveCallsWrapper
  #26 = Utf8               reflectiveCall0
  #27 = Utf8               ()Ljava/lang/Class;
  #28 = NameAndType        #26:#27        // reflectiveCall0:()Ljava/lang/Class;
  #29 = Methodref          #25.#28        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall0:()Ljava/lang/Class;
  #30 = Utf8               reflectiveCall1
  #31 = NameAndType        #30:#27        // reflectiveCall1:()Ljava/lang/Class;
  #32 = Methodref          #25.#31        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall1:()Ljava/lang/Class;
  #33 = Utf8               reflectiveCall2
  #34 = NameAndType        #33:#27        // reflectiveCall2:()Ljava/lang/Class;
  #35 = Methodref          #25.#34        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall2:()Ljava/lang/Class;
  #36 = Utf8               java/lang/Class
  #37 = Class              #36            // java/lang/Class
  #38 = Utf8               forName
  #39 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;
  #40 = NameAndType        #38:#39        // forName:(Ljava/lang/String;)Ljava/lang/Class;
  #41 = Methodref          #37.#40        // java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
  #42 = Utf8               B
  #43 = String             #42            // B
  #44 = Utf8               reflectiveCall3
  #45 = NameAndType        #44:#27        // reflectiveCall3:()Ljava/lang/Class;
  #46 = Methodref          #25.#45        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall3:()Ljava/lang/Class;
  #47 = Utf8               reflectiveCall4
  #48 = NameAndType        #47:#27        // reflectiveCall4:()Ljava/lang/Class;
  #49 = Methodref          #25.#48        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall4:()Ljava/lang/Class;
  #50 = Utf8               reflectiveCall5
  #51 = NameAndType        #50:#27        // reflectiveCall5:()Ljava/lang/Class;
  #52 = Methodref          #25.#51        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall5:()Ljava/lang/Class;
  #53 = Utf8               C
  #54 = String             #53            // C
  #55 = Utf8               reflectiveCall6
  #56 = NameAndType        #55:#27        // reflectiveCall6:()Ljava/lang/Class;
  #57 = Methodref          #25.#56        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall6:()Ljava/lang/Class;
  #58 = Utf8               reflectiveCall7
  #59 = NameAndType        #58:#27        // reflectiveCall7:()Ljava/lang/Class;
  #60 = Methodref          #25.#59        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall7:()Ljava/lang/Class;
  #61 = Utf8               reflectiveCall8
  #62 = NameAndType        #61:#27        // reflectiveCall8:()Ljava/lang/Class;
  #63 = Methodref          #25.#62        // soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall8:()Ljava/lang/Class;
  #64 = Utf8               <init>
  #65 = NameAndType        #64:#7         // "<init>":()V
  #66 = Methodref          #4.#65         // java/lang/Object."<init>":()V
  #67 = Utf8               getBool
  #68 = Utf8               main
  #69 = Utf8               ([Ljava/lang/String;)V
  #70 = Class              #42            // B
  #71 = Methodref          #70.#65        // B."<init>":()V
  #72 = Class              #10            // A
  #73 = Utf8               foo
  #74 = NameAndType        #73:#7         // foo:()V
  #75 = Methodref          #72.#74        // A.foo:()V
  #76 = Utf8               Code
  #77 = Utf8               StackMapTable
  #78 = Utf8               LineNumberTable
  #79 = Utf8               SourceFile
{
  static {};
    descriptor: ()V
    flags: ACC_STATIC
    Code:
      stack=2, locals=1, args_size=0
         0: iconst_0
         1: ldc           #11                 // String A
         3: invokestatic  #17                 // Method soot/rtlib/tamiflex/ReflectiveCalls.knownClassForName:(ILjava/lang/String;)V
         6: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
         9: ifeq          19
        12: invokestatic  #29                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall0:()Ljava/lang/Class;
        15: pop
        16: goto          51
        19: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
        22: ifeq          32
        25: invokestatic  #32                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall1:()Ljava/lang/Class;
        28: pop
        29: goto          51
        32: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
        35: ifeq          45
        38: invokestatic  #35                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall2:()Ljava/lang/Class;
        41: pop
        42: goto          51
        45: ldc           #11                 // String A
        47: invokestatic  #41                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
        50: pop
        51: iconst_0
        52: ldc           #43                 // String B
        54: invokestatic  #17                 // Method soot/rtlib/tamiflex/ReflectiveCalls.knownClassForName:(ILjava/lang/String;)V
        57: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
        60: ifeq          70
        63: invokestatic  #46                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall3:()Ljava/lang/Class;
        66: pop
        67: goto          102
        70: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
        73: ifeq          83
        76: invokestatic  #49                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall4:()Ljava/lang/Class;
        79: pop
        80: goto          102
        83: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
        86: ifeq          96
        89: invokestatic  #52                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall5:()Ljava/lang/Class;
        92: pop
        93: goto          102
        96: ldc           #43                 // String B
        98: invokestatic  #41                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       101: pop
       102: iconst_0
       103: ldc           #54                 // String C
       105: invokestatic  #17                 // Method soot/rtlib/tamiflex/ReflectiveCalls.knownClassForName:(ILjava/lang/String;)V
       108: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
       111: ifeq          121
       114: invokestatic  #57                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall6:()Ljava/lang/Class;
       117: pop
       118: goto          153
       121: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
       124: ifeq          134
       127: invokestatic  #60                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall7:()Ljava/lang/Class;
       130: pop
       131: goto          153
       134: invokestatic  #23                 // Method soot/rtlib/tamiflex/OpaquePredicate.getFalse:()Z
       137: ifeq          147
       140: invokestatic  #63                 // Method soot/rtlib/tamiflex/ReflectiveCallsWrapper.reflectiveCall8:()Ljava/lang/Class;
       143: pop
       144: goto          153
       147: ldc           #54                 // String C
       149: invokestatic  #41                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       152: pop
       153: goto          157
       156: astore_0
       157: return
      Exception table:
         from    to  target type
             0   153   156   Class java/lang/Exception
      StackMapTable: number_of_entries = 14
        frame_type = 19 /* same */
        frame_type = 12 /* same */
        frame_type = 12 /* same */
        frame_type = 5 /* same */
        frame_type = 18 /* same */
        frame_type = 12 /* same */
        frame_type = 12 /* same */
        frame_type = 5 /* same */
        frame_type = 18 /* same */
        frame_type = 12 /* same */
        frame_type = 12 /* same */
        frame_type = 5 /* same */
        frame_type = 66 /* same_locals_1_stack_item */
          stack = [ class java/lang/Exception ]
        frame_type = 0 /* same */
      LineNumberTable:
        line 5: 45
        line 5: 47
        line 5: 50
        line 6: 96
        line 6: 98
        line 6: 101
        line 7: 147
        line 7: 149
        line 7: 152
        line 8: 153
        line 9: 156
        line 9: 157

  Main();
    descriptor: ()V
    flags:
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #66                 // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 1: 0
        line 1: 1
        line 1: 4

  static boolean getBool();
    descriptor: ()Z
    flags: ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 28: 0
        line 28: 1

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: new           #70                 // class B
         3: dup
         4: invokespecial #71                 // Method B."<init>":()V
         7: invokevirtual #75                 // Method A.foo:()V
        10: return
      LineNumberTable:
        line 20: 0
        line 20: 3
        line 20: 4
        line 22: 7
        line 26: 10
}
SourceFile: "Main.java"
