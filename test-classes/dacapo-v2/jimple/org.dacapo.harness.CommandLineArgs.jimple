public class org.dacapo.harness.CommandLineArgs extends java.lang.Object
{
    public static final int EXIT_OK;
    public static final int EXIT_MISSING_CALLBACK;
    public static final int EXIT_BAD_CALLBACK;
    public static final int EXIT_BAD_COMMANDLINE;
    public static final int EXIT_UNKNOWN_BENCHMARK;
    public static final int EXIT_MISSING_BENCHMARKS;
    public static final java.lang.String RELEASE_NOTES;
    public static final java.lang.String DEFAULT_SIZE;
    public static final java.lang.String DEFAULT_SCRATCH_DIRECTORY;
    public static final java.lang.String DEFAULT_MAX_ITERATIONS;
    public static final java.lang.String DEFAULT_WINDOW_SIZE;
    public static final java.lang.String DEFAULT_VARIANCE;
    public static final java.lang.String DEFAULT_ITERATIONS;
    public static final java.lang.String DEFAULT_THREAD_COUNT;
    public static final java.lang.String DEFAULT_THREAD_FACTOR;
    public static final java.lang.String DEFAULT_TIMEOUT_DIALATION;
    private static final java.lang.String OPT_CALLBACK;
    private static final java.lang.String OPT_HELP;
    private static final java.lang.String OPT_RELEASE_NOTES;
    private static final java.lang.String OPT_LIST_BENCHMARKS;
    private static final java.lang.String OPT_INFORMATION;
    private static final java.lang.String OPT_SIZE;
    private static final java.lang.String OPT_SIZES;
    private static final java.lang.String OPT_SCRATCH_DIRECTORY;
    private static final java.lang.String OPT_CONVERGE;
    private static final java.lang.String OPT_MAX_ITERATIONS;
    private static final java.lang.String OPT_VARIANCE;
    private static final java.lang.String OPT_WINDOW;
    private static final java.lang.String OPT_ITERATIONS;
    private static final java.lang.String OPT_DEBUG;
    private static final java.lang.String OPT_IGNORE_VALIDATION;
    private static final java.lang.String OPT_NO_DIGEST_OUTPUT;
    private static final java.lang.String OPT_NO_VALIDATION;
    private static final java.lang.String OPT_PRESERVE;
    private static final java.lang.String OPT_VALIDATION_REPORT;
    private static final java.lang.String OPT_CONFIG;
    private static final java.lang.String OPT_VERBOSE;
    private static final java.lang.String OPT_NO_PRE_ITERATION_GC;
    private static final java.lang.String OPT_THREAD_COUNT;
    private static final java.lang.String OPT_THREAD_FACTOR;
    private static final java.lang.String OPT_TIMEOUT_DIALATION;
    private static final org.apache.commons.cli.Option[] OPTIONS;
    private static org.apache.commons.cli.CommandLineParser parser;
    private static org.apache.commons.cli.Options options;
    private static org.apache.commons.cli.Options visibleOptions;
    private org.apache.commons.cli.CommandLine line;
    private org.dacapo.harness.Callback callback;
    private java.util.List benchmarks;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.String[]) throws java.lang.Exception
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.Option[] $r1, $r45, $r49, $r52;
        int $i0, i1;
        java.util.ArrayList $r2;
        java.lang.String[] r3;
        org.apache.commons.cli.Options $r4, $r47, $r54;
        org.apache.commons.cli.CommandLineParser $r5;
        org.apache.commons.cli.CommandLine $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r30, $r39, $r42, $r43, $r72, $r75;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z11, $z12, $z13, z14, $z15, $z16;
        java.io.File $r12;
        java.lang.String $r14, $r15, $r19, $r21, $r22, $r27, $r29, $r36, $r37, $r51, $r60, $r62, $r67, $r69;
        java.lang.StringBuilder $r16, $r18, $r20, $r24, $r26, $r28, $r32, $r34, $r35, $r57, $r59, $r61, $r64, $r66, $r68;
        java.io.PrintStream $r17, $r25, $r33, $r41, $r58, $r65;
        java.util.List $r23, $r31, $r38, $r40, $r73, r74, $r76;
        org.apache.commons.cli.ParseException $r44, $r63;
        org.apache.commons.cli.Option $r46, $r50, $r53;
        java.lang.Exception $r56;
        java.util.Iterator r77;
        java.lang.Object r78;
        org.dacapo.parser.Config r80;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        r3 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = 0;

     label01:
        $r1 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option[] OPTIONS>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label03;

        $r47 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Options options>;

        $r45 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option[] OPTIONS>;

        $r46 = $r45[i1];

        virtualinvoke $r47.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r46);

        $r49 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option[] OPTIONS>;

        $r50 = $r49[i1];

        $r51 = virtualinvoke $r50.<org.apache.commons.cli.Option: java.lang.String getDescription()>();

        if $r51 == null goto label02;

        $r54 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Options visibleOptions>;

        $r52 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option[] OPTIONS>;

        $r53 = $r52[i1];

        virtualinvoke $r54.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r53);

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        r0.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback callback> = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dacapo.harness.CommandLineArgs: java.util.List benchmarks> = $r2;

     label04:
        z14 = 0;

        $r5 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLineParser parser>;

        $r4 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Options options>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.cli.CommandLineParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r4, r3);

        r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line> = $r6;

        $r7 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r7.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("list-benchmarks");

        if $z0 == 0 goto label05;

        staticinvoke <org.dacapo.harness.CommandLineArgs: void printBenchmarks()>();

        z14 = 1;

     label05:
        $r8 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z1 = virtualinvoke $r8.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("release-notes");

        if $z1 == 0 goto label06;

        staticinvoke <org.dacapo.harness.CommandLineArgs: void printReleaseNotes()>();

        z14 = 1;

     label06:
        $r9 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z2 = virtualinvoke $r9.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("help");

        if $z2 == 0 goto label07;

        staticinvoke <org.dacapo.harness.CommandLineArgs: void printUsage()>();

        z14 = 1;

     label07:
        $r10 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z3 = virtualinvoke $r10.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("thread-factor");

        if $z3 == 0 goto label08;

        $r43 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z13 = virtualinvoke $r43.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("thread-count");

        if $z13 == 0 goto label08;

        $r44 = new org.apache.commons.cli.ParseException;

        specialinvoke $r44.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>("Cannot specify -t and -k options.");

        throw $r44;

     label08:
        if z14 == 0 goto label09;

        staticinvoke <java.lang.System: void exit(int)>(0);

     label09:
        goto label12;

     label10:
        $r63 := @caughtexception;

        $r65 = <java.lang.System: java.io.PrintStream err>;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line exception: ");

        $r67 = virtualinvoke $r63.<org.apache.commons.cli.ParseException: java.lang.String getMessage()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r65.<java.io.PrintStream: void println(java.lang.String)>($r69);

        staticinvoke <java.lang.System: void exit(int)>(4);

        goto label12;

     label11:
        $r56 := @caughtexception;

        $r58 = <java.lang.System: java.io.PrintStream err>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception processing command line values: ");

        $r60 = virtualinvoke $r56.<java.lang.Exception: java.lang.String getMessage()>();

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r58.<java.io.PrintStream: void println(java.lang.String)>($r62);

        staticinvoke <java.lang.System: void exit(int)>(4);

     label12:
        specialinvoke r0.<org.dacapo.harness.CommandLineArgs: void defineCallback()>();

        $r72 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r73 = virtualinvoke $r72.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        $z15 = interfaceinvoke $r73.<java.util.List: boolean isEmpty()>();

        if $z15 == 0 goto label13;

        $r42 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z12 = virtualinvoke $r42.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("config");

        if $z12 != 0 goto label13;

        staticinvoke <org.dacapo.harness.CommandLineArgs: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(10);

        goto label14;

     label13:
        $r11 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z4 = virtualinvoke $r11.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("config");

        if $z4 == 0 goto label14;

        $r39 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r40 = virtualinvoke $r39.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        $z11 = interfaceinvoke $r40.<java.util.List: boolean isEmpty()>();

        if $z11 != 0 goto label14;

        $r41 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>("You may only specify a cnf or a list of benchmarks, but not both");

        staticinvoke <java.lang.System: void exit(int)>(4);

     label14:
        r74 = staticinvoke <org.dacapo.harness.CommandLineArgs: java.util.List extractBenchmarkSet()>();

        $r75 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r76 = virtualinvoke $r75.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        $z16 = interfaceinvoke $r76.<java.util.List: boolean isEmpty()>();

        if $z16 != 0 goto label19;

        $r30 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r31 = virtualinvoke $r30.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        r77 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z8 = interfaceinvoke r77.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label18;

        r78 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>();

        $z9 = interfaceinvoke r74.<java.util.List: boolean contains(java.lang.Object)>(r78);

        if $z9 == 0 goto label16;

        $r38 = r0.<org.dacapo.harness.CommandLineArgs: java.util.List benchmarks>;

        $r37 = (java.lang.String) r78;

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>($r37);

        goto label17;

     label16:
        $r33 = <java.lang.System: java.io.PrintStream err>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown benchmark: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r78);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r36);

        staticinvoke <java.lang.System: void exit(int)>(9);

     label17:
        goto label15;

     label18:
        goto label22;

     label19:
        $r12 = new java.io.File;

        $r13 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r14 = virtualinvoke $r13.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("config");

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r14);

        $z5 = virtualinvoke $r12.<java.io.File: boolean canRead()>();

        if $z5 != 0 goto label20;

        $r25 = <java.lang.System: java.io.PrintStream err>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown config file: ");

        $r27 = virtualinvoke $r12.<java.io.File: java.lang.String getAbsolutePath()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r29);

        staticinvoke <java.lang.System: void exit(int)>(9);

     label20:
        r80 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.File)>($r12);

        $r15 = r80.<org.dacapo.parser.Config: java.lang.String name>;

        $z6 = interfaceinvoke r74.<java.util.List: boolean contains(java.lang.Object)>($r15);

        if $z6 == 0 goto label21;

        $r23 = r0.<org.dacapo.harness.CommandLineArgs: java.util.List benchmarks>;

        $r22 = r80.<org.dacapo.parser.Config: java.lang.String name>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label22;

     label21:
        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown benchmark specified in cnf file: ");

        $r19 = r80.<org.dacapo.parser.Config: java.lang.String name>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

        staticinvoke <java.lang.System: void exit(int)>(9);

     label22:
        return;

        catch org.apache.commons.cli.ParseException from label04 to label09 with label10;
        catch java.lang.Exception from label04 to label09 with label11;
    }

    static void printUsage()
    {
        org.apache.commons.cli.HelpFormatter $r0;
        org.apache.commons.cli.Options $r2;

        $r0 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r0.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        $r2 = <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Options visibleOptions>;

        virtualinvoke $r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,org.apache.commons.cli.Options)>("DaCapo Benchmark suite", $r2);

        return;
    }

    static void printReleaseNotes() throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.io.InputStream $r4;
        java.lang.String $r6;
        java.io.PrintStream $r8;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r2 = class "Lorg/dacapo/harness/CommandLineArgs;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("RELEASE_NOTES.txt");

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r4);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

     label1:
        $r6 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r6 == null goto label2;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label1;

     label2:
        return;
    }

    static void printBenchmarks() throws java.io.IOException
    {
        java.util.TreeSet $r0;
        java.util.List $r1;
        java.util.Iterator r2;
        java.io.PrintStream $r3, $r4, $r7;
        java.lang.Object $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        $r0 = new java.util.TreeSet;

        $r1 = staticinvoke <org.dacapo.harness.CommandLineArgs: java.util.List extractBenchmarkSet()>();

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>($r1);

        r2 = virtualinvoke $r0.<java.util.TreeSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>($r6);

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>(" ");

        goto label1;

     label2:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println()>();

        return;
    }

    static java.util.List extractBenchmarkSet() throws java.io.IOException
    {
        java.util.ArrayList $r0;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.net.URL r4;
        java.lang.String r5, $r7, $r13, r16, r17, r20, r21, r22;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.io.File $r6, $r8;
        int $i0, $i1, $i2, $i3, i4;
        java.net.URLConnection $r9;
        java.util.jar.JarFile $r10;
        java.lang.Object $r11;
        java.util.jar.JarEntry $r12;
        java.net.JarURLConnection r14;
        java.util.Enumeration r15;
        java.io.File[] r19;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = class "Lorg/dacapo/harness/CommandLineArgs;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("cnf");

        r5 = virtualinvoke r4.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("jar");

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r4.<java.net.URL: java.net.URLConnection openConnection()>();

        r14 = (java.net.JarURLConnection) $r9;

        $r10 = virtualinvoke r14.<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>();

        r15 = virtualinvoke $r10.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label1:
        $z4 = interfaceinvoke r15.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 == 0 goto label3;

        $r11 = interfaceinvoke r15.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r12 = (java.util.jar.JarEntry) $r11;

        r16 = virtualinvoke $r12.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z5 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(".cnf");

        if $z5 == 0 goto label2;

        $r13 = virtualinvoke r16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("cnf/", "");

        r17 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".cnf", "");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r17);

     label2:
        goto label1;

     label3:
        goto label6;

     label4:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z1 == 0 goto label6;

        $r6 = new java.io.File;

        $r7 = virtualinvoke r4.<java.net.URL: java.lang.String getFile()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        $z2 = virtualinvoke $r6.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label6;

        r19 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>();

        i4 = 0;

     label5:
        $i0 = lengthof r19;

        if i4 >= $i0 goto label6;

        $r8 = r19[i4];

        r20 = virtualinvoke $r8.<java.io.File: java.lang.String toString()>();

        $i1 = virtualinvoke r20.<java.lang.String: int lastIndexOf(int)>(47);

        $i2 = $i1 + 1;

        $i3 = virtualinvoke r20.<java.lang.String: int length()>();

        r21 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        r22 = virtualinvoke r21.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".cnf", "");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r22);

        i4 = i4 + 1;

        goto label5;

     label6:
        return $r0;
    }

    public java.lang.Iterable benchmarks()
    {
        org.dacapo.harness.CommandLineArgs r0;
        java.util.List $r1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: java.util.List benchmarks>;

        return $r1;
    }

    public boolean getVerbose()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("verbose");

        return $z0;
    }

    public org.dacapo.harness.CommandLineArgs$Methodology getMethodology()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;
        org.dacapo.harness.CommandLineArgs$Methodology $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("converge");

        if $z0 == 0 goto label1;

        $r2 = <org.dacapo.harness.CommandLineArgs$Methodology: org.dacapo.harness.CommandLineArgs$Methodology CONVERGE>;

        goto label2;

     label1:
        $r2 = <org.dacapo.harness.CommandLineArgs$Methodology: org.dacapo.harness.CommandLineArgs$Methodology ITERATE>;

     label2:
        return $r2;
    }

    public double getTargetVar()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;
        double $d0, $d1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("variance", "3.0");

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        $d1 = $d0 / 100.0;

        return $d1;
    }

    public int getWindow()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("window", "3");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i0;
    }

    public int getMaxIterations()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("max-iterations", "20");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i0;
    }

    public boolean getIgnoreValidation()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("ignore-validation");

        return $z0;
    }

    public int getIterations()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("iterations", "1");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i0;
    }

    public java.lang.String getSize()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("size", "default");

        return $r2;
    }

    public boolean getSizes()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("sizes");

        return $z0;
    }

    public java.lang.String getScratchDir()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("scratch-directory", "./scratch");

        return $r2;
    }

    public org.dacapo.harness.Callback getCallback()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.dacapo.harness.Callback $r1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback callback>;

        return $r1;
    }

    public java.lang.String getCnfOverride()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("config", null);

        return $r2;
    }

    public boolean getInformation()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("information");

        return $z0;
    }

    public boolean getSilent()
    {
        org.dacapo.harness.CommandLineArgs r0;
        boolean $z0, $z1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $z0 = virtualinvoke r0.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean getDebug()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("debug");

        return $z0;
    }

    public boolean getPreserve()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("preserve");

        return $z0;
    }

    public boolean getValidateOutput()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0, $z1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("no-digest-output");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean getValidate()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0, $z1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("no-validation");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String getValidationReport()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("validation-report", null);

        return $r2;
    }

    public boolean getPreIterationGC()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        boolean $z0, $z1;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("no-pre-iteration-gc");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String getThreadCount()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("thread-count", "0");

        return $r2;
    }

    public java.lang.String getThreadFactor()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("thread-factor", "0");

        return $r2;
    }

    public java.lang.String getTimeoutDialation()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>("timeout-dialation", "1");

        return $r2;
    }

    public java.util.List getArgList()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.util.List $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        return $r2;
    }

    public java.lang.String[] getArgs()
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1;
        java.lang.String[] $r2;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: java.lang.String[] getArgs()>();

        return $r2;
    }

    private void defineCallback() throws java.lang.SecurityException, java.lang.NoSuchMethodException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.dacapo.harness.CommandLineArgs r0;
        org.apache.commons.cli.CommandLine $r1, $r3, $r12, $r22;
        boolean $z0, $z1;
        org.dacapo.harness.Callback $r2, $r9, $r29;
        java.lang.String $r4, $r13, $r16, $r23, $r25;
        java.lang.Class $r5, r26;
        java.lang.Class[] $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        java.lang.StringBuilder $r10, $r14, $r15, $r19, $r21, $r24;
        java.io.PrintStream $r11, $r18, $r20;
        java.lang.Exception $r17;
        java.lang.reflect.Constructor r28;

        r0 := @this: org.dacapo.harness.CommandLineArgs;

        $r1 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("callback");

        if $z0 == 0 goto label6;

        r26 = null;

     label1:
        $r3 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r4 = virtualinvoke $r3.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("callback");

        r26 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.Object)>($r17);

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find callback class ");

        $r22 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r23 = virtualinvoke $r22.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("callback");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r25);

        staticinvoke <java.lang.System: void exit(int)>(2);

     label4:
        $r5 = class "Lorg/dacapo/harness/Callback;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r26);

        if $z1 != 0 goto label5;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = r0.<org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLine line>;

        $r13 = virtualinvoke $r12.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("callback");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an instance of Callback");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r16);

        staticinvoke <java.lang.System: void exit(int)>(3);

        goto label6;

     label5:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Lorg/dacapo/harness/CommandLineArgs;";

        r28 = virtualinvoke r26.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        $r8 = virtualinvoke r28.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

        $r9 = (org.dacapo.harness.Callback) $r8;

        r0.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback callback> = $r9;

     label6:
        $r29 = virtualinvoke r0.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback getCallback()>();

        if $r29 != null goto label7;

        $r2 = new org.dacapo.harness.Callback;

        specialinvoke $r2.<org.dacapo.harness.Callback: void <init>(org.dacapo.harness.CommandLineArgs)>(r0);

        r0.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback callback> = $r2;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static org.apache.commons.cli.Option makeOption(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        boolean $z0, $z1;
        org.apache.commons.cli.Option $r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.AssertionError $r8;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $z0 = <org.dacapo.harness.CommandLineArgs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r0 = new org.apache.commons.cli.Option;

        if r3 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        specialinvoke $r0.<org.apache.commons.cli.Option: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String)>(r1, r2, $z1, r4);

        if r3 == null goto label4;

        virtualinvoke $r0.<org.apache.commons.cli.Option: void setValueSeparator(char)>(61);

        virtualinvoke $r0.<org.apache.commons.cli.Option: void setArgName(java.lang.String)>(r3);

     label4:
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.apache.commons.cli.Option[] $r1;
        org.apache.commons.cli.Option $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        org.apache.commons.cli.PosixParser $r27;
        org.apache.commons.cli.Options $r28, $r29;

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_TIMEOUT_DIALATION> = "timeout-dialation";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_THREAD_FACTOR> = "thread-factor";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_THREAD_COUNT> = "thread-count";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_NO_PRE_ITERATION_GC> = "no-pre-iteration-gc";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_VERBOSE> = "verbose";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_CONFIG> = "config";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_VALIDATION_REPORT> = "validation-report";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_PRESERVE> = "preserve";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_NO_VALIDATION> = "no-validation";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_NO_DIGEST_OUTPUT> = "no-digest-output";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_IGNORE_VALIDATION> = "ignore-validation";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_DEBUG> = "debug";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_ITERATIONS> = "iterations";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_WINDOW> = "window";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_VARIANCE> = "variance";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_MAX_ITERATIONS> = "max-iterations";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_CONVERGE> = "converge";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_SCRATCH_DIRECTORY> = "scratch-directory";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_SIZES> = "sizes";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_SIZE> = "size";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_INFORMATION> = "information";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_LIST_BENCHMARKS> = "list-benchmarks";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_RELEASE_NOTES> = "release-notes";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_HELP> = "help";

        <org.dacapo.harness.CommandLineArgs: java.lang.String OPT_CALLBACK> = "callback";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_TIMEOUT_DIALATION> = "1";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_THREAD_FACTOR> = "0";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_THREAD_COUNT> = "0";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_ITERATIONS> = "1";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_VARIANCE> = "3.0";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_WINDOW_SIZE> = "3";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_MAX_ITERATIONS> = "20";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_SCRATCH_DIRECTORY> = "./scratch";

        <org.dacapo.harness.CommandLineArgs: java.lang.String DEFAULT_SIZE> = "default";

        <org.dacapo.harness.CommandLineArgs: java.lang.String RELEASE_NOTES> = "RELEASE_NOTES.txt";

        <org.dacapo.harness.CommandLineArgs: int EXIT_MISSING_BENCHMARKS> = 10;

        <org.dacapo.harness.CommandLineArgs: int EXIT_UNKNOWN_BENCHMARK> = 9;

        <org.dacapo.harness.CommandLineArgs: int EXIT_BAD_COMMANDLINE> = 4;

        <org.dacapo.harness.CommandLineArgs: int EXIT_BAD_CALLBACK> = 3;

        <org.dacapo.harness.CommandLineArgs: int EXIT_MISSING_CALLBACK> = 2;

        <org.dacapo.harness.CommandLineArgs: int EXIT_OK> = 0;

        $r0 = class "Lorg/dacapo/harness/CommandLineArgs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.dacapo.harness.CommandLineArgs: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (org.apache.commons.cli.Option)[25];

        $r2 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("c", "callback", "Use class <callback> to bracket benchmark runs", "callback");

        $r1[0] = $r2;

        $r3 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("h", "help", "Print this help", null);

        $r1[1] = $r3;

        $r4 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("r", "release-notes", "Print the release notes", null);

        $r1[2] = $r4;

        $r5 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("l", "list-benchmarks", "List available benchmarks", null);

        $r1[3] = $r5;

        $r6 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("i", "information", "Display benchmark information", null);

        $r1[4] = $r6;

        $r7 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("s", "size", "Size of input data", "SIZE");

        $r1[5] = $r7;

        $r8 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "scratch-directory", "Specify an alternate scratch directory <dir>", "dir");

        $r1[6] = $r8;

        $r9 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "sizes", "Report the valid sizes for the specified benchmarks", null);

        $r1[7] = $r9;

        $r10 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("C", "converge", "Allow benchmark times to converge before timing", null);

        $r1[8] = $r10;

        $r11 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "max-iterations", "Run a max of <max_iterations> iterations (default 20)", "max_iterations");

        $r1[9] = $r11;

        $r12 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "variance", "Target coefficient of variation <pct> (default 3.0)", "pct");

        $r1[10] = $r12;

        $r13 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "window", "Measure variance over <window> runs (default 3)", "window");

        $r1[11] = $r13;

        $r14 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("n", "iterations", "Run the benchmark <iter> times", "iter");

        $r1[12] = $r14;

        $r15 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("d", "debug", "Verbose debugging information", null);

        $r1[13] = $r15;

        $r16 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "ignore-validation", "Don\'t halt on validation failure", null);

        $r1[14] = $r16;

        $r17 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "no-digest-output", "Turn off SHA1 digest of stdout/stderr", null);

        $r1[15] = $r17;

        $r18 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "no-validation", "Don\'t validate at all", null);

        $r1[16] = $r18;

        $r19 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "preserve", "Preserve output files (debug)", null);

        $r1[17] = $r19;

        $r20 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "validation-report", "Report digests, line counts etc", "report_file");

        $r1[18] = $r20;

        $r21 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "config", null, "config_file");

        $r1[19] = $r21;

        $r22 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "no-pre-iteration-gc", "Skip performing System.gc() before the start of each iteration", null);

        $r1[20] = $r22;

        $r23 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("t", "thread-count", "Set the thread count to drive the workload (mutually exclusive -k)", "thread_count");

        $r1[21] = $r23;

        $r24 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("k", "thread-factor", "Set the number of threads per CPU to drive the workload (mutually exclusive with -t)", "thread_per_cpu");

        $r1[22] = $r24;

        $r25 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("f", "timeout-dialation", "Set the time dialation of the timeouts in the benchmark by the given integer factor.", "timeout_dialation");

        $r1[23] = $r25;

        $r26 = staticinvoke <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option makeOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("v", "verbose", "Verbose output", null);

        $r1[24] = $r26;

        <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Option[] OPTIONS> = $r1;

        $r27 = new org.apache.commons.cli.PosixParser;

        specialinvoke $r27.<org.apache.commons.cli.PosixParser: void <init>()>();

        <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.CommandLineParser parser> = $r27;

        $r28 = new org.apache.commons.cli.Options;

        specialinvoke $r28.<org.apache.commons.cli.Options: void <init>()>();

        <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Options options> = $r28;

        $r29 = new org.apache.commons.cli.Options;

        specialinvoke $r29.<org.apache.commons.cli.Options: void <init>()>();

        <org.dacapo.harness.CommandLineArgs: org.apache.commons.cli.Options visibleOptions> = $r29;

        return;
    }
}
