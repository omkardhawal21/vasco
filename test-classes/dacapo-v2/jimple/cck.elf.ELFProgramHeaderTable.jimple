public class cck.elf.ELFProgramHeaderTable extends java.lang.Object
{
    public static final int PT_NULL;
    public static final int PT_LOAD;
    public static final int PT_DYNAMIC;
    public static final int PT_INTERP;
    public static final int PT_NOTE;
    public static final int PT_SHLIB;
    public static final int PT_PHDR;
    public static final int PT_LOPROC;
    public static final int PT_HIPROC;
    public static final int PF_EXEC;
    public static final int PF_WRITE;
    public static final int PF_READ;
    public final cck.elf.ELFHeader header;
    public final cck.elf.ELFProgramHeaderTable$Entry32[] entries;

    public void <init>(cck.elf.ELFHeader)
    {
        cck.elf.ELFProgramHeaderTable r0;
        cck.elf.ELFHeader r1;
        boolean $z0;
        short $s0;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r2;
        cck.util.Util$InternalError $r3;

        r0 := @this: cck.elf.ELFProgramHeaderTable;

        r1 := @parameter0: cck.elf.ELFHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<cck.elf.ELFHeader: boolean is32Bit()>();

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>("Only 32 bit ELF files are supported.");

        throw $r3;

     label1:
        r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header> = r1;

        $s0 = r1.<cck.elf.ELFHeader: short e_phnum>;

        $r2 = newarray (cck.elf.ELFProgramHeaderTable$Entry32)[$s0];

        r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries> = $r2;

        return;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException
    {
        cck.elf.ELFProgramHeaderTable r0;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r1, $r7, $r10;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i14, i15;
        java.io.RandomAccessFile r2;
        cck.elf.ELFHeader $r3, $r5, $r11;
        long $l2;
        cck.elf.ELFDataInputStream $r4;
        cck.elf.ELFProgramHeaderTable$Entry32 $r8;
        short $s12;

        r0 := @this: cck.elf.ELFProgramHeaderTable;

        r2 := @parameter0: java.io.RandomAccessFile;

        $r1 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header>;

        $i1 = $r3.<cck.elf.ELFHeader: int e_phoff>;

        $l2 = (long) $i1;

        virtualinvoke r2.<java.io.RandomAccessFile: void seek(long)>($l2);

        $r4 = new cck.elf.ELFDataInputStream;

        $r5 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header>;

        specialinvoke $r4.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>($r5, r2);

        i14 = 0;

     label2:
        $r7 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;

        $i3 = lengthof $r7;

        if i14 >= $i3 goto label5;

        $r8 = new cck.elf.ELFProgramHeaderTable$Entry32;

        specialinvoke $r8.<cck.elf.ELFProgramHeaderTable$Entry32: void <init>(cck.elf.ELFProgramHeaderTable)>(r0);

        $i4 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_type> = $i4;

        $i5 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_offset> = $i5;

        $i6 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_vaddr> = $i6;

        $i7 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr> = $i7;

        $i8 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz> = $i8;

        $i9 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_memsz> = $i9;

        $i10 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_flags> = $i10;

        $i11 = virtualinvoke $r4.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_align> = $i11;

        $r10 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;

        $r10[i14] = $r8;

        i15 = 32;

     label3:
        $r11 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header>;

        $s12 = $r11.<cck.elf.ELFHeader: short e_phentsize>;

        if i15 >= $s12 goto label4;

        virtualinvoke r2.<java.io.RandomAccessFile: int read()>();

        i15 = i15 + 1;

        goto label3;

     label4:
        i14 = i14 + 1;

        goto label2;

     label5:
        return;
    }

    public cck.elf.ELFProgramHeaderTable$Entry32 getEntry(int)
    {
        cck.elf.ELFProgramHeaderTable r0;
        int i0;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r1;
        cck.elf.ELFProgramHeaderTable$Entry32 $r2;

        r0 := @this: cck.elf.ELFProgramHeaderTable;

        i0 := @parameter0: int;

        $r1 = r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;

        $r2 = $r1[i0];

        return $r2;
    }

    public static java.lang.String getType(cck.elf.ELFProgramHeaderTable$Entry32)
    {
        cck.elf.ELFProgramHeaderTable$Entry32 r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;

        r0 := @parameter0: cck.elf.ELFProgramHeaderTable$Entry32;

        $i0 = r0.<cck.elf.ELFProgramHeaderTable$Entry32: int p_type>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label8;
        };

     label1:
        return "null";

     label2:
        return "load";

     label3:
        return "dynamic";

     label4:
        return "interp";

     label5:
        return "note";

     label6:
        return "shlib";

     label7:
        return "phdr";

     label8:
        $i1 = r0.<cck.elf.ELFProgramHeaderTable$Entry32: int p_type>;

        $l2 = (long) $i1;

        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($l2, 8);

        return $r1;
    }

    public static void <clinit>()
    {
        <cck.elf.ELFProgramHeaderTable: int PF_READ> = 4;

        <cck.elf.ELFProgramHeaderTable: int PF_WRITE> = 2;

        <cck.elf.ELFProgramHeaderTable: int PF_EXEC> = 1;

        <cck.elf.ELFProgramHeaderTable: int PT_HIPROC> = 2147483647;

        <cck.elf.ELFProgramHeaderTable: int PT_LOPROC> = 1879048192;

        <cck.elf.ELFProgramHeaderTable: int PT_PHDR> = 6;

        <cck.elf.ELFProgramHeaderTable: int PT_SHLIB> = 5;

        <cck.elf.ELFProgramHeaderTable: int PT_NOTE> = 4;

        <cck.elf.ELFProgramHeaderTable: int PT_INTERP> = 3;

        <cck.elf.ELFProgramHeaderTable: int PT_DYNAMIC> = 2;

        <cck.elf.ELFProgramHeaderTable: int PT_LOAD> = 1;

        <cck.elf.ELFProgramHeaderTable: int PT_NULL> = 0;

        return;
    }
}
