public class cck.text.StringUtil extends java.lang.Object
{
    public static final java.lang.String QUOTE;
    public static final java.lang.String SQUOTE;
    public static final java.lang.String LPAREN;
    public static final java.lang.String RPAREN;
    public static final java.lang.String COMMA;
    public static final java.lang.String COMMA_SPACE;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final char SQUOTE_CHAR;
    public static final char BACKSLASH;
    public static final char QUOTE_CHAR;
    protected static final java.lang.String[] spacers;

    public void <init>()
    {
        cck.text.StringUtil r0;

        r0 := @this: cck.text.StringUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String addrToString(int)
    {
        int i0;
        long $l1;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String to0xHex(long,int)>($l1, 4);

        return $r0;
    }

    public static java.lang.String baseFileName(java.lang.String)
    {
        int i0, i1, $i2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if i0 < 0 goto label1;

        $i2 = i0 + 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

     label1:
        i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if i1 < 0 goto label2;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

     label2:
        return r0;
    }

    public static java.lang.String readIdentifier(java.text.CharacterIterator)
    {
        java.lang.StringBuffer $r0;
        java.text.CharacterIterator r2;
        char c0;
        boolean $z0;
        java.lang.String $r4;

        r2 := @parameter0: java.text.CharacterIterator;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

     label1:
        c0 = interfaceinvoke r2.<java.text.CharacterIterator: char current()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 != 0 goto label2;

        if c0 == 95 goto label2;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String readDotIdentifier(java.text.CharacterIterator)
    {
        java.lang.StringBuffer $r0;
        java.text.CharacterIterator r2;
        char c0;
        boolean $z0;
        java.lang.String $r4;

        r2 := @parameter0: java.text.CharacterIterator;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

     label1:
        c0 = interfaceinvoke r2.<java.text.CharacterIterator: char current()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 != 0 goto label2;

        if c0 == 95 goto label2;

        if c0 == 46 goto label2;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static int readHexValue(java.text.CharacterIterator, int)
    {
        int i0, $i2, $i3, i5, i6;
        java.text.CharacterIterator r0;
        char c1;
        boolean $z0;

        r0 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i0 goto label4;

        c1 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        if c1 != 65535 goto label2;

        goto label4;

     label2:
        $z0 = staticinvoke <cck.text.StringUtil: boolean isHexDigit(char)>(c1);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $i2 = i5 << 4;

        $i3 = staticinvoke <cck.text.StringUtil: int hexValueOf(char)>(c1);

        i5 = $i2 | $i3;

        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        i6 = i6 + 1;

        goto label1;

     label4:
        return i5;
    }

    public static int readOctalValue(java.text.CharacterIterator, int)
    {
        int i0, $i2, $i3, i5, i6;
        java.text.CharacterIterator r0;
        char c1;
        boolean $z0;

        r0 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i0 goto label3;

        c1 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        $z0 = staticinvoke <cck.text.StringUtil: boolean isOctalDigit(char)>(c1);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i2 = i5 << 3;

        $i3 = staticinvoke <cck.text.StringUtil: int octalValueOf(char)>(c1);

        i5 = $i2 | $i3;

        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        i6 = i6 + 1;

        goto label1;

     label3:
        return i5;
    }

    public static int readBinaryValue(java.text.CharacterIterator, int)
    {
        int i0, $i3, i4, i5;
        java.text.CharacterIterator r0;
        char c1;

        r0 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i4 = 0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        c1 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        if c1 != 48 goto label2;

        i4 = i4 << 1;

        goto label3;

     label2:
        if c1 != 49 goto label4;

        $i3 = i4 << 1;

        i4 = $i3 | 1;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return i4;
    }

    public static int readDecimalValue(java.text.CharacterIterator, int)
    {
        java.text.CharacterIterator r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String readDecimalString(java.text.CharacterIterator,int)>(r0, i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i1;
    }

    public static java.lang.String readDecimalString(java.text.CharacterIterator, int)
    {
        java.lang.StringBuffer $r0;
        java.text.CharacterIterator r2;
        boolean $z0, $z1;
        int i0, i3;
        java.lang.String $r3;
        char c1;

        r2 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $z0 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>(r2, 45);

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label1:
        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        c1 = interfaceinvoke r2.<java.text.CharacterIterator: char current()>();

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c1);

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

        i3 = i3 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static int readIntegerValue(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        int $i0, $i2, $i4, $i5, $i6;
        char c7, c8;

        r0 := @parameter0: java.text.CharacterIterator;

        c7 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        if c7 != 45 goto label1;

        $i6 = staticinvoke <cck.text.StringUtil: int readDecimalValue(java.text.CharacterIterator,int)>(r0, 10);

        return $i6;

     label1:
        if c7 != 48 goto label6;

        c8 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        if c8 == 120 goto label2;

        if c8 != 88 goto label3;

     label2:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        $i2 = staticinvoke <cck.text.StringUtil: int readHexValue(java.text.CharacterIterator,int)>(r0, 8);

        return $i2;

     label3:
        if c8 == 98 goto label4;

        if c8 != 66 goto label5;

     label4:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        $i4 = staticinvoke <cck.text.StringUtil: int readBinaryValue(java.text.CharacterIterator,int)>(r0, 32);

        return $i4;

     label5:
        $i5 = staticinvoke <cck.text.StringUtil: int readOctalValue(java.text.CharacterIterator,int)>(r0, 11);

        return $i5;

     label6:
        $i0 = staticinvoke <cck.text.StringUtil: int readDecimalValue(java.text.CharacterIterator,int)>(r0, 10);

        return $i0;
    }

    public static void skipWhiteSpace(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        char c0;

        r0 := @parameter0: java.text.CharacterIterator;

     label1:
        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        if c0 == 32 goto label2;

        if c0 == 10 goto label2;

        if c0 == 9 goto label2;

        goto label3;

     label2:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        return;
    }

    public static char peek(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        char $c0;

        r0 := @parameter0: java.text.CharacterIterator;

        $c0 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        return $c0;
    }

    public static boolean peekAndEat(java.text.CharacterIterator, char)
    {
        java.text.CharacterIterator r0;
        char c0, c1;

        r0 := @parameter0: java.text.CharacterIterator;

        c1 := @parameter1: char;

        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        if c0 != c1 goto label1;

        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 1;

     label1:
        return 0;
    }

    public static boolean peekAndEat(java.text.CharacterIterator, java.lang.String)
    {
        java.text.CharacterIterator r0;
        int i0, $i1, i6;
        java.lang.String r1;
        char $c2, $c3;

        r0 := @parameter0: java.text.CharacterIterator;

        r1 := @parameter1: java.lang.String;

        i0 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        i6 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i6 >= $i1 goto label4;

        $c2 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        if $c2 != $c3 goto label2;

        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        goto label3;

     label2:
        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i0);

        return 0;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return 1;
    }

    public static void expectChar(java.text.CharacterIterator, char) throws java.lang.Exception
    {
        java.text.CharacterIterator r0;
        char c0, c2;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6;
        int $i3;
        java.lang.String $r5, $r7;

        r0 := @parameter0: java.text.CharacterIterator;

        c2 := @parameter1: char;

        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        if c0 == c2 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parse error at ");

        $i3 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected character ");

        $r5 = staticinvoke <cck.text.StringUtil: java.lang.String squote(char)>(c2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r7);

     label1:
        return;
    }

    public static void expectChars(java.text.CharacterIterator, java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0;
        int $i0, i2;
        java.text.CharacterIterator r1;
        char $c1;

        r1 := @parameter0: java.text.CharacterIterator;

        r0 := @parameter1: java.lang.String;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(r1, $c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void expectKeyword(java.text.CharacterIterator, java.lang.String)
    {
        java.text.CharacterIterator r0;
        java.lang.String r1, r2, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        int $i0;

        r0 := @parameter0: java.text.CharacterIterator;

        r2 := @parameter1: java.lang.String;

        r1 = staticinvoke <cck.text.StringUtil: java.lang.String readIdentifier(java.text.CharacterIterator)>(r0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parse error at ");

        $i0 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected keyword ");

        $r7 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r9);

     label1:
        return;
    }

    public static boolean isHex(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        char c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label3;

        if c1 == 120 goto label2;

        if c1 != 88 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isBin(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        char c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label3;

        if c1 == 98 goto label2;

        if c1 != 66 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isHexDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <cck.text.CharUtil: boolean isHexDigit(char)>(c0);

        return $z0;
    }

    public static int hexValueOf(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <cck.text.CharUtil: int hexValueOf(char)>(c0);

        return $i1;
    }

    public static int octalValueOf(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;

        $i1 = staticinvoke <cck.text.CharUtil: int octValueOf(char)>(c0);

        return $i1;
    }

    public static boolean isOctalDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <cck.text.CharUtil: boolean isOctDigit(char)>(c0);

        return $z0;
    }

    public static void justify(boolean, java.lang.StringBuffer, java.lang.String, int)
    {
        int i0, $i1, i2;
        java.lang.String r0;
        boolean z0;
        java.lang.StringBuffer r1;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.StringBuffer;

        r0 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - $i1;

        if z0 == 0 goto label1;

        staticinvoke <cck.text.StringUtil: void space(java.lang.StringBuffer,int)>(r1, i2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        staticinvoke <cck.text.StringUtil: void space(java.lang.StringBuffer,int)>(r1, i2);

     label2:
        return;
    }

    public static void justify(boolean, java.lang.StringBuffer, long, int)
    {
        boolean z0;
        java.lang.StringBuffer r0;
        long l0;
        java.lang.String $r1;
        int i1;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.StringBuffer;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(z0, r0, $r1, i1);

        return;
    }

    public static void justify(boolean, java.lang.StringBuffer, float, int)
    {
        boolean z0;
        java.lang.StringBuffer r0;
        float f0;
        java.lang.String $r1;
        int i0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.StringBuffer;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(z0, r0, $r1, i0);

        return;
    }

    public static java.lang.String justify(boolean, java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r0, $r3;
        java.lang.StringBuffer $r1;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = i0 - $i1;

        if $i2 > 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i0);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(z0, $r1, r0, i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String justify(boolean, long, int)
    {
        boolean z0;
        long l0;
        java.lang.String $r0, $r1;
        int i1;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(z0, $r0, i1);

        return $r1;
    }

    public static java.lang.String justify(boolean, float, int)
    {
        boolean z0;
        float f0;
        java.lang.String $r0, $r1;
        int i0;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        $r0 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(z0, $r0, i0);

        return $r1;
    }

    public static java.lang.String leftJustify(long, int)
    {
        long l0;
        int i1;
        java.lang.String $r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,long,int)>(0, l0, i1);

        return $r0;
    }

    public static java.lang.String leftJustify(float, int)
    {
        float f0;
        int i0;
        java.lang.String $r0;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,float,int)>(0, f0, i0);

        return $r0;
    }

    public static java.lang.String leftJustify(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(0, r0, i0);

        return $r1;
    }

    public static java.lang.String rightJustify(long, int)
    {
        long l0;
        int i1;
        java.lang.String $r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,long,int)>(1, l0, i1);

        return $r0;
    }

    public static java.lang.String rightJustify(float, int)
    {
        float f0;
        int i0;
        java.lang.String $r0;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,float,int)>(1, f0, i0);

        return $r0;
    }

    public static java.lang.String rightJustify(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(1, r0, i0);

        return $r1;
    }

    public static java.lang.String toHex(long, int)
    {
        long l0;
        int i1;
        char[] $r0, $r1;
        java.lang.String $r2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = newarray (char)[i1];

        $r0 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(l0, i1, 0, $r1, $r0);

        return $r2;
    }

    public static java.lang.String toLowHex(long, int)
    {
        long l0;
        int i1;
        char[] $r0, $r1;
        java.lang.String $r2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = newarray (char)[i1];

        $r0 = <cck.text.CharUtil: char[] LOW_HEX_CHARS>;

        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(l0, i1, 0, $r1, $r0);

        return $r2;
    }

    private static java.lang.String convertToHex(long, int, int, char[], char[])
    {
        long l0, $l3, $l8;
        int i1, $i2, i5, $i6, $i7, $i9, $i10, $i12, i14, i15, i16;
        byte $b4;
        java.lang.String $r0, $r4, $r5, $r7;
        char[] r1, r2;
        char $c11, $c13;
        java.lang.StringBuffer $r3;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        r1 := @parameter3: char[];

        r2 := @parameter4: char[];

        $i2 = i1 * 4;

        $l3 = 1L << $i2;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i14 = 0;

     label1:
        if i14 >= i5 goto label2;

        $c13 = r1[i14];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c13);

        i14 = i14 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label3:
        $i6 = i5 + i1;

        i15 = $i6 - 1;

        i16 = 0;

     label4:
        if i16 >= i1 goto label5;

        $i12 = i15 - i16;

        $i7 = i16 * 4;

        $l8 = l0 >> $i7;

        $i9 = (int) $l8;

        $i10 = $i9 & 15;

        $c11 = r2[$i10];

        r1[$i12] = $c11;

        i16 = i16 + 1;

        goto label4;

     label5:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>(r1);

        return $r0;
    }

    public static java.lang.String to0xHex(long, int)
    {
        int i0, $i1;
        char[] r0, $r1;
        long l2;
        java.lang.String $r2;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        $i1 = i0 + 2;

        r0 = newarray (char)[$i1];

        r0[0] = 48;

        r0[1] = 120;

        $r1 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(l2, i0, 2, r0, $r1);

        return $r2;
    }

    public static java.lang.String toBin(long, int)
    {
        int i0, $i1, $i3, $i7, i8;
        char[] r0;
        java.lang.String $r1;
        long l2, $l4, $l5;
        byte $b6;
        char $c9;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        r0 = newarray (char)[i0];

        i8 = 0;

     label1:
        if i8 >= i0 goto label4;

        $i1 = i0 - i8;

        $i7 = $i1 - 1;

        $i3 = 1 << i8;

        $l4 = (long) $i3;

        $l5 = l2 & $l4;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label2;

        $c9 = 48;

        goto label3;

     label2:
        $c9 = 49;

     label3:
        r0[$i7] = $c9;

        i8 = i8 + 1;

        goto label1;

     label4:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static void toHex(java.lang.StringBuffer, long, int)
    {
        long l0, $l3, $l6;
        int i1, $i2, $i5, $i7, $i8, i10;
        byte $b4;
        java.lang.StringBuffer r0;
        char[] $r1;
        char $c9;
        java.lang.String $r3, $r4;

        r0 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $i2 = i1 * 4;

        $l3 = 1L << $i2;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label1;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        return;

     label1:
        i10 = i1 - 1;

     label2:
        if i10 < 0 goto label3;

        $r1 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $i5 = i10 * 4;

        $l6 = l0 >> $i5;

        $i7 = (int) $l6;

        $i8 = $i7 & 15;

        $c9 = $r1[$i8];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

        i10 = i10 + -1;

        goto label2;

     label3:
        return;
    }

    public static java.lang.String splice(java.lang.String[], java.lang.String[])
    {
        java.lang.StringBuffer $r0;
        java.lang.String[] r2, r3;
        int $i0, $i1, $i2, i3;
        java.lang.String $r4, $r5, $r7, $r9;

        r2 := @parameter0: java.lang.String[];

        r3 := @parameter1: java.lang.String[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label1:
        $i0 = lengthof r2;

        if i3 >= $i0 goto label3;

        $r7 = r2[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $i2 = lengthof r3;

        if i3 >= $i2 goto label2;

        $r9 = r3[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i1 = lengthof r3;

        if i3 >= $i1 goto label4;

        $r5 = r3[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String quote(java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.Object r2;
        java.lang.String $r5;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String squote(char)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        char c0;
        java.lang.String $r4;

        c0 := @parameter0: char;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String embed(java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.Object r2;
        java.lang.String $r5;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6;
        java.lang.Object r1, r4;
        java.lang.String $r7;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.Object r1, r4, r7;
        java.lang.String $r10;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12;
        java.lang.Object r1, r4, r7, r10;
        java.lang.String $r13;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        r10 := @parameter3: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.Object r1, r4, r7, r10, r13;
        java.lang.String $r16;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        r10 := @parameter3: java.lang.Object;

        r13 := @parameter4: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public static java.lang.String commalist(java.util.List)
    {
        java.lang.StringBuffer $r0;
        java.util.List r2;
        java.lang.String $r3;

        r2 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void commalist(java.util.List,java.lang.StringBuffer)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static void commalist(java.util.List, java.lang.StringBuffer)
    {
        java.util.List r0;
        java.util.Iterator r1;
        java.lang.StringBuffer r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.StringBuffer;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label1;

     label2:
        return;
    }

    public static java.lang.String commalist(java.lang.Object[])
    {
        java.lang.StringBuffer $r0;
        java.lang.Object[] r2;
        java.lang.String $r3;

        r2 := @parameter0: java.lang.Object[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void commalist(java.lang.Object[],java.lang.StringBuffer)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static void commalist(java.lang.Object[], java.lang.StringBuffer)
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.StringBuffer r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.StringBuffer;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r2 = r0[i1];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void commalist(java.util.Iterator, java.lang.StringBuffer)
    {
        java.util.Iterator r0;
        boolean $z0;
        java.lang.StringBuffer r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        int i0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.StringBuffer;

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String linelist(java.util.List)
    {
        java.lang.StringBuffer $r0;
        java.util.List r2;
        java.lang.String $r3;

        r2 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void linelist(java.lang.StringBuffer,java.util.List)>($r0, r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static void linelist(java.lang.StringBuffer, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.StringBuffer r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r2 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.Object r1, r4;
        java.lang.String $r6;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8;
        java.lang.Object r1, r4, r7;
        java.lang.String $r9;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8, $r9, $r11;
        java.lang.Object r1, r4, r7, r10;
        java.lang.String $r12;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        r10 := @parameter3: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public static java.lang.String interval(int, int)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5;
        int i0, i1;
        java.lang.String $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static char alpha(int)
    {
        int i0, $i1, $i2;
        char $c3;

        i0 := @parameter0: int;

        $i1 = 97 + i0;

        $i2 = $i1 - 1;

        $c3 = (char) $i2;

        return $c3;
    }

    public static java.lang.String qembed(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r6, $r7, $r9;
        java.lang.String r1, r4, $r5, r8, $r10;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r5 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static int evaluateIntegerLiteral(java.lang.String)
    {
        java.text.StringCharacterIterator $r0;
        java.lang.String r1;
        int $i0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        $i0 = staticinvoke <cck.text.StringUtil: int readIntegerValue(java.text.CharacterIterator)>($r0);

        return $i0;
    }

    public static java.lang.String evaluateStringLiteral(java.lang.String) throws java.lang.Exception
    {
        java.lang.StringBuffer $r0;
        java.lang.String r1, $r6;
        int $i0;
        java.text.StringCharacterIterator $r3;
        boolean $z0;
        char c2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r3 = new java.text.StringCharacterIterator;

        specialinvoke $r3.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($r3, 34);

     label1:
        $z0 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>($r3, 34);

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        c2 = interfaceinvoke $r3.<java.text.CharacterIterator: char current()>();

        interfaceinvoke $r3.<java.text.CharacterIterator: char next()>();

        if c2 != 65535 goto label3;

        goto label5;

     label3:
        if c2 != 92 goto label4;

        c2 = staticinvoke <cck.text.StringUtil: char escapeChar(java.text.CharacterIterator)>($r3);

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        goto label1;

     label5:
        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($r3, 65535);

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static char evaluateCharLiteral(java.lang.String) throws java.lang.Exception
    {
        java.text.StringCharacterIterator $r0;
        java.lang.String r1;
        boolean $z0;
        char c1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($r0, 39);

        $z0 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>($r0, 92);

        if $z0 == 0 goto label1;

        c1 = staticinvoke <cck.text.StringUtil: char escapeChar(java.text.CharacterIterator)>($r0);

        goto label2;

     label1:
        c1 = interfaceinvoke $r0.<java.text.CharacterIterator: char current()>();

        interfaceinvoke $r0.<java.text.CharacterIterator: char next()>();

     label2:
        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($r0, 39);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($r0, 65535);

        return c1;
    }

    private static char escapeChar(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        char c0, $c2, $c10;
        int $i1, $i9;

        r0 := @parameter0: java.text.CharacterIterator;

        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        lookupswitch(c0)
        {
            case 34: goto label07;
            case 39: goto label06;
            case 48: goto label10;
            case 49: goto label10;
            case 50: goto label10;
            case 51: goto label10;
            case 52: goto label10;
            case 53: goto label10;
            case 54: goto label10;
            case 55: goto label10;
            case 92: goto label05;
            case 98: goto label02;
            case 102: goto label01;
            case 110: goto label03;
            case 114: goto label04;
            case 116: goto label08;
            case 120: goto label09;
            default: goto label11;
        };

     label01:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 12;

     label02:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 8;

     label03:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 10;

     label04:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 13;

     label05:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 92;

     label06:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 39;

     label07:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 34;

     label08:
        interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        return 9;

     label09:
        $i1 = staticinvoke <cck.text.StringUtil: int readHexValue(java.text.CharacterIterator,int)>(r0, 4);

        $c2 = (char) $i1;

        return $c2;

     label10:
        $i9 = staticinvoke <cck.text.StringUtil: int readOctalValue(java.text.CharacterIterator,int)>(r0, 3);

        $c10 = (char) $i9;

        return $c10;

     label11:
        return c0;
    }

    private static java.lang.IllegalArgumentException invalidCharLiteral(java.lang.String)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character literal: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        return $r0;
    }

    public static java.lang.String trimquotes(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0, $i2, i4, i5;
        char $c1, $c3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        i4 = 0;

        i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c1 != 34 goto label2;

        i4 = 0 + 1;

     label2:
        $i2 = i5 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 34 goto label3;

        i5 = i5 + -1;

     label3:
        if i4 >= i5 goto label4;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i5);

        return $r1;

     label4:
        return "";
    }

    public static java.lang.String formatParagraphs(java.lang.String, int, int, int)
    {
        java.lang.String r0, r1, r2, $r6;
        int i0, i1, $i2, $i3, i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        java.lang.StringBuffer $r3;
        char c4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i10 := @parameter2: int;

        i5 := @parameter3: int;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i11 = i10 + i1;

        i12 = i11 + i1;

        r1 = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(i11);

        r2 = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(i1);

        $r3 = new java.lang.StringBuffer;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 + 50;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        i13 = -1;

        i14 = 0;

     label1:
        if i14 >= i0 goto label5;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        if c4 != 10 goto label2;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i12 = i11;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        goto label4;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c4);

        if $z0 == 0 goto label3;

        i13 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

     label3:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        i12 = i12 + 1;

        if i12 <= i5 goto label4;

        if i13 < 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: void setCharAt(int,char)>(i13, 10);

        $i6 = i13 + 1;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>($i6, r2);

        $i7 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        $i8 = $i7 - i13;

        $i9 = $i8 + i1;

        i12 = $i9 - 1;

     label4:
        i14 = i14 + 1;

        goto label1;

     label5:
        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static java.util.List trimLines(java.lang.String, int, int)
    {
        java.util.LinkedList $r0;
        java.lang.String r2, r3, $r6, r8;
        int i0, i1, $i2, $i3, i5, $i6, i7, i8, i9;
        java.lang.StringBuffer $r4, r9;
        char c4;
        boolean $z1;

        r2 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i7 = i1;

        r3 = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(i1);

        $r4 = new java.lang.StringBuffer;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i2);

        r9 = $r4;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        i8 = -1;

        i9 = 0;

     label1:
        if i9 >= i0 goto label5;

        c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i9);

        if c4 != 10 goto label2;

        r9 = staticinvoke <cck.text.StringUtil: java.lang.StringBuffer newBuffer(java.lang.String,java.lang.StringBuffer,java.util.List)>(r3, r9, $r0);

        i7 = virtualinvoke r9.<java.lang.StringBuffer: int length()>();

        goto label4;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c4);

        if $z1 == 0 goto label3;

        i8 = i7;

     label3:
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        i7 = i7 + 1;

        if i7 <= i5 goto label4;

        if i8 < 0 goto label4;

        $i6 = i8 + 1;

        r8 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.String substring(int)>($i6);

        virtualinvoke r9.<java.lang.StringBuffer: void setLength(int)>(i8);

        r9 = staticinvoke <cck.text.StringUtil: java.lang.StringBuffer newBuffer(java.lang.String,java.lang.StringBuffer,java.util.List)>(r8, r9, $r0);

        i7 = virtualinvoke r9.<java.lang.StringBuffer: int length()>();

     label4:
        i9 = i9 + 1;

        goto label1;

     label5:
        $i3 = virtualinvoke r9.<java.lang.StringBuffer: int length()>();

        if $i3 <= 0 goto label6;

        $r6 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

     label6:
        return $r0;
    }

    static java.lang.StringBuffer newBuffer(java.lang.String, java.lang.StringBuffer, java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2, r4;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.StringBuffer;

        r0 := @parameter2: java.util.List;

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>(r4);

        return $r3;
    }

    public static java.lang.String dup(char, int)
    {
        java.lang.StringBuffer $r0;
        int i0, i2;
        java.lang.String $r2;
        char c1;

        c1 := @parameter0: char;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String space(int)
    {
        int i0, $i1;
        java.lang.String[] $r0, $r2;
        java.lang.String $r1, $r3;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return "";

     label1:
        $r0 = <cck.text.StringUtil: java.lang.String[] spacers>;

        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $r2 = <cck.text.StringUtil: java.lang.String[] spacers>;

        $r3 = $r2[i0];

        return $r3;

     label2:
        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String dup(char,int)>(32, i0);

        return $r1;
    }

    public static void space(java.lang.StringBuffer, int)
    {
        int $i0, i1;
        java.lang.StringBuffer r0;

        r0 := @parameter0: java.lang.StringBuffer;

        i1 := @parameter1: int;

     label1:
        $i0 = i1;

        i1 = i1 + -1;

        if $i0 <= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String toFixedFloat(float, int)
    {
        float f0, $f1, $f3, $f4;
        boolean $z0, $z1;
        java.lang.StringBuffer $r0;
        int i0, $i1;
        long l2;
        byte $b3;
        double $d0;
        java.lang.String $r3;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z0 == 0 goto label1;

        return "(inf)";

     label1:
        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z1 == 0 goto label2;

        return "(NaN)";

     label2:
        $r0 = new java.lang.StringBuffer;

        $i1 = i0 + 5;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        l2 = (long) f0;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l2);

        $b3 = f0 cmpl 0.0F;

        if $b3 < 0 goto label3;

        $f3 = (float) l2;

        $f4 = f0 - $f3;

        goto label4;

     label3:
        $f1 = (float) l2;

        $f4 = $f1 - f0;

     label4:
        $d0 = (double) $f4;

        staticinvoke <cck.text.StringUtil: void appendFract(java.lang.StringBuffer,double,int)>($r0, $d0, i0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toDecimal(long, int)
    {
        java.lang.StringBuffer $r0;
        int $i0, i3;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        long $l1, l2;

        l2 := @parameter0: long;

        i3 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        $i0 = 10 + i3;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

     label1:
        if i3 <= 0 goto label2;

        $l1 = l2 % 10L;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l1);

        i3 = i3 + -1;

        l2 = l2 / 10L;

        if i3 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer reverse()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String toMultirepString(int, int)
    {
        java.lang.StringBuffer $r0;
        int i0, $i1, $i2, $i3, i4, i5, i7;
        long $l6;
        java.lang.String $r7;
        boolean $z0;
        char $c8;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        $i1 = i0 * 3;

        $i2 = $i1 + 8;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");

        $i3 = i0 + 3;

        i4 = $i3 / 4;

        $l6 = (long) i5;

        staticinvoke <cck.text.StringUtil: void toHex(java.lang.StringBuffer,long,int)>($r0, $l6, i4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        i7 = i0 - 1;

     label1:
        if i7 < 0 goto label4;

        $z0 = staticinvoke <cck.util.Arithmetic: boolean getBit(int,int)>(i5, i7);

        if $z0 == 0 goto label2;

        $c8 = 49;

        goto label3;

     label2:
        $c8 = 48;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

        i7 = i7 + -1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        if i0 >= 9 goto label5;

        staticinvoke <cck.text.StringUtil: void appendChar(int,java.lang.StringBuffer)>(i5, $r0);

     label5:
        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    private static void appendChar(int, java.lang.StringBuffer)
    {
        int i0;
        java.lang.StringBuffer r0;
        char $c1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        tableswitch(i0)
        {
            case 8: goto label3;
            case 9: goto label4;
            case 10: goto label1;
            case 11: goto label5;
            case 12: goto label5;
            case 13: goto label2;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\n\'");

        goto label6;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\r\'");

        goto label6;

     label3:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\b\'");

        goto label6;

     label4:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\t\'");

        goto label6;

     label5:
        if i0 < 32 goto label6;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $c1 = (char) i0;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

     label6:
        return;
    }

    public static char toBit(boolean)
    {
        boolean z0;
        char $c0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $c0 = 49;

        goto label2;

     label1:
        $c0 = 48;

     label2:
        return $c0;
    }

    public static void appendFract(java.lang.StringBuffer, double, int)
    {
        int i0, $i1, i2, $i3, i5, i6;
        double d0, $d1, $d2;
        java.lang.StringBuffer r0;
        char $c4;

        r0 := @parameter0: java.lang.StringBuffer;

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i5 = 0;

        i6 = 10;

     label1:
        if i5 >= i0 goto label3;

        if i5 != 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label2:
        $d1 = (double) i6;

        $d2 = d0 * $d1;

        $i1 = (int) $d2;

        i2 = $i1 % 10;

        $i3 = i2 + 48;

        $c4 = (char) $i3;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i6 = i6 * 10;

        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object)
    {
        java.util.Properties r0;
        java.lang.Object r1;
        java.lang.String $r2, r4, $r5;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Properties;

        r1 := @parameter2: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $r2);

        $r5 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(r4, r0);

        return $r5;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, $i1, i2;
        java.lang.String r1, $r3, $r4, $r6;
        java.util.Properties r2;
        java.lang.Object $r5;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Properties;

        r0 := @parameter2: java.lang.Object[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $i1 = i2 + 1;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r5 = r0[i2];

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r4, $r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(r1, r2);

        return $r3;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, $i1, i2;
        java.lang.String r1, $r3, $r4, $r5;
        java.util.Properties r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Properties;

        r0 := @parameter2: java.lang.String[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $i1 = i2 + 1;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r5 = r0[i2];

        virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r4, $r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(r1, r2);

        return $r3;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object, java.lang.Object)
    {
        java.util.Properties r0;
        java.lang.Object r1, r4;
        java.lang.String $r2, $r5, r7, $r8;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Properties;

        r1 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $r2);

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("2", $r5);

        $r8 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(r7, r0);

        return $r8;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Properties r0;
        java.lang.Object r1, r4, r7;
        java.lang.String $r2, $r5, $r8, r10, $r11;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Properties;

        r1 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r7 := @parameter4: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $r2);

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("2", $r5);

        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("3", $r8);

        $r11 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(r10, r0);

        return $r11;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties)
    {
        java.lang.String r0, $r3;
        int i0, i2;
        java.lang.StringBuffer $r1;
        char c1;
        java.util.Properties r5;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Properties;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        if c1 != 36 goto label2;

        i2 = staticinvoke <cck.text.StringUtil: int replaceVar(int,int,java.lang.String,java.lang.StringBuffer,java.util.Properties)>(i2, i0, r0, $r1, r5);

        goto label4;

     label2:
        if c1 != 37 goto label3;

        i2 = staticinvoke <cck.text.StringUtil: int replaceVarQuote(int,int,java.lang.String,java.lang.StringBuffer,java.util.Properties)>(i2, i0, r0, $r1, r5);

        goto label4;

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private static int replaceVar(int, int, java.lang.String, java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer $r0, r3;
        int i0, i1, i2;
        java.lang.String r2, r5;
        java.util.Properties r4;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.StringBuffer;

        r4 := @parameter4: java.util.Properties;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(10);

        i2 = staticinvoke <cck.text.StringUtil: int scanAhead(int,char,int,java.lang.String,java.lang.StringBuffer,java.lang.StringBuffer)>(i1, 36, i0, r2, r3, $r0);

        r5 = staticinvoke <cck.text.StringUtil: java.lang.String getProperty(java.lang.StringBuffer,java.util.Properties)>($r0, r4);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        return i2;
    }

    private static int scanAhead(int, char, int, java.lang.String, java.lang.StringBuffer, java.lang.StringBuffer)
    {
        int i0, i3, i4;
        java.lang.String r0;
        char c1, c2;
        boolean $z0;
        java.lang.StringBuffer r1, r3;

        i3 := @parameter0: int;

        c2 := @parameter1: char;

        i0 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.StringBuffer;

        r1 := @parameter5: java.lang.StringBuffer;

        i4 = i3 + 1;

     label1:
        if i4 >= i0 goto label4;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c1);

        if $z0 != 0 goto label2;

        i4 = i4 + -1;

        goto label4;

     label2:
        if c1 != c2 goto label3;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        i4 = i4 + 1;

        goto label1;

     label4:
        return i4;
    }

    private static java.lang.String getProperty(java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1, r3, $r6, $r8;
        java.util.Properties r2;
        java.lang.StringBuilder $r4, $r5, $r7;
        cck.util.Util$InternalError $r9;

        r0 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.util.Properties;

        r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        r3 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringReplace(): unknown variable ");

        $r6 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r8);

        throw $r9;

     label1:
        return r3;
    }

    private static int replaceVarQuote(int, int, java.lang.String, java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer $r0, r3;
        int i0, i1, i2;
        java.lang.String r2, r5;
        java.util.Properties r4;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.StringBuffer;

        r4 := @parameter4: java.util.Properties;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(10);

        i2 = staticinvoke <cck.text.StringUtil: int scanAhead(int,char,int,java.lang.String,java.lang.StringBuffer,java.lang.StringBuffer)>(i1, 37, i0, r2, r3, $r0);

        r5 = staticinvoke <cck.text.StringUtil: java.lang.String getProperty(java.lang.StringBuffer,java.util.Properties)>($r0, r4);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        return i2;
    }

    public static char[] getStringChars(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1;
        char[] r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[$i0];

        $i1 = lengthof r1;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, r1, 0);

        return r1;
    }

    public static java.util.List toList(java.lang.String)
    {
        java.util.LinkedList $r0;
        java.lang.String r2, $r3, $r7, $r8, $r10, $r11;
        boolean $z0;
        java.text.StringCharacterIterator $r4;
        java.lang.StringBuffer $r6, $r12, r13;
        char $c0, $c1, $c2;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r4 = new java.text.StringCharacterIterator;

        specialinvoke $r4.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r2);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(32);

        r13 = $r6;

     label2:
        $c0 = interfaceinvoke $r4.<java.text.CharacterIterator: char current()>();

        if $c0 == 65535 goto label5;

        $c1 = interfaceinvoke $r4.<java.text.CharacterIterator: char current()>();

        if $c1 != 44 goto label3;

        $r10 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r11);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>(int)>(32);

        r13 = $r12;

        goto label4;

     label3:
        $c2 = interfaceinvoke $r4.<java.text.CharacterIterator: char current()>();

        virtualinvoke r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label4:
        interfaceinvoke $r4.<java.text.CharacterIterator: char next()>();

        goto label2;

     label5:
        $r7 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r8);

        return $r0;
    }

    public static java.lang.String getShortName(java.lang.Class)
    {
        java.lang.Class r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(36);

        i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i1 > 0 goto label1;

        if i0 <= 0 goto label3;

     label1:
        if i1 <= i0 goto label2;

        $i4 = i1 + 1;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i4, $i5);

        goto label3;

     label2:
        $i2 = i0 + 1;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

     label3:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        <cck.text.StringUtil: char QUOTE_CHAR> = 34;

        <cck.text.StringUtil: char BACKSLASH> = 92;

        <cck.text.StringUtil: char SQUOTE_CHAR> = 39;

        <cck.text.StringUtil: java.lang.String COMMA_SPACE> = ", ";

        <cck.text.StringUtil: java.lang.String COMMA> = ",";

        <cck.text.StringUtil: java.lang.String RPAREN> = ")";

        <cck.text.StringUtil: java.lang.String LPAREN> = "(";

        <cck.text.StringUtil: java.lang.String SQUOTE> = "\'";

        <cck.text.StringUtil: java.lang.String QUOTE> = "\"";

        $r0 = newarray (java.lang.String)[0];

        <cck.text.StringUtil: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        $r1 = newarray (java.lang.String)[11];

        $r1[0] = "";

        $r1[1] = " ";

        $r1[2] = "  ";

        $r1[3] = "   ";

        $r1[4] = "    ";

        $r1[5] = "     ";

        $r1[6] = "      ";

        $r1[7] = "       ";

        $r1[8] = "        ";

        $r1[9] = "         ";

        $r1[10] = "          ";

        <cck.text.StringUtil: java.lang.String[] spacers> = $r1;

        return;
    }
}
