public class avrora.sim.mcu.ReprogrammableCodeSegment extends avrora.sim.CodeSegment
{
    private static final double ERASE_MS_MIN;
    private static final double WRITE_MS_MIN;
    private static final double ERASE_MS_MAX;
    private static final double WRITE_MS_MAX;
    private static final int SPM_TIMEOUT;
    private static final int STATE_NONE;
    private static final int STATE_PGERASE;
    private static final int STATE_RWWSRE;
    private static final int STATE_BLBSET;
    private static final int STATE_FILL;
    private static final int STATE_PGWRITE;
    private static final int SPM_READY;
    private static final int SPMCSR_LOWERBITS;
    private static final byte DEFAULT_VALUE;
    final avrora.sim.output.SimPrinter flashPrinter;
    avrora.arch.legacy.LegacyDisassembler disassembler;
    byte[] buffer;
    final avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR;
    final int ERASE_CYCLES;
    final int WRITE_CYCLES;
    final int pagesize;
    final int addressMask;
    final avrora.sim.clock.MainClock mainClock;

    public void <init>(java.lang.String, int, avrora.sim.AtmelInterpreter, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i6, $i8;
        avrora.sim.AtmelInterpreter r2;
        avrora.arch.legacy.LegacyDisassembler $r3;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $r4, $r9;
        avrora.sim.clock.MainClock $r5, $r10, $r11;
        avrora.sim.Simulator $r6, $r12;
        avrora.sim.mcu.Microcontroller $r7;
        avrora.sim.mcu.MCUProperties r8;
        long $l5, $l7;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        avrora.sim.output.SimPrinter $r13;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: avrora.sim.AtmelInterpreter;

        i1 := @parameter3: int;

        specialinvoke r0.<avrora.sim.CodeSegment: void <init>(java.lang.String,int,avrora.sim.AtmelInterpreter)>(r1, i0, r2);

        $r3 = new avrora.arch.legacy.LegacyDisassembler;

        specialinvoke $r3.<avrora.arch.legacy.LegacyDisassembler: void <init>()>();

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.arch.legacy.LegacyDisassembler disassembler> = $r3;

        $r4 = new avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        specialinvoke $r4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,avrora.sim.mcu.ReprogrammableCodeSegment$1)>(r0, null);

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR> = $r4;

        $r5 = virtualinvoke r2.<avrora.sim.AtmelInterpreter: avrora.sim.clock.MainClock getMainClock()>();

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock> = $r5;

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize> = i1;

        $i2 = i1 + 1;

        $i3 = staticinvoke <cck.util.Arithmetic: int getBitRangeMask(int,int)>(1, $i2);

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int addressMask> = $i3;

        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        $r6 = virtualinvoke r2.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator getSimulator()>();

        $r7 = virtualinvoke $r6.<avrora.sim.Simulator: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        r8 = interfaceinvoke $r7.<avrora.sim.mcu.Microcontroller: avrora.sim.mcu.MCUProperties getProperties()>();

        $i4 = virtualinvoke r8.<avrora.sim.mcu.MCUProperties: int getIOReg(java.lang.String)>("SPMCSR");

        $r9 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke r2.<avrora.sim.AtmelInterpreter: void installIOReg(int,avrora.sim.ActiveRegister)>($i4, $r9);

        $r10 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $l5 = virtualinvoke $r10.<avrora.sim.clock.MainClock: long getHZ()>();

        $d0 = (double) $l5;

        $d1 = $d0 * 4.5;

        $d2 = $d1 / 1000.0;

        $i6 = (int) $d2;

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int ERASE_CYCLES> = $i6;

        $r11 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $l7 = virtualinvoke $r11.<avrora.sim.clock.MainClock: long getHZ()>();

        $d3 = (double) $l7;

        $d4 = $d3 * 4.5;

        $d5 = $d4 / 1000.0;

        $i8 = (int) $d5;

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int WRITE_CYCLES> = $i8;

        $r12 = virtualinvoke r2.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator getSimulator()>();

        $r13 = virtualinvoke $r12.<avrora.sim.Simulator: avrora.sim.output.SimPrinter getPrinter(java.lang.String)>("atmel.flash");

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter> = $r13;

        return;
    }

    public void update()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.arch.legacy.LegacyRegister $r1;
        avrora.sim.AtmelInterpreter $r2, $r3, $r30, $r31;
        int i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i9, $i10, $i11, $i12, i13;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $r4, $r8;
        avrora.sim.output.SimPrinter $r5, $r6, $r7, $r11, $r12, $r14, $r18, $r20, $r24, $r26;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $r9;
        avrora.sim.clock.MainClock $r10;
        java.lang.StringBuilder $r13, $r15, $r16, $r19, $r21, $r22, $r25, $r27, $r28;
        java.lang.String $r17, $r23, $r29;
        byte $b8;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $r2 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $r1 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister Z>;

        i0 = virtualinvoke $r2.<avrora.sim.AtmelInterpreter: int getRegisterWord(avrora.arch.legacy.LegacyRegister)>($r1);

        $i1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int addressMask>;

        i2 = i0 & $i1;

        $i3 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $i4 = $i3 + 1;

        i13 = i0 >> $i4;

        $r3 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $i5 = $r3.<avrora.sim.AtmelInterpreter: int RAMPZ>;

        if $i5 <= 0 goto label01;

        $r31 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $r30 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $i7 = $r30.<avrora.sim.AtmelInterpreter: int RAMPZ>;

        $b8 = virtualinvoke $r31.<avrora.sim.AtmelInterpreter: byte getIORegisterByte(int)>($i7);

        $i9 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $i10 = 16 - $i9;

        $i11 = $i10 - 1;

        $i12 = $b8 << $i11;

        i13 = i13 + $i12;

     label01:
        $r4 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        i6 = virtualinvoke $r4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: int getState()>();

        lookupswitch(i6)
        {
            case 1: goto label08;
            case 3: goto label02;
            case 5: goto label10;
            case 9: goto label06;
            case 17: goto label04;
            default: goto label12;
        };

     label02:
        $r18 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $r18 == null goto label03;

        $r20 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: page erase of page ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($r23);

     label03:
        specialinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void pageErase(int,int)>(i13, i2);

        goto label12;

     label04:
        $r5 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $r5 == null goto label05;

        $r6 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        virtualinvoke $r6.<avrora.sim.output.SimPrinter: void println(java.lang.String)>("FLASH: reset RWW section ");

     label05:
        specialinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetRWW()>();

        goto label12;

     label06:
        $r7 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $r7 == null goto label07;

        $r11 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        virtualinvoke $r11.<avrora.sim.output.SimPrinter: void println(java.lang.String)>("FLASH: boot lock bits set");

     label07:
        $r10 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r8 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $r9 = $r8.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $r10.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($r9);

        goto label12;

     label08:
        $r24 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $r24 == null goto label09;

        $r26 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: fill buffer @ ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($r29);

     label09:
        specialinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void fillBuffer(int,int)>(i13, i2);

        goto label12;

     label10:
        $r12 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $r12 == null goto label11;

        $r14 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: page write to page ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($r17);

     label11:
        specialinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void pageWrite(int,int)>(i13, i2);

        goto label12;

     label12:
        return;
    }

    private void pageErase(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $r1, $r4;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $r2;
        avrora.sim.clock.MainClock $r3, $r6;
        int i0, $i1, i3;
        long $l2;
        avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent $r7;
        avrora.sim.Simulator$Event $r8;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $r3 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $r2 = $r1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $r3.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($r2);

        $r4 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $r4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void setBusy()>();

        $r6 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r7 = new avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent;

        specialinvoke $r7.<avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,int)>(r0, i0);

        $i1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int ERASE_CYCLES>;

        $l2 = (long) $i1;

        $r8 = (avrora.sim.Simulator$Event) $r7;

        virtualinvoke $r6.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($r8, $l2);

        return;
    }

    private void pageWrite(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $r1, $r4;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $r2;
        avrora.sim.clock.MainClock $r3, $r7;
        int i0, $i1, i3;
        byte[] $r6;
        long $l2;
        avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent $r8;
        avrora.sim.Simulator$Event $r9;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $r3 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $r2 = $r1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $r3.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($r2);

        $r4 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $r4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void setBusy()>();

        $r7 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r8 = new avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent;

        $r6 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        specialinvoke $r8.<avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,int,byte[])>(r0, i0, $r6);

        $i1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int WRITE_CYCLES>;

        $l2 = (long) $i1;

        $r9 = (avrora.sim.Simulator$Event) $r8;

        virtualinvoke $r7.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($r9, $l2);

        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        return;
    }

    private void resetRWW()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $r1, $r4, $r5, $r6;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $r2;
        avrora.sim.clock.MainClock $r3;
        boolean $z0;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $r3 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $r2 = $r1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $r3.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($r2);

        $r4 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $z0 = virtualinvoke $r4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: boolean isBusy()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $r5.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void clearBusy()>();

        $r6 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $r6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void reset()>();

     label1:
        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        return;
    }

    private void fillBuffer(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.arch.legacy.LegacyRegister $r1, $r3;
        avrora.sim.AtmelInterpreter $r2, $r4;
        byte b0, b1;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $r5, $r8;
        int i2, $i3, i4;
        byte[] $r6, $r7;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $r9;
        avrora.sim.clock.MainClock $r10;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        i4 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $r1 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister R0>;

        b0 = virtualinvoke $r2.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($r1);

        $r4 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $r3 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister R1>;

        b1 = virtualinvoke $r4.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($r3);

        $r5 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $r5.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void reset()>();

        $r6 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $r6[i2] = b0;

        $r7 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $i3 = i2 + 1;

        $r7[$i3] = b1;

        $r10 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $r8 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $r9 = $r8.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $r10.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($r9);

        return;
    }

    protected void resetBuffer()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int $i0, $i1, i2;
        byte[] $r1, $r2, $r3;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $i0 = specialinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int bufferSize()>();

        $r1 = newarray (byte)[$i0];

        r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer> = $r1;

        i2 = 0;

     label1:
        $r2 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $r3[i2] = -1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private int bufferSize()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int $i0, $i1;

        r0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $i0 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $i1 = 2 << $i0;

        return $i1;
    }

    static avrora.sim.AtmelInterpreter access$000(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.sim.AtmelInterpreter $r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        return $r1;
    }

    static avrora.sim.AtmelInterpreter access$100(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        avrora.sim.AtmelInterpreter $r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        return $r1;
    }

    static int access$300(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int $i0;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $i0 = specialinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: int bufferSize()>();

        return $i0;
    }

    static void access$400(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int i0;
        avrora.arch.legacy.LegacyInstr r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        i0 := @parameter1: int;

        r1 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(i0, r1);

        return;
    }

    static void access$500(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int i0;
        avrora.arch.legacy.LegacyInstr r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        i0 := @parameter1: int;

        r1 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(i0, r1);

        return;
    }

    static byte[] access$600(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        byte[] $r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] segment_data>;

        return $r1;
    }

    static void access$700(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int i0;
        avrora.arch.legacy.LegacyInstr r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        i0 := @parameter1: int;

        r1 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(i0, r1);

        return;
    }

    static byte[] access$800(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        byte[] $r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $r1 = r0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] segment_data>;

        return $r1;
    }

    static void access$900(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment r0;
        int i0;
        avrora.arch.legacy.LegacyInstr r1;

        r0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        i0 := @parameter1: int;

        r1 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke r0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(i0, r1);

        return;
    }

    public static void <clinit>()
    {
        <avrora.sim.mcu.ReprogrammableCodeSegment: byte DEFAULT_VALUE> = -1;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPMCSR_LOWERBITS> = 31;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPM_READY> = 35;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_PGWRITE> = 5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_FILL> = 1;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_BLBSET> = 9;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_RWWSRE> = 17;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_PGERASE> = 3;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_NONE> = 0;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPM_TIMEOUT> = 4;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double WRITE_MS_MAX> = 4.5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double ERASE_MS_MAX> = 4.5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double WRITE_MS_MIN> = 3.7;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double ERASE_MS_MIN> = 3.7;

        return;
    }
}
