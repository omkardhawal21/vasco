public class avrora.sim.Simulation$Node extends java.lang.Object
{
    public final int id;
    protected final avrora.core.LoadableProgram path;
    protected final avrora.sim.platform.PlatformFactory platformFactory;
    protected final java.util.LinkedList monitors;
    protected avrora.sim.platform.Platform platform;
    protected avrora.sim.Simulator simulator;
    protected avrora.sim.SimulatorThread thread;
    final avrora.sim.Simulation this$0;

    protected void <init>(avrora.sim.Simulation, int, avrora.sim.platform.PlatformFactory, avrora.core.LoadableProgram)
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation r1;
        int i0;
        avrora.sim.platform.PlatformFactory r2;
        avrora.core.LoadableProgram r3;
        java.util.LinkedList $r4;

        r0 := @this: avrora.sim.Simulation$Node;

        r1 := @parameter0: avrora.sim.Simulation;

        i0 := @parameter1: int;

        r2 := @parameter2: avrora.sim.platform.PlatformFactory;

        r3 := @parameter3: avrora.core.LoadableProgram;

        r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<avrora.sim.Simulation$Node: int id> = i0;

        r0.<avrora.sim.Simulation$Node: avrora.sim.platform.PlatformFactory platformFactory> = r2;

        r0.<avrora.sim.Simulation$Node: avrora.core.LoadableProgram path> = r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors> = $r4;

        return;
    }

    protected void instantiate()
    {
        avrora.sim.Simulation$Node r0;
        avrora.core.LoadableProgram $r1;
        avrora.sim.platform.PlatformFactory $r2;
        int $i0;
        avrora.sim.Simulation $r3, $r9;
        avrora.core.Program $r4;
        avrora.sim.platform.Platform $r5, $r6;
        avrora.sim.mcu.Microcontroller $r7;
        avrora.sim.Simulator $r8;
        avrora.sim.clock.Synchronizer $r10;

        r0 := @this: avrora.sim.Simulation$Node;

        $r2 = r0.<avrora.sim.Simulation$Node: avrora.sim.platform.PlatformFactory platformFactory>;

        $i0 = r0.<avrora.sim.Simulation$Node: int id>;

        $r3 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.core.LoadableProgram path>;

        $r4 = virtualinvoke $r1.<avrora.core.LoadableProgram: avrora.core.Program getProgram()>();

        $r5 = interfaceinvoke $r2.<avrora.sim.platform.PlatformFactory: avrora.sim.platform.Platform newPlatform(int,avrora.sim.Simulation,avrora.core.Program)>($i0, $r3, $r4);

        r0.<avrora.sim.Simulation$Node: avrora.sim.platform.Platform platform> = $r5;

        $r6 = r0.<avrora.sim.Simulation$Node: avrora.sim.platform.Platform platform>;

        $r7 = virtualinvoke $r6.<avrora.sim.platform.Platform: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        $r8 = interfaceinvoke $r7.<avrora.sim.mcu.Microcontroller: avrora.sim.Simulator getSimulator()>();

        r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator> = $r8;

        specialinvoke r0.<avrora.sim.Simulation$Node: void processTimeout()>();

        specialinvoke r0.<avrora.sim.Simulation$Node: void processInterruptSched()>();

        specialinvoke r0.<avrora.sim.Simulation$Node: void processEepromLoad()>();

        $r9 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r10 = $r9.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $r10.<avrora.sim.clock.Synchronizer: void addNode(avrora.sim.Simulation$Node)>(r0);

        return;
    }

    protected void addMonitors()
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation $r1, $r7;
        java.util.LinkedList $r2, $r4, $r10;
        java.util.Iterator r3, r13;
        boolean $z0, $z1, $z2;
        avrora.sim.Simulation$Monitor r5;
        avrora.sim.Simulator $r6, $r9;
        java.lang.Object $r8, r14;
        avrora.monitors.MonitorFactory r11;
        avrora.monitors.Monitor r12;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r2 = $r1.<avrora.sim.Simulation: java.util.LinkedList monitorFactoryList>;

        r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (avrora.monitors.MonitorFactory) $r8;

        $r9 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        r12 = virtualinvoke r11.<avrora.monitors.MonitorFactory: avrora.monitors.Monitor newMonitor(avrora.sim.Simulator)>($r9);

        if r12 == null goto label2;

        $r10 = r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        virtualinvoke $r10.<java.util.LinkedList: boolean add(java.lang.Object)>(r12);

     label2:
        goto label1;

     label3:
        $r4 = r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        r13 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $z2 = r14 instanceof avrora.sim.Simulation$Monitor;

        if $z2 == 0 goto label5;

        r5 = (avrora.sim.Simulation$Monitor) r14;

        $r7 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r6 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        interfaceinvoke r5.<avrora.sim.Simulation$Monitor: void construct(avrora.sim.Simulation,avrora.sim.Simulation$Node,avrora.sim.Simulator)>($r7, r0, $r6);

     label5:
        goto label4;

     label6:
        return;
    }

    private void processTimeout()
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation $r1;
        cck.util.Option$Double $r2;
        double d0, $d1, $d2;
        byte $b0;
        avrora.sim.Simulator $r3, $r6, $r7;
        avrora.sim.clock.MainClock $r4;
        long $l1, l2;
        avrora.sim.util.ClockCycleTimeout $r5;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r2 = $r1.<avrora.sim.Simulation: cck.util.Option$Double SECONDS>;

        d0 = virtualinvoke $r2.<cck.util.Option$Double: double get()>();

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $r3 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        $r4 = virtualinvoke $r3.<avrora.sim.Simulator: avrora.sim.clock.MainClock getClock()>();

        $l1 = virtualinvoke $r4.<avrora.sim.clock.MainClock: long getHZ()>();

        $d1 = (double) $l1;

        $d2 = d0 * $d1;

        l2 = (long) $d2;

        $r7 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        $r5 = new avrora.sim.util.ClockCycleTimeout;

        $r6 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        specialinvoke $r5.<avrora.sim.util.ClockCycleTimeout: void <init>(avrora.sim.Simulator,long)>($r6, l2);

        virtualinvoke $r7.<avrora.sim.Simulator: void insertEvent(avrora.sim.Simulator$Event,long)>($r5, l2);

     label1:
        return;
    }

    private void processInterruptSched()
    {
        avrora.sim.Simulation$Node r0;
        int $i0;
        avrora.sim.Simulation $r1, $r4;
        cck.util.Option$Str $r2, $r5;
        boolean $z0;
        avrora.sim.util.InterruptScheduler $r3;
        java.lang.String $r6;
        avrora.sim.Simulator $r7;

        r0 := @this: avrora.sim.Simulation$Node;

        $i0 = r0.<avrora.sim.Simulation$Node: int id>;

        if $i0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r2 = $r1.<avrora.sim.Simulation: cck.util.Option$Str SCHEDULE>;

        $z0 = virtualinvoke $r2.<cck.util.Option$Str: boolean isBlank()>();

        if $z0 != 0 goto label2;

        $r3 = new avrora.sim.util.InterruptScheduler;

        $r4 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r5 = $r4.<avrora.sim.Simulation: cck.util.Option$Str SCHEDULE>;

        $r6 = virtualinvoke $r5.<cck.util.Option$Str: java.lang.String get()>();

        $r7 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        specialinvoke $r3.<avrora.sim.util.InterruptScheduler: void <init>(java.lang.String,avrora.sim.Simulator)>($r6, $r7);

     label2:
        return;
    }

    private void processEepromLoad()
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation $r1, $r9, $r14;
        cck.util.Option$Str $r2, $r10, $r15;
        boolean $z0;
        avrora.sim.platform.Platform $r3;
        avrora.sim.mcu.Microcontroller $r4;
        avrora.sim.mcu.AtmelMicrocontroller r5;
        avrora.sim.mcu.AtmelInternalDevice $r6;
        avrora.sim.mcu.EEPROM r7;
        java.io.FileInputStream $r8;
        java.lang.String $r11, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        byte[] r13;
        java.io.IOException $r17;
        cck.util.Util$Unexpected $r18;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r2 = $r1.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE>;

        $z0 = virtualinvoke $r2.<cck.util.Option$Str: boolean isBlank()>();

        if $z0 != 0 goto label8;

        $r3 = r0.<avrora.sim.Simulation$Node: avrora.sim.platform.Platform platform>;

        $r4 = virtualinvoke $r3.<avrora.sim.platform.Platform: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        r5 = (avrora.sim.mcu.AtmelMicrocontroller) $r4;

        $r6 = virtualinvoke r5.<avrora.sim.mcu.AtmelMicrocontroller: avrora.sim.mcu.AtmelInternalDevice getDevice(java.lang.String)>("eeprom");

        r7 = (avrora.sim.mcu.EEPROM) $r6;

     label1:
        $r8 = new java.io.FileInputStream;

        $r9 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r10 = $r9.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE>;

        $r11 = virtualinvoke $r10.<cck.util.Option$Str: java.lang.String get()>();

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.lang.String)>($r11);

        $i0 = virtualinvoke $r8.<java.io.FileInputStream: int available()>();

        $i1 = virtualinvoke r7.<avrora.sim.mcu.EEPROM: int getSize()>();

        if $i0 <= $i1 goto label2;

        virtualinvoke $r8.<java.io.FileInputStream: void close()>();

        $r14 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r15 = $r14.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE>;

        $r16 = virtualinvoke $r15.<cck.util.Option$Str: java.lang.String get()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("EEPROM image too large", $r16);

     label2:
        $i2 = virtualinvoke $r8.<java.io.FileInputStream: int available()>();

        r13 = newarray (byte)[$i2];

        i6 = 0;

     label3:
        $i7 = lengthof r13;

        if i6 >= $i7 goto label4;

        $i3 = lengthof r13;

        $i4 = $i3 - i6;

        $i5 = virtualinvoke $r8.<java.io.FileInputStream: int read(byte[],int,int)>(r13, i6, $i4);

        i6 = i6 + $i5;

        goto label3;

     label4:
        virtualinvoke $r8.<java.io.FileInputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;

        $r18 = staticinvoke <cck.util.Util: cck.util.Util$Unexpected unexpected(java.lang.Throwable)>($r17);

        throw $r18;

     label7:
        virtualinvoke r7.<avrora.sim.mcu.EEPROM: void setContent(byte[])>(r13);

     label8:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    public avrora.sim.Simulator getSimulator()
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulator $r1;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        return $r1;
    }

    public avrora.sim.Simulation getSimulation()
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation $r1;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        return $r1;
    }

    public void addMonitor(avrora.sim.Simulation$Monitor)
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation$Monitor r1;
        java.util.LinkedList $r2;

        r0 := @this: avrora.sim.Simulation$Node;

        r1 := @parameter0: avrora.sim.Simulation$Monitor;

        $r2 = r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeMonitor(avrora.sim.Simulation$Monitor)
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.Simulation$Monitor r1;
        java.util.LinkedList $r2;

        r0 := @this: avrora.sim.Simulation$Node;

        r1 := @parameter0: avrora.sim.Simulation$Monitor;

        $r2 = r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getMonitors()
    {
        avrora.sim.Simulation$Node r0;
        java.util.LinkedList $r1;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        return $r1;
    }

    public avrora.core.LoadableProgram getProgram()
    {
        avrora.sim.Simulation$Node r0;
        avrora.core.LoadableProgram $r1;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.core.LoadableProgram path>;

        return $r1;
    }

    protected void remove()
    {
        avrora.sim.Simulation$Node r0;
        java.util.LinkedList $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        avrora.sim.Simulation$Monitor r4;
        avrora.sim.Simulator $r5;
        avrora.sim.Simulation $r6;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (avrora.sim.Simulation$Monitor) $r3;

        $r6 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $r5 = r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        interfaceinvoke r4.<avrora.sim.Simulation$Monitor: void destruct(avrora.sim.Simulation,avrora.sim.Simulation$Node,avrora.sim.Simulator)>($r6, r0, $r5);

        goto label1;

     label2:
        return;
    }

    public avrora.sim.SimulatorThread getThread()
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.SimulatorThread $r1;

        r0 := @this: avrora.sim.Simulation$Node;

        $r1 = r0.<avrora.sim.Simulation$Node: avrora.sim.SimulatorThread thread>;

        return $r1;
    }
}
