public class avrora.sim.clock.RippleSynchronizer extends avrora.sim.clock.Synchronizer
{
    protected long notifyPeriod;
    protected final java.util.HashMap threadMap;
    protected final avrora.sim.Simulator$Event action;
    protected int goal;
    protected long wallTime;
    protected int meet_count;
    protected int wait_count;
    protected avrora.sim.clock.RippleSynchronizer$WaitLink waitListHead;
    static final boolean $assertionsDisabled;

    public void <init>(long, avrora.sim.Simulator$Event)
    {
        avrora.sim.clock.RippleSynchronizer r0;
        long l0;
        avrora.sim.Simulator$Event r1;
        java.util.HashMap $r2;
        avrora.sim.clock.RippleSynchronizer$WaitLink $r3, $r5;
        int $i1;

        r0 := @this: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter0: long;

        r1 := @parameter1: avrora.sim.Simulator$Event;

        specialinvoke r0.<avrora.sim.clock.Synchronizer: void <init>()>();

        r0.<avrora.sim.clock.RippleSynchronizer: long notifyPeriod> = l0;

        r0.<avrora.sim.clock.RippleSynchronizer: avrora.sim.Simulator$Event action> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap> = $r2;

        $r3 = new avrora.sim.clock.RippleSynchronizer$WaitLink;

        specialinvoke $r3.<avrora.sim.clock.RippleSynchronizer$WaitLink: void <init>(long)>(9223372036854775807L);

        $r5 = new avrora.sim.clock.RippleSynchronizer$WaitLink;

        specialinvoke $r5.<avrora.sim.clock.RippleSynchronizer$WaitLink: void <init>(long)>(-1L);

        $i1 = r0.<avrora.sim.clock.RippleSynchronizer: int goal>;

        $r5.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed> = $i1;

        $r5.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next> = $r3;

        r0.<avrora.sim.clock.RippleSynchronizer: avrora.sim.clock.RippleSynchronizer$WaitLink waitListHead> = $r5;

        return;
    }

    private avrora.sim.clock.RippleSynchronizer$WaitLink advance(long, avrora.sim.clock.RippleSynchronizer$WaitLink)
    {
        boolean $z0, $z1, $z2;
        long l0, $l1, $l3, $l5, $l8;
        byte $b2, $b4, $b6, $b9;
        avrora.sim.clock.RippleSynchronizer r0;
        avrora.sim.clock.RippleSynchronizer$WaitLink $r1, $r3, r7, r8, r9;
        int $i7;
        java.lang.AssertionError $r4, $r5, $r6;

        r0 := @this: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter0: long;

        r7 := @parameter1: avrora.sim.clock.RippleSynchronizer$WaitLink;

        $z0 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l8 = r7.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b9 = l0 cmp $l8;

        if $b9 >= 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $l1 = r7.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label2;

        return r7;

     label2:
        r8 = r7;

        r9 = r7.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next>;

     label3:
        $z1 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if r9 != null goto label4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        $l3 = r9.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label6;

        $r1 = new avrora.sim.clock.RippleSynchronizer$WaitLink;

        specialinvoke $r1.<avrora.sim.clock.RippleSynchronizer$WaitLink: void <init>(long)>(l0);

        $i7 = r9.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed>;

        $r1.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed> = $i7;

        $r1.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next> = r9;

        $z2 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $r3 = r8.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next>;

        if $r3 == r9 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        r8.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next> = $r1;

        specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: void notifyLink(avrora.sim.clock.RippleSynchronizer$WaitLink)>($r1);

        return $r1;

     label6:
        $l5 = r9.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b6 = l0 cmp $l5;

        if $b6 != 0 goto label7;

        specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: void notifyLink(avrora.sim.clock.RippleSynchronizer$WaitLink)>(r9);

        return r9;

     label7:
        specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: void notifyLink(avrora.sim.clock.RippleSynchronizer$WaitLink)>(r9);

        r8 = r9;

        r9 = r9.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next>;

        goto label3;
    }

    private void waitFor(long, avrora.sim.clock.RippleSynchronizer$WaitLink) throws java.lang.InterruptedException
    {
        long l0, $l1, $l3, $l5;
        byte $b2, $b4, $b6;
        boolean $z0;
        avrora.sim.clock.RippleSynchronizer r0;
        avrora.sim.clock.RippleSynchronizer$WaitLink r1, r3, r4, r5;
        java.lang.AssertionError $r2;

        r0 := @this: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter0: long;

        r3 := @parameter1: avrora.sim.clock.RippleSynchronizer$WaitLink;

        $l1 = r3.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b2 = l0 cmp $l1;

        if $b2 > 0 goto label1;

        specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: void waitForLink(avrora.sim.clock.RippleSynchronizer$WaitLink)>(r3);

        return;

     label1:
        r4 = r3;

        r5 = r3.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next>;

     label2:
        $z0 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if r5 != null goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $l3 = r5.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label4;

        r1 = specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: avrora.sim.clock.RippleSynchronizer$WaitLink insertLink(long,avrora.sim.clock.RippleSynchronizer$WaitLink,avrora.sim.clock.RippleSynchronizer$WaitLink)>(l0, r4, r5);

        specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: void waitForLink(avrora.sim.clock.RippleSynchronizer$WaitLink)>(r1);

        return;

     label4:
        $l5 = r5.<avrora.sim.clock.RippleSynchronizer$WaitLink: long time>;

        $b6 = l0 cmp $l5;

        if $b6 != 0 goto label5;

        specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: void waitForLink(avrora.sim.clock.RippleSynchronizer$WaitLink)>(r5);

        return;

     label5:
        r4 = r5;

        r5 = r5.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next>;

        goto label2;
    }

    private void waitForLink(avrora.sim.clock.RippleSynchronizer$WaitLink) throws java.lang.InterruptedException
    {
        boolean $z0;
        avrora.sim.clock.RippleSynchronizer$WaitLink r0;
        avrora.sim.clock.RippleSynchronizer r1;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r2;

        r1 := @this: avrora.sim.clock.RippleSynchronizer;

        r0 := @parameter0: avrora.sim.clock.RippleSynchronizer$WaitLink;

        $z0 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed>;

        if $i0 >= 1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i1 = r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed>;

        $i2 = r1.<avrora.sim.clock.RippleSynchronizer: int goal>;

        if $i1 >= $i2 goto label2;

        virtualinvoke r1.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        return;
    }

    private avrora.sim.clock.RippleSynchronizer$WaitLink insertLink(long, avrora.sim.clock.RippleSynchronizer$WaitLink, avrora.sim.clock.RippleSynchronizer$WaitLink)
    {
        avrora.sim.clock.RippleSynchronizer$WaitLink $r0, r2, r3, $r4;
        long l0;
        int $i1;
        boolean $z0, $z1;
        java.lang.AssertionError $r5, $r6;
        avrora.sim.clock.RippleSynchronizer r7;

        r7 := @this: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter0: long;

        r3 := @parameter1: avrora.sim.clock.RippleSynchronizer$WaitLink;

        r2 := @parameter2: avrora.sim.clock.RippleSynchronizer$WaitLink;

        $r0 = new avrora.sim.clock.RippleSynchronizer$WaitLink;

        specialinvoke $r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: void <init>(long)>(l0);

        $i1 = r2.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed>;

        $r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed> = $i1;

        $r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next> = r2;

        $z0 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r3 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r3.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next>;

        if $r4 == r2 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        r3.<avrora.sim.clock.RippleSynchronizer$WaitLink: avrora.sim.clock.RippleSynchronizer$WaitLink next> = $r0;

        return $r0;
    }

    private void notifyLink(avrora.sim.clock.RippleSynchronizer$WaitLink)
    {
        avrora.sim.clock.RippleSynchronizer$WaitLink r0;
        int $i0, $i1, $i2;
        avrora.sim.clock.RippleSynchronizer r1;

        r1 := @this: avrora.sim.clock.RippleSynchronizer;

        r0 := @parameter0: avrora.sim.clock.RippleSynchronizer$WaitLink;

        $i0 = r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed>;

        $i1 = $i0 + 1;

        r0.<avrora.sim.clock.RippleSynchronizer$WaitLink: int numPassed> = $i1;

        $i2 = r1.<avrora.sim.clock.RippleSynchronizer: int goal>;

        if $i1 < $i2 goto label1;

        virtualinvoke r1.<java.lang.Object: void notifyAll()>();

        r1.<avrora.sim.clock.RippleSynchronizer: avrora.sim.clock.RippleSynchronizer$WaitLink waitListHead> = r0;

     label1:
        return;
    }

    public synchronized void start()
    {
        avrora.sim.clock.RippleSynchronizer r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        avrora.sim.SimulatorThread r5;

        r0 := @this: avrora.sim.clock.RippleSynchronizer;

        $r1 = r0.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (avrora.sim.SimulatorThread) $r4;

        virtualinvoke r5.<avrora.sim.SimulatorThread: void start()>();

        goto label1;

     label2:
        return;
    }

    public void join() throws java.lang.InterruptedException
    {
        avrora.sim.clock.RippleSynchronizer r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        avrora.sim.SimulatorThread r5;

        r0 := @this: avrora.sim.clock.RippleSynchronizer;

        $r1 = r0.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (avrora.sim.SimulatorThread) $r4;

        virtualinvoke r5.<avrora.sim.SimulatorThread: void join()>();

        goto label1;

     label2:
        return;
    }

    public synchronized void stop()
    {
        avrora.sim.clock.RippleSynchronizer r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        avrora.sim.SimulatorThread r5;
        avrora.sim.Simulator $r6;

        r0 := @this: avrora.sim.clock.RippleSynchronizer;

        $r1 = r0.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (avrora.sim.SimulatorThread) $r4;

        $r6 = virtualinvoke r5.<avrora.sim.SimulatorThread: avrora.sim.Simulator getSimulator()>();

        virtualinvoke $r6.<avrora.sim.Simulator: void stop()>();

        goto label1;

     label2:
        return;
    }

    public synchronized void pause()
    {
        cck.util.Util$InternalError $r0;
        avrora.sim.clock.RippleSynchronizer r1;

        r1 := @this: avrora.sim.clock.RippleSynchronizer;

        $r0 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unimplemented()>();

        throw $r0;
    }

    public synchronized void synch(long)
    {
        cck.util.Util$InternalError $r0;
        avrora.sim.clock.RippleSynchronizer r1;
        long l0;

        r1 := @this: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter0: long;

        $r0 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unimplemented()>();

        throw $r0;
    }

    public synchronized void addNode(avrora.sim.Simulation$Node)
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.SimulatorThread r1;
        avrora.sim.clock.RippleSynchronizer r2;
        java.util.HashMap $r3, $r6;
        boolean $z0;
        avrora.sim.clock.RippleSynchronizer$NotifyEvent $r4;
        long $l0;
        avrora.sim.clock.MainClock $r8;
        int $i1, $i2;

        r2 := @this: avrora.sim.clock.RippleSynchronizer;

        r0 := @parameter0: avrora.sim.Simulation$Node;

        r1 = virtualinvoke r0.<avrora.sim.Simulation$Node: avrora.sim.SimulatorThread getThread()>();

        $r3 = r2.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<avrora.sim.SimulatorThread: void setSynchronizer(avrora.sim.clock.Synchronizer)>(r2);

        $r4 = new avrora.sim.clock.RippleSynchronizer$NotifyEvent;

        specialinvoke $r4.<avrora.sim.clock.RippleSynchronizer$NotifyEvent: void <init>(avrora.sim.clock.RippleSynchronizer,avrora.sim.SimulatorThread)>(r2, r1);

        $r6 = r2.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        $r8 = $r4.<avrora.sim.clock.RippleSynchronizer$NotifyEvent: avrora.sim.clock.MainClock clock>;

        $l0 = r2.<avrora.sim.clock.RippleSynchronizer: long notifyPeriod>;

        virtualinvoke $r8.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($r4, $l0);

        $i1 = r2.<avrora.sim.clock.RippleSynchronizer: int goal>;

        $i2 = $i1 + 1;

        r2.<avrora.sim.clock.RippleSynchronizer: int goal> = $i2;

        return;
    }

    public synchronized void removeNode(avrora.sim.Simulation$Node)
    {
        avrora.sim.Simulation$Node r0;
        avrora.sim.SimulatorThread r1;
        avrora.sim.clock.RippleSynchronizer r2;
        java.util.HashMap $r3;
        boolean $z0;
        avrora.sim.Simulator $r4;
        avrora.sim.clock.MainClock $r5;
        long $l0;
        int $i1, $i2;
        java.lang.Throwable $r8;

        r2 := @this: avrora.sim.clock.RippleSynchronizer;

        r0 := @parameter0: avrora.sim.Simulation$Node;

        r1 = virtualinvoke r0.<avrora.sim.Simulation$Node: avrora.sim.SimulatorThread getThread()>();

        $r3 = r2.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke r0.<avrora.sim.Simulation$Node: avrora.sim.Simulator getSimulator()>();

        $r5 = virtualinvoke $r4.<avrora.sim.Simulator: avrora.sim.clock.MainClock getClock()>();

        $l0 = virtualinvoke $r5.<avrora.sim.clock.MainClock: long getCount()>();

        virtualinvoke r2.<avrora.sim.clock.RippleSynchronizer: void waitForNeighbors(long)>($l0);

        entermonitor r2;

     label1:
        $i1 = r2.<avrora.sim.clock.RippleSynchronizer: int goal>;

        $i2 = $i1 - 1;

        r2.<avrora.sim.clock.RippleSynchronizer: int goal> = $i2;

        virtualinvoke r2.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor r2;

     label4:
        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void waitForNeighbors(long)
    {
        java.lang.Thread $r0;
        avrora.sim.SimulatorThread r1;
        avrora.sim.clock.RippleSynchronizer r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        avrora.sim.clock.RippleSynchronizer$NotifyEvent r5;
        avrora.sim.Simulator $r6;
        avrora.sim.clock.MainClock $r7;
        boolean $z0;
        avrora.sim.clock.RippleSynchronizer$WaitLink r10, $r11;
        long l0, l2;
        byte $b1;
        java.lang.AssertionError $r12;
        java.lang.InterruptedException $r13;
        cck.util.Util$InternalError $r14;
        java.lang.Throwable $r15;

        r2 := @this: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = (avrora.sim.SimulatorThread) $r0;

        $r3 = r2.<avrora.sim.clock.RippleSynchronizer: java.util.HashMap threadMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (avrora.sim.clock.RippleSynchronizer$NotifyEvent) $r4;

     label1:
        $r6 = virtualinvoke r1.<avrora.sim.SimulatorThread: avrora.sim.Simulator getSimulator()>();

        $r7 = virtualinvoke $r6.<avrora.sim.Simulator: avrora.sim.clock.MainClock getClock()>();

        l2 = virtualinvoke $r7.<avrora.sim.clock.MainClock: long getCount()>();

        $z0 = <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b1 = l0 cmp l2;

        if $b1 <= 0 goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        entermonitor r2;

     label3:
        r10 = staticinvoke <avrora.sim.clock.RippleSynchronizer$NotifyEvent: avrora.sim.clock.RippleSynchronizer$WaitLink access$100(avrora.sim.clock.RippleSynchronizer$NotifyEvent)>(r5);

        $r11 = specialinvoke r2.<avrora.sim.clock.RippleSynchronizer: avrora.sim.clock.RippleSynchronizer$WaitLink advance(long,avrora.sim.clock.RippleSynchronizer$WaitLink)>(l2, r10);

        r5.<avrora.sim.clock.RippleSynchronizer$NotifyEvent: avrora.sim.clock.RippleSynchronizer$WaitLink lastLink> = $r11;

        specialinvoke r2.<avrora.sim.clock.RippleSynchronizer: void waitFor(long,avrora.sim.clock.RippleSynchronizer$WaitLink)>(l0, r10);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        exitmonitor r2;

     label6:
        throw $r15;

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unimplemented()>();

        throw $r14;

     label9:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.InterruptedException from label1 to label7 with label8;
    }

    static avrora.sim.clock.RippleSynchronizer$WaitLink access$000(avrora.sim.clock.RippleSynchronizer, long, avrora.sim.clock.RippleSynchronizer$WaitLink)
    {
        avrora.sim.clock.RippleSynchronizer r0;
        long l0;
        avrora.sim.clock.RippleSynchronizer$WaitLink r1, $r2;

        r0 := @parameter0: avrora.sim.clock.RippleSynchronizer;

        l0 := @parameter1: long;

        r1 := @parameter2: avrora.sim.clock.RippleSynchronizer$WaitLink;

        $r2 = specialinvoke r0.<avrora.sim.clock.RippleSynchronizer: avrora.sim.clock.RippleSynchronizer$WaitLink advance(long,avrora.sim.clock.RippleSynchronizer$WaitLink)>(l0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lavrora/sim/clock/RippleSynchronizer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <avrora.sim.clock.RippleSynchronizer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
