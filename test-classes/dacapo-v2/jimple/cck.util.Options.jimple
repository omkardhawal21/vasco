public class cck.util.Options extends java.lang.Object
{
    protected final java.util.HashMap knownValues;
    protected java.lang.String[] arguments;

    public void <init>()
    {
        cck.util.Options r0;
        java.util.HashMap $r1;

        r0 := @this: cck.util.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<cck.util.Options: java.util.HashMap knownValues> = $r1;

        return;
    }

    public cck.util.Option$Bool newOption(java.lang.String, boolean, java.lang.String)
    {
        cck.util.Option$Bool $r0;
        java.lang.String r1, r2;
        boolean z0;
        cck.util.Options r4;
        java.util.HashMap $r5;

        r4 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        $r0 = new cck.util.Option$Bool;

        specialinvoke $r0.<cck.util.Option$Bool: void <init>(java.lang.String,boolean,java.lang.String)>(r1, z0, r2);

        $r5 = r4.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public cck.util.Option$Str newOption(java.lang.String, java.lang.String, java.lang.String)
    {
        cck.util.Option$Str $r0;
        java.lang.String r1, r2, r3;
        cck.util.Options r5;
        java.util.HashMap $r6;

        r5 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new cck.util.Option$Str;

        specialinvoke $r0.<cck.util.Option$Str: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r6 = r5.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public cck.util.Option$List newOptionList(java.lang.String, java.lang.String, java.lang.String)
    {
        cck.util.Option$List $r0;
        java.lang.String r1, r2, r3;
        cck.util.Options r5;
        java.util.HashMap $r6;

        r5 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new cck.util.Option$List;

        specialinvoke $r0.<cck.util.Option$List: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r6 = r5.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public cck.util.Option$Long newOption(java.lang.String, long, java.lang.String)
    {
        cck.util.Option$Long $r0;
        java.lang.String r1, r2;
        long l0;
        cck.util.Options r4;
        java.util.HashMap $r5;

        r4 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        $r0 = new cck.util.Option$Long;

        specialinvoke $r0.<cck.util.Option$Long: void <init>(java.lang.String,long,java.lang.String)>(r1, l0, r2);

        $r5 = r4.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public cck.util.Option$Double newOption(java.lang.String, double, java.lang.String)
    {
        cck.util.Option$Double $r0;
        java.lang.String r1, r2;
        double d0;
        cck.util.Options r4;
        java.util.HashMap $r5;

        r4 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        $r0 = new cck.util.Option$Double;

        specialinvoke $r0.<cck.util.Option$Double: void <init>(java.lang.String,double,java.lang.String)>(r1, d0, r2);

        $r5 = r4.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public cck.util.Option$Interval newOption(java.lang.String, long, long, java.lang.String)
    {
        cck.util.Option$Interval $r0;
        java.lang.String r1, r2;
        long l0, l1;
        cck.util.Options r4;
        java.util.HashMap $r5;

        r4 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.lang.String;

        $r0 = new cck.util.Option$Interval;

        specialinvoke $r0.<cck.util.Option$Interval: void <init>(java.lang.String,long,long,java.lang.String)>(r1, l0, l1, r2);

        $r5 = r4.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public java.lang.String getOptionValue(java.lang.String)
    {
        cck.util.Options r0;
        java.lang.String r1, $r5;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        cck.util.Option r4;

        r0 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (cck.util.Option) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<cck.util.Option: java.lang.String stringValue()>();

     label2:
        return $r5;
    }

    public java.lang.String getOptionValue(java.lang.String, java.lang.String)
    {
        cck.util.Options r0;
        java.lang.String r1, r5, $r6;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        cck.util.Option r4;

        r0 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (cck.util.Option) $r3;

        if r4 != null goto label1;

        $r6 = r5;

        goto label2;

     label1:
        $r6 = virtualinvoke r4.<cck.util.Option: java.lang.String stringValue()>();

     label2:
        return $r6;
    }

    public cck.util.Option getOption(java.lang.String)
    {
        cck.util.Options r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        cck.util.Option $r4;

        r0 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (cck.util.Option) $r3;

        return $r4;
    }

    public boolean hasOption(java.lang.String)
    {
        cck.util.Options r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String[] getArguments()
    {
        cck.util.Options r0;
        java.lang.String[] $r1;

        r0 := @this: cck.util.Options;

        $r1 = r0.<cck.util.Options: java.lang.String[] arguments>;

        return $r1;
    }

    public void parseCommandLine(java.lang.String[])
    {
        java.lang.String[] r0, $r2, $r3;
        int $i0, $i1, i2, i4;
        cck.util.Options r1;
        java.lang.String $r4, $r5;
        char $c3;

        r1 := @this: cck.util.Options;

        r0 := @parameter0: java.lang.String[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label3;

        $r4 = r0[i4];

        $c3 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        if $c3 == 45 goto label2;

        goto label3;

     label2:
        $r5 = r0[i4];

        virtualinvoke r1.<cck.util.Options: void parseOption(java.lang.String)>($r5);

        i4 = i4 + 1;

        goto label1;

     label3:
        $i1 = lengthof r0;

        i2 = $i1 - i4;

        $r2 = newarray (java.lang.String)[i2];

        r1.<cck.util.Options: java.lang.String[] arguments> = $r2;

        $r3 = r1.<cck.util.Options: java.lang.String[] arguments>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i4, $r3, 0, i2);

        return;
    }

    protected void parseOption(java.lang.String)
    {
        java.lang.String r0, r2, r3;
        int i0, $i1, $i2;
        cck.util.Options r1;

        r1 := @this: cck.util.Options;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(61);

        if i0 >= 0 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        r3 = "";

        goto label2;

     label1:
        $i1 = i0 + 1;

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, i0);

     label2:
        virtualinvoke r1.<cck.util.Options: void setOption(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public void setOption(java.lang.String, java.lang.String)
    {
        cck.util.Options r0;
        java.lang.String r1, r4;
        java.util.HashMap $r2, $r6;
        java.lang.Object $r3;
        cck.util.Option$Str $r5;
        cck.util.Option r8;

        r0 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (cck.util.Option) $r3;

        if r8 != null goto label1;

        $r5 = new cck.util.Option$Str;

        specialinvoke $r5.<cck.util.Option$Str: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r4, "");

        r8 = $r5;

        $r6 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        virtualinvoke r8.<cck.util.Option: void set(java.lang.String)>(r4);

        return;
    }

    public java.util.Collection getAllOptions()
    {
        cck.util.Options r0;
        java.util.HashMap $r1;
        java.util.Collection $r2;

        r0 := @this: cck.util.Options;

        $r1 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        return $r2;
    }

    public void process(cck.util.Options)
    {
        cck.util.Options r0, r10;
        java.util.HashMap $r1, $r6;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4, $r7;
        java.lang.String r5, r9;
        cck.util.Option $r8;

        r10 := @this: cck.util.Options;

        r0 := @parameter0: cck.util.Options;

        $r1 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r0.<cck.util.Options: java.util.HashMap knownValues>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        $r8 = (cck.util.Option) $r7;

        r9 = virtualinvoke $r8.<cck.util.Option: java.lang.String stringValue()>();

        virtualinvoke r10.<cck.util.Options: void setOption(java.lang.String,java.lang.String)>(r5, r9);

        goto label1;

     label2:
        return;
    }

    public void process(java.util.Properties)
    {
        java.util.Properties r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4, r5;
        cck.util.Options r6;

        r6 := @this: cck.util.Options;

        r0 := @parameter0: java.util.Properties;

        $r1 = virtualinvoke r0.<java.util.Properties: java.util.Set keySet()>();

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        r5 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r4);

        virtualinvoke r6.<cck.util.Options: void setOption(java.lang.String,java.lang.String)>(r4, r5);

        goto label1;

     label2:
        return;
    }

    public void loadFile(java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String r1;
        java.util.Properties $r3;
        java.io.FileInputStream $r5;
        cck.util.Options r6;

        r6 := @this: cck.util.Options;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r5);

        virtualinvoke r6.<cck.util.Options: void process(java.util.Properties)>($r3);

        return;
    }
}
