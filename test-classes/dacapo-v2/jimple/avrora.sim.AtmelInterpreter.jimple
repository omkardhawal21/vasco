public abstract class avrora.sim.AtmelInterpreter extends avrora.sim.Interpreter implements avrora.arch.legacy.LegacyInstrVisitor
{
    public static final boolean INSTRUMENTED;
    public static final boolean UNINSTRUMENTED;
    public static final int NUM_REGS;
    protected avrora.arch.legacy.LegacyInstr[] shared_instr;
    protected int pc;
    protected int nextPC;
    protected int cyclesConsumed;
    protected boolean I;
    protected boolean T;
    protected boolean H;
    protected boolean S;
    protected boolean V;
    protected boolean N;
    protected boolean Z;
    protected boolean C;
    protected byte[] sram;
    protected final int sram_start;
    protected final int sram_max;
    protected avrora.sim.util.MulticastWatch[] sram_watches;
    protected final avrora.sim.state.VolatileBehavior[] sram_volatile;
    protected final avrora.sim.ActiveRegister[] ioregs;
    protected final avrora.sim.CodeSegment flash;
    protected final avrora.sim.RWRegister SPL_reg;
    protected final avrora.sim.RWRegister SPH_reg;
    public final int RAMPZ;
    public final int SREG;
    protected final avrora.sim.mcu.RegisterSet registers;
    protected final avrora.sim.AtmelInterpreter$StateImpl state;
    protected int bootPC;
    protected int interruptBase;
    protected avrora.sim.util.MulticastWatch error_watch;
    protected final avrora.sim.util.MulticastProbe globalProbe;
    protected long delayCycles;
    protected boolean shouldRun;
    protected boolean sleeping;
    protected boolean justReturnedFromInterrupt;

    protected void <init>(avrora.sim.Simulator, avrora.core.Program, avrora.arch.avr.AVRProperties)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.Simulator r1;
        java.lang.Class $r2;
        avrora.sim.AtmelInterpreter$StateImpl $r3;
        avrora.sim.util.MulticastProbe $r4;
        avrora.arch.avr.AVRProperties r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22;
        boolean $z1;
        avrora.core.Program r6;
        byte[] $r7;
        avrora.sim.mcu.Microcontroller $r8;
        avrora.sim.mcu.RegisterSet $r9, $r14;
        avrora.sim.state.VolatileBehavior[] $r10, $r13, $r17, $r30, $r34;
        avrora.sim.state.VolatileBehavior $r11;
        avrora.sim.ActiveRegister[] $r15, $r16, $r24, $r27, $r32;
        avrora.sim.AtmelInterpreter$SREGBehavior $r18;
        avrora.sim.CodeSegment$Factory $r19;
        avrora.sim.CodeSegment $r20, $r21;
        avrora.arch.legacy.LegacyInstr[] $r22;
        avrora.sim.InterruptTable $r23;
        avrora.sim.ActiveRegister $r25, $r28, $r33;
        avrora.sim.RWRegister $r26, $r29;
        avrora.sim.AtmelInterpreter$IORegBehavior $r31;
        java.lang.StringBuilder $r35, $r36, $r37, $r38;
        java.lang.String $r39;
        cck.util.Util$InternalError $r40;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.sim.Simulator;

        r6 := @parameter1: avrora.core.Program;

        r5 := @parameter2: avrora.arch.avr.AVRProperties;

        specialinvoke r0.<avrora.sim.Interpreter: void <init>(avrora.sim.Simulator)>(r1);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <java.lang.Compiler: boolean compileClass(java.lang.Class)>($r2);

        $r3 = new avrora.sim.AtmelInterpreter$StateImpl;

        specialinvoke $r3.<avrora.sim.AtmelInterpreter$StateImpl: void <init>(avrora.sim.AtmelInterpreter)>(r0);

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state> = $r3;

        $r4 = new avrora.sim.util.MulticastProbe;

        specialinvoke $r4.<avrora.sim.util.MulticastProbe: void <init>()>();

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastProbe globalProbe> = $r4;

        $i0 = virtualinvoke r5.<avrora.arch.avr.AVRProperties: int getIOReg(java.lang.String)>("SREG");

        r0.<avrora.sim.AtmelInterpreter: int SREG> = $i0;

        $z1 = virtualinvoke r5.<avrora.arch.avr.AVRProperties: boolean hasIOReg(java.lang.String)>("RAMPZ");

        if $z1 == 0 goto label1;

        $i20 = virtualinvoke r5.<avrora.arch.avr.AVRProperties: int getIOReg(java.lang.String)>("RAMPZ");

        r0.<avrora.sim.AtmelInterpreter: int RAMPZ> = $i20;

        goto label2;

     label1:
        r0.<avrora.sim.AtmelInterpreter: int RAMPZ> = -1;

     label2:
        $i2 = r6.<avrora.core.Program: int program_end>;

        $i1 = r5.<avrora.arch.avr.AVRProperties: int flash_size>;

        if $i2 <= $i1 goto label3;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("program will not fit into ");

        $i19 = r5.<avrora.arch.avr.AVRProperties: int flash_size>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r39);

        throw $r40;

     label3:
        $i3 = r5.<avrora.arch.avr.AVRProperties: int ioreg_size>;

        $i4 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>($i3);

        r0.<avrora.sim.AtmelInterpreter: int sram_start> = $i4;

        $i5 = r5.<avrora.arch.avr.AVRProperties: int ioreg_size>;

        $i7 = 32 + $i5;

        $i6 = r5.<avrora.arch.avr.AVRProperties: int sram_size>;

        $i8 = $i7 + $i6;

        r0.<avrora.sim.AtmelInterpreter: int sram_max> = $i8;

        $i9 = r0.<avrora.sim.AtmelInterpreter: int sram_max>;

        $r7 = newarray (byte)[$i9];

        r0.<avrora.sim.AtmelInterpreter: byte[] sram> = $r7;

        $r8 = virtualinvoke r1.<avrora.sim.Simulator: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        $r9 = interfaceinvoke $r8.<avrora.sim.mcu.Microcontroller: avrora.sim.mcu.RegisterSet getRegisterSet()>();

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.mcu.RegisterSet registers> = $r9;

        $i10 = r0.<avrora.sim.AtmelInterpreter: int sram_start>;

        $r10 = newarray (avrora.sim.state.VolatileBehavior)[$i10];

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile> = $r10;

        $r11 = new avrora.sim.state.VolatileBehavior;

        specialinvoke $r11.<avrora.sim.state.VolatileBehavior: void <init>()>();

        i21 = 0;

     label4:
        $r13 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        $i11 = lengthof $r13;

        if i21 >= $i11 goto label5;

        $r34 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        $r34[i21] = $r11;

        i21 = i21 + 1;

        goto label4;

     label5:
        $r14 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.mcu.RegisterSet registers>;

        $r15 = virtualinvoke $r14.<avrora.sim.mcu.RegisterSet: avrora.sim.ActiveRegister[] share()>();

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs> = $r15;

        i22 = 0;

     label6:
        $r16 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;

        $i12 = lengthof $r16;

        if i22 >= $i12 goto label7;

        $r30 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        $i18 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i22);

        $r31 = new avrora.sim.AtmelInterpreter$IORegBehavior;

        $r32 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;

        $r33 = $r32[i22];

        specialinvoke $r31.<avrora.sim.AtmelInterpreter$IORegBehavior: void <init>(avrora.sim.ActiveRegister)>($r33);

        $r30[$i18] = $r31;

        i22 = i22 + 1;

        goto label6;

     label7:
        $r17 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        $i13 = r0.<avrora.sim.AtmelInterpreter: int SREG>;

        $i14 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>($i13);

        $r18 = new avrora.sim.AtmelInterpreter$SREGBehavior;

        specialinvoke $r18.<avrora.sim.AtmelInterpreter$SREGBehavior: void <init>(avrora.sim.AtmelInterpreter,avrora.sim.AtmelInterpreter$1)>(r0, null);

        $r17[$i14] = $r18;

        $r19 = r5.<avrora.arch.avr.AVRProperties: avrora.sim.CodeSegment$Factory codeSegmentFactory>;

        $r20 = interfaceinvoke $r19.<avrora.sim.CodeSegment$Factory: avrora.sim.CodeSegment newCodeSegment(java.lang.String,avrora.sim.AtmelInterpreter,avrora.core.Program)>("flash", r0, r6);

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash> = $r20;

        $r21 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        $r22 = virtualinvoke $r21.<avrora.sim.CodeSegment: avrora.arch.legacy.LegacyInstr[] shareCode(avrora.sim.CodeSegment$CodeSharer)>(null);

        r0.<avrora.sim.AtmelInterpreter: avrora.arch.legacy.LegacyInstr[] shared_instr> = $r22;

        $r23 = new avrora.sim.InterruptTable;

        $i15 = r5.<avrora.arch.avr.AVRProperties: int num_interrupts>;

        specialinvoke $r23.<avrora.sim.InterruptTable: void <init>(avrora.sim.Interpreter,int)>(r0, $i15);

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts> = $r23;

        $r24 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;

        $i16 = virtualinvoke r5.<avrora.arch.avr.AVRProperties: int getIOReg(java.lang.String)>("SPL");

        $r25 = $r24[$i16];

        $r26 = (avrora.sim.RWRegister) $r25;

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPL_reg> = $r26;

        $r27 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;

        $i17 = virtualinvoke r5.<avrora.arch.avr.AVRProperties: int getIOReg(java.lang.String)>("SPH");

        $r28 = $r27[$i17];

        $r29 = (avrora.sim.RWRegister) $r28;

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPH_reg> = $r29;

        return;
    }

    public void start()
    {
        avrora.sim.AtmelInterpreter r0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r0.<avrora.sim.AtmelInterpreter: boolean shouldRun> = 1;

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void runLoop()>();

        return;
    }

    public void stop()
    {
        avrora.sim.AtmelInterpreter r0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r0.<avrora.sim.AtmelInterpreter: boolean shouldRun> = 0;

        r0.<avrora.sim.AtmelInterpreter: boolean innerLoop> = 0;

        return;
    }

    public avrora.sim.State getState()
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.AtmelInterpreter$StateImpl $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        return $r1;
    }

    protected abstract void runLoop();

    protected int getInterruptVectorAddress(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $i3 = r0.<avrora.sim.AtmelInterpreter: int interruptBase>;

        $i1 = i0 - 1;

        $i2 = $i1 * 4;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public void setPosted(int, boolean)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.InterruptTable $r1, $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;

        virtualinvoke $r2.<avrora.sim.InterruptTable: void post(int)>(i0);

        goto label2;

     label1:
        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;

        virtualinvoke $r1.<avrora.sim.InterruptTable: void unpost(int)>(i0);

     label2:
        return;
    }

    public void setEnabled(int, boolean)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.InterruptTable $r1, $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r0.<avrora.sim.AtmelInterpreter: boolean innerLoop> = 0;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;

        virtualinvoke $r2.<avrora.sim.InterruptTable: void enable(int)>(i0);

        goto label2;

     label1:
        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;

        virtualinvoke $r1.<avrora.sim.InterruptTable: void disable(int)>(i0);

     label2:
        return;
    }

    protected void insertProbe(avrora.sim.Simulator$Probe, int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.Simulator$Probe r1;
        avrora.sim.CodeSegment $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.sim.Simulator$Probe;

        i0 := @parameter1: int;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        virtualinvoke $r2.<avrora.sim.CodeSegment: void insertProbe(int,avrora.sim.Simulator$Probe)>(i0, r1);

        return;
    }

    protected void insertErrorWatch(avrora.sim.Simulator$Watch)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch $r1, $r3, $r4;
        avrora.sim.Simulator$Watch r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r2 := @parameter0: avrora.sim.Simulator$Watch;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch>;

        if $r1 != null goto label1;

        $r4 = new avrora.sim.util.MulticastWatch;

        specialinvoke $r4.<avrora.sim.util.MulticastWatch: void <init>()>();

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch> = $r4;

     label1:
        $r3 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch>;

        virtualinvoke $r3.<avrora.sim.util.MulticastWatch: void add(java.lang.Object)>(r2);

        return;
    }

    protected void insertProbe(avrora.sim.Simulator$Probe)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.Simulator$Probe r1;
        avrora.sim.util.MulticastProbe $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.sim.Simulator$Probe;

        r0.<avrora.sim.AtmelInterpreter: boolean innerLoop> = 0;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastProbe globalProbe>;

        virtualinvoke $r2.<avrora.sim.util.MulticastProbe: void add(java.lang.Object)>(r1);

        return;
    }

    protected void removeProbe(avrora.sim.Simulator$Probe, int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.Simulator$Probe r1;
        avrora.sim.CodeSegment $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.sim.Simulator$Probe;

        i0 := @parameter1: int;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        virtualinvoke $r2.<avrora.sim.CodeSegment: void removeProbe(int,avrora.sim.Simulator$Probe)>(i0, r1);

        return;
    }

    public void removeProbe(avrora.sim.Simulator$Probe)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.Simulator$Probe r1;
        avrora.sim.util.MulticastProbe $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.sim.Simulator$Probe;

        r0.<avrora.sim.AtmelInterpreter: boolean innerLoop> = 0;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastProbe globalProbe>;

        virtualinvoke $r2.<avrora.sim.util.MulticastProbe: void remove(java.lang.Object)>(r1);

        return;
    }

    protected void insertWatch(avrora.sim.Simulator$Watch, int)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch[] $r1, $r2, $r5, $r7;
        int i0, $i1;
        avrora.sim.Simulator$Watch r3;
        avrora.sim.util.MulticastWatch $r4, r8;
        byte[] $r6;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r3 := @parameter0: avrora.sim.Simulator$Watch;

        i0 := @parameter1: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        if $r1 != null goto label1;

        $r6 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $i1 = lengthof $r6;

        $r7 = newarray (avrora.sim.util.MulticastWatch)[$i1];

        r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches> = $r7;

     label1:
        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        r8 = $r2[i0];

        if r8 != null goto label2;

        $r5 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        $r4 = new avrora.sim.util.MulticastWatch;

        specialinvoke $r4.<avrora.sim.util.MulticastWatch: void <init>()>();

        $r5[i0] = $r4;

        r8 = $r4;

     label2:
        virtualinvoke r8.<avrora.sim.util.MulticastWatch: void add(java.lang.Object)>(r3);

        return;
    }

    protected void removeWatch(avrora.sim.Simulator$Watch, int)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch[] $r1, $r2;
        int i0;
        avrora.sim.util.MulticastWatch r3;
        avrora.sim.Simulator$Watch r4;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r4 := @parameter0: avrora.sim.Simulator$Watch;

        i0 := @parameter1: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        r3 = $r2[i0];

        if r3 != null goto label2;

        return;

     label2:
        virtualinvoke r3.<avrora.sim.util.MulticastWatch: void remove(java.lang.Object)>(r4);

        return;
    }

    protected void advanceClock(long)
    {
        avrora.sim.AtmelInterpreter r0;
        long l0;
        avrora.sim.clock.MainClock $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        l0 := @parameter0: long;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.clock.MainClock clock>;

        virtualinvoke $r1.<avrora.sim.clock.MainClock: void advance(long)>(l0);

        r0.<avrora.sim.AtmelInterpreter: int cyclesConsumed> = 0;

        return;
    }

    protected void delay(long)
    {
        avrora.sim.AtmelInterpreter r0;
        long l0, $l1, $l2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        l0 := @parameter0: long;

        r0.<avrora.sim.AtmelInterpreter: boolean innerLoop> = 0;

        $l1 = r0.<avrora.sim.AtmelInterpreter: long delayCycles>;

        $l2 = $l1 + l0;

        r0.<avrora.sim.AtmelInterpreter: long delayCycles> = $l2;

        return;
    }

    protected void storeProgramMemory()
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.CodeSegment $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        virtualinvoke $r1.<avrora.sim.CodeSegment: void update()>();

        return;
    }

    public byte getRegisterByte(avrora.arch.legacy.LegacyRegister)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.arch.legacy.LegacyRegister r1;
        byte[] $r2;
        int $i0;
        byte $b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.arch.legacy.LegacyRegister;

        $r2 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $i0 = virtualinvoke r1.<avrora.arch.legacy.LegacyRegister: int getNumber()>();

        $b1 = $r2[$i0];

        return $b1;
    }

    public byte getRegisterByte(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $b1 = $r1[i0];

        return $b1;
    }

    public int getRegisterUnsigned(avrora.arch.legacy.LegacyRegister)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.arch.legacy.LegacyRegister r1;
        byte[] $r2;
        int $i0, $i2;
        byte $b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.arch.legacy.LegacyRegister;

        $r2 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $i0 = virtualinvoke r1.<avrora.arch.legacy.LegacyRegister: int getNumber()>();

        $b1 = $r2[$i0];

        $i2 = $b1 & 255;

        return $i2;
    }

    public int getRegisterUnsigned(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i2;
        byte[] $r1;
        byte $b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $b1 = $r1[i0];

        $i2 = $b1 & 255;

        return $i2;
    }

    public int getRegisterWord(avrora.arch.legacy.LegacyRegister)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.arch.legacy.LegacyRegister r1, $r2;
        byte b0, b1;
        char $c2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.arch.legacy.LegacyRegister;

        b0 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>(r1);

        $r2 = virtualinvoke r1.<avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister nextRegister()>();

        b1 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($r2);

        $c2 = staticinvoke <cck.util.Arithmetic: char uword(byte,byte)>(b0, b1);

        return $c2;
    }

    public int getRegisterWord(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i2;
        byte b1, b3;
        char $c4;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        b1 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: byte getRegisterByte(int)>(i0);

        $i2 = i0 + 1;

        b3 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: byte getRegisterByte(int)>($i2);

        $c4 = staticinvoke <cck.util.Arithmetic: char uword(byte,byte)>(b1, b3);

        return $c4;
    }

    public boolean getFlag(int)
    {
        int i0;
        avrora.sim.AtmelInterpreter r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label8;
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label1;
            default: goto label9;
        };

     label1:
        $z0 = r0.<avrora.sim.AtmelInterpreter: boolean I>;

        return $z0;

     label2:
        $z1 = r0.<avrora.sim.AtmelInterpreter: boolean T>;

        return $z1;

     label3:
        $z2 = r0.<avrora.sim.AtmelInterpreter: boolean H>;

        return $z2;

     label4:
        $z3 = r0.<avrora.sim.AtmelInterpreter: boolean S>;

        return $z3;

     label5:
        $z4 = r0.<avrora.sim.AtmelInterpreter: boolean V>;

        return $z4;

     label6:
        $z5 = r0.<avrora.sim.AtmelInterpreter: boolean N>;

        return $z5;

     label7:
        $z6 = r0.<avrora.sim.AtmelInterpreter: boolean Z>;

        return $z6;

     label8:
        $z7 = r0.<avrora.sim.AtmelInterpreter: boolean C>;

        return $z7;

     label9:
        return 0;
    }

    public void setFlag(int, boolean)
    {
        int i0;
        boolean z0;
        avrora.sim.AtmelInterpreter r0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        tableswitch(i0)
        {
            case 0: goto label09;
            case 1: goto label08;
            case 2: goto label07;
            case 3: goto label06;
            case 4: goto label05;
            case 5: goto label04;
            case 6: goto label03;
            case 7: goto label01;
            default: goto label10;
        };

     label01:
        if z0 == 0 goto label02;

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void enableInterrupts()>();

        goto label10;

     label02:
        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void disableInterrupts()>();

        goto label10;

     label03:
        r0.<avrora.sim.AtmelInterpreter: boolean T> = z0;

        goto label10;

     label04:
        r0.<avrora.sim.AtmelInterpreter: boolean H> = z0;

        goto label10;

     label05:
        r0.<avrora.sim.AtmelInterpreter: boolean S> = z0;

        goto label10;

     label06:
        r0.<avrora.sim.AtmelInterpreter: boolean V> = z0;

        goto label10;

     label07:
        r0.<avrora.sim.AtmelInterpreter: boolean N> = z0;

        goto label10;

     label08:
        r0.<avrora.sim.AtmelInterpreter: boolean Z> = z0;

        goto label10;

     label09:
        r0.<avrora.sim.AtmelInterpreter: boolean C> = z0;

     label10:
        return;
    }

    protected void setIORegBit(int, int, boolean)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1, i2, $i3;
        boolean z0;
        byte b4, b5;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i1 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i0);

        b4 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte readSRAM(boolean,int)>(1, $i1);

        b5 = staticinvoke <cck.util.Arithmetic: byte setBit(byte,int,boolean)>(b4, i2, z0);

        $i3 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i0);

        specialinvoke r0.<avrora.sim.AtmelInterpreter: void writeSRAM(boolean,int,byte)>(1, $i3, b5);

        return;
    }

    protected boolean getIORegBit(int, int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1, i3;
        byte $b2;
        boolean $z0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $i1 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i0);

        $b2 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte readSRAM(boolean,int)>(1, $i1);

        $z0 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($b2, i3);

        return $z0;
    }

    public byte getDataByte(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        byte $b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $b1 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte readSRAM(boolean,int)>(1, i0);

        return $b1;
    }

    private byte readSRAM(boolean, int)
    {
        int i0, $i1, $i3;
        avrora.sim.AtmelInterpreter r0;
        byte[] $r1, $r2, $r3;
        boolean z0;
        byte $b2, $b4, $b5, b6;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $b5 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte fireReadError(boolean,int)>(z0, i0);

        return $b5;

     label1:
        $r1 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        specialinvoke r0.<avrora.sim.AtmelInterpreter: void fireBeforeRead(boolean,int)>(z0, i0);

        $i3 = r0.<avrora.sim.AtmelInterpreter: int sram_start>;

        if i0 >= $i3 goto label2;

        $r3 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $b4 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte readVolatile(int)>(i0);

        $r3[i0] = $b4;

        b6 = $b4;

        goto label3;

     label2:
        $r2 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        b6 = $r2[i0];

     label3:
        specialinvoke r0.<avrora.sim.AtmelInterpreter: void fireAfterRead(boolean,int,byte)>(z0, i0, b6);

        return b6;

     label4:
        $b2 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte fireReadError(boolean,int)>(z0, i0);

        return $b2;
    }

    private void writeSRAM(boolean, int, byte)
    {
        int i0, $i1, $i3;
        avrora.sim.AtmelInterpreter r0;
        byte[] $r1, $r2, $r3;
        boolean z0;
        byte b2, $b4;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        b2 := @parameter2: byte;

        if i0 >= 0 goto label1;

        specialinvoke r0.<avrora.sim.AtmelInterpreter: void fireWriteError(boolean,int,byte)>(z0, i0, b2);

        goto label5;

     label1:
        $r1 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        specialinvoke r0.<avrora.sim.AtmelInterpreter: void fireBeforeWrite(boolean,int,byte)>(z0, i0, b2);

        $i3 = r0.<avrora.sim.AtmelInterpreter: int sram_start>;

        if i0 >= $i3 goto label2;

        $r3 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $b4 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte writeVolatile(int,byte)>(i0, b2);

        $r3[i0] = $b4;

        goto label3;

     label2:
        $r2 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $r2[i0] = b2;

     label3:
        specialinvoke r0.<avrora.sim.AtmelInterpreter: void fireAfterWrite(boolean,int,byte)>(z0, i0, b2);

        goto label5;

     label4:
        specialinvoke r0.<avrora.sim.AtmelInterpreter: void fireWriteError(boolean,int,byte)>(z0, i0, b2);

     label5:
        return;
    }

    private void fireWriteError(boolean, int, byte)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch $r1, $r3;
        int i0;
        byte b1;
        avrora.sim.AtmelInterpreter$StateImpl $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        b1 := @parameter2: byte;

        if z0 == 0 goto label1;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch>;

        if $r1 == null goto label1;

        $r3 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch>;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        virtualinvoke $r3.<avrora.sim.util.MulticastWatch: void fireBeforeWrite(avrora.sim.State,int,byte)>($r2, i0, b1);

     label1:
        return;
    }

    private byte fireReadError(boolean, int)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch $r1, $r3;
        int i0;
        avrora.sim.AtmelInterpreter$StateImpl $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 == 0 goto label1;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch>;

        if $r1 == null goto label1;

        $r3 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch error_watch>;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        virtualinvoke $r3.<avrora.sim.util.MulticastWatch: void fireBeforeRead(avrora.sim.State,int)>($r2, i0);

     label1:
        return 0;
    }

    private byte readVolatile(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i2, $i3;
        avrora.sim.state.VolatileBehavior[] $r1;
        avrora.sim.state.VolatileBehavior r2;
        byte[] $r3;
        byte $b1, $b4;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        r2 = $r1[i0];

        $r3 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $b1 = $r3[i0];

        $i2 = $b1 & 255;

        $i3 = virtualinvoke r2.<avrora.sim.state.VolatileBehavior: int read(int)>($i2);

        $b4 = (byte) $i3;

        return $b4;
    }

    private byte writeVolatile(int, byte)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i3, $i4, $i5;
        avrora.sim.state.VolatileBehavior[] $r1;
        avrora.sim.state.VolatileBehavior r2;
        byte[] $r3;
        byte $b1, b2, $b6;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        b2 := @parameter1: byte;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        r2 = $r1[i0];

        $r3 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $b1 = $r3[i0];

        $i4 = $b1 & 255;

        $i3 = b2 & 255;

        $i5 = virtualinvoke r2.<avrora.sim.state.VolatileBehavior: int write(int,int)>($i4, $i3);

        $b6 = (byte) $i5;

        return $b6;
    }

    private void fireBeforeRead(boolean, int)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch[] $r1, $r2;
        int i0;
        avrora.sim.util.MulticastWatch r3;
        avrora.sim.AtmelInterpreter$StateImpl $r4;
        avrora.sim.Simulator$Watch $r5;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 == 0 goto label1;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        if $r1 == null goto label1;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        r3 = $r2[i0];

        if r3 == null goto label1;

        $r4 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        $r5 = (avrora.sim.Simulator$Watch) r3;

        interfaceinvoke $r5.<avrora.sim.Simulator$Watch: void fireBeforeRead(avrora.sim.State,int)>($r4, i0);

     label1:
        return;
    }

    private void fireAfterRead(boolean, int, byte)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch[] $r1, $r2;
        int i0;
        avrora.sim.util.MulticastWatch r3;
        byte b1;
        avrora.sim.AtmelInterpreter$StateImpl $r4;
        avrora.sim.Simulator$Watch $r5;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        b1 := @parameter2: byte;

        if z0 == 0 goto label1;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        if $r1 == null goto label1;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        r3 = $r2[i0];

        if r3 == null goto label1;

        $r4 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        $r5 = (avrora.sim.Simulator$Watch) r3;

        interfaceinvoke $r5.<avrora.sim.Simulator$Watch: void fireAfterRead(avrora.sim.State,int,byte)>($r4, i0, b1);

     label1:
        return;
    }

    private void fireBeforeWrite(boolean, int, byte)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch[] $r1, $r2;
        int i0;
        avrora.sim.util.MulticastWatch r3;
        byte b1;
        avrora.sim.AtmelInterpreter$StateImpl $r4;
        avrora.sim.Simulator$Watch $r5;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        b1 := @parameter2: byte;

        if z0 == 0 goto label1;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        if $r1 == null goto label1;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        r3 = $r2[i0];

        if r3 == null goto label1;

        $r4 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        $r5 = (avrora.sim.Simulator$Watch) r3;

        interfaceinvoke $r5.<avrora.sim.Simulator$Watch: void fireBeforeWrite(avrora.sim.State,int,byte)>($r4, i0, b1);

     label1:
        return;
    }

    private void fireAfterWrite(boolean, int, byte)
    {
        boolean z0;
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.util.MulticastWatch[] $r1, $r2;
        int i0;
        avrora.sim.util.MulticastWatch r3;
        byte b1;
        avrora.sim.AtmelInterpreter$StateImpl $r4;
        avrora.sim.Simulator$Watch $r5;

        r0 := @this: avrora.sim.AtmelInterpreter;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        b1 := @parameter2: byte;

        if z0 == 0 goto label1;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        if $r1 == null goto label1;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.util.MulticastWatch[] sram_watches>;

        r3 = $r2[i0];

        if r3 == null goto label1;

        $r4 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.AtmelInterpreter$StateImpl state>;

        $r5 = (avrora.sim.Simulator$Watch) r3;

        interfaceinvoke $r5.<avrora.sim.Simulator$Watch: void fireAfterWrite(avrora.sim.State,int,byte)>($r4, i0, b1);

     label1:
        return;
    }

    public int getInstrSize(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1;
        avrora.arch.legacy.LegacyInstr $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: avrora.arch.legacy.LegacyInstr getInstr(int)>(i0);

        $i1 = virtualinvoke $r1.<avrora.arch.legacy.LegacyInstr: int getSize()>();

        return $i1;
    }

    public byte getIORegisterByte(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1;
        byte $b2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $i1 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i0);

        $b2 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte readSRAM(boolean,int)>(1, $i1);

        return $b2;
    }

    public byte getFlashByte(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.CodeSegment $r1;
        byte $b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        $b1 = virtualinvoke $r1.<avrora.sim.CodeSegment: byte read(int)>(i0);

        return $b1;
    }

    protected void writeRegisterByte(avrora.arch.legacy.LegacyRegister, byte)
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.arch.legacy.LegacyRegister r1;
        byte[] $r2;
        int $i0;
        byte b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.arch.legacy.LegacyRegister;

        b1 := @parameter1: byte;

        $r2 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $i0 = virtualinvoke r1.<avrora.arch.legacy.LegacyRegister: int getNumber()>();

        $r2[$i0] = b1;

        return;
    }

    protected void writeRegisterWord(avrora.arch.legacy.LegacyRegister, int)
    {
        int i0;
        byte b1, b2;
        avrora.sim.AtmelInterpreter r0;
        avrora.arch.legacy.LegacyRegister r1, $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r1 := @parameter0: avrora.arch.legacy.LegacyRegister;

        i0 := @parameter1: int;

        b1 = staticinvoke <cck.util.Arithmetic: byte low(int)>(i0);

        b2 = staticinvoke <cck.util.Arithmetic: byte high(int)>(i0);

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void writeRegisterByte(avrora.arch.legacy.LegacyRegister,byte)>(r1, b1);

        $r2 = virtualinvoke r1.<avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister nextRegister()>();

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void writeRegisterByte(avrora.arch.legacy.LegacyRegister,byte)>($r2, b2);

        return;
    }

    public void writeRegisterByte(int, byte)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        byte b1;
        byte[] $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $r1 = r0.<avrora.sim.AtmelInterpreter: byte[] sram>;

        $r1[i0] = b1;

        return;
    }

    public void writeRegisterWord(int, int)
    {
        int i0, i3, $i4;
        byte b1, b2;
        avrora.sim.AtmelInterpreter r0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        b1 = staticinvoke <cck.util.Arithmetic: byte low(int)>(i0);

        b2 = staticinvoke <cck.util.Arithmetic: byte high(int)>(i0);

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void writeRegisterByte(int,byte)>(i3, b1);

        $i4 = i3 + 1;

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void writeRegisterByte(int,byte)>($i4, b2);

        return;
    }

    public void writeDataByte(int, byte)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        byte b1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        specialinvoke r0.<avrora.sim.AtmelInterpreter: void writeSRAM(boolean,int,byte)>(1, i0, b1);

        return;
    }

    public void writeFlashByte(int, byte)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        byte b1;
        avrora.sim.CodeSegment $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        virtualinvoke $r1.<avrora.sim.CodeSegment: void set(int,byte)>(i0, b1);

        return;
    }

    public void installIOReg(int, avrora.sim.ActiveRegister)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1;
        avrora.sim.state.VolatileBehavior[] $r1;
        avrora.sim.AtmelInterpreter$IORegBehavior $r2;
        avrora.sim.ActiveRegister r3;
        avrora.sim.ActiveRegister[] $r4;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        r3 := @parameter1: avrora.sim.ActiveRegister;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        $i1 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i0);

        $r2 = new avrora.sim.AtmelInterpreter$IORegBehavior;

        specialinvoke $r2.<avrora.sim.AtmelInterpreter$IORegBehavior: void <init>(avrora.sim.ActiveRegister)>(r3);

        $r1[$i1] = $r2;

        $r4 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;

        $r4[i0] = r3;

        return;
    }

    public avrora.sim.ActiveRegister getIOReg(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.ActiveRegister[] $r1;
        avrora.sim.ActiveRegister $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;

        $r2 = $r1[i0];

        return $r2;
    }

    private static int toSRAM(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 + 32;

        return $i1;
    }

    public void installVolatileBehavior(int, avrora.sim.state.VolatileBehavior)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.state.VolatileBehavior r1;
        avrora.sim.state.VolatileBehavior[] $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        r1 := @parameter1: avrora.sim.state.VolatileBehavior;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.state.VolatileBehavior[] sram_volatile>;

        $r2[i0] = r1;

        return;
    }

    public void writeIORegisterByte(int, byte)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1;
        byte b2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        b2 := @parameter1: byte;

        $i1 = staticinvoke <avrora.sim.AtmelInterpreter: int toSRAM(int)>(i0);

        specialinvoke r0.<avrora.sim.AtmelInterpreter: void writeSRAM(boolean,int,byte)>(1, $i1, b2);

        return;
    }

    public byte popByte()
    {
        avrora.sim.AtmelInterpreter r0;
        int $i0, i1;
        byte $b2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        $i0 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: int getSP()>();

        i1 = $i0 + 1;

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void setSP(int)>(i1);

        $b2 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: byte getDataByte(int)>(i1);

        return $b2;
    }

    public void pushByte(byte)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0, $i1;
        byte b2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        b2 := @parameter0: byte;

        i0 = virtualinvoke r0.<avrora.sim.AtmelInterpreter: int getSP()>();

        $i1 = i0 - 1;

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void setSP(int)>($i1);

        virtualinvoke r0.<avrora.sim.AtmelInterpreter: void writeDataByte(int,byte)>(i0, b2);

        return;
    }

    public void setSP(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.RWRegister $r1, $r2;
        byte $b1, $b2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPL_reg>;

        $b1 = staticinvoke <cck.util.Arithmetic: byte low(int)>(i0);

        $r1.<avrora.sim.RWRegister: byte value> = $b1;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPH_reg>;

        $b2 = staticinvoke <cck.util.Arithmetic: byte high(int)>(i0);

        $r2.<avrora.sim.RWRegister: byte value> = $b2;

        return;
    }

    public void setBootPC(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        r0.<avrora.sim.AtmelInterpreter: int bootPC> = i0;

        return;
    }

    public int getInterruptBase()
    {
        avrora.sim.AtmelInterpreter r0;
        int $i0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        $i0 = r0.<avrora.sim.AtmelInterpreter: int interruptBase>;

        return $i0;
    }

    public void setInterruptBase(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        r0.<avrora.sim.AtmelInterpreter: int interruptBase> = i0;

        return;
    }

    public avrora.arch.legacy.LegacyInstr getInstr(int)
    {
        avrora.sim.AtmelInterpreter r0;
        int i0;
        avrora.sim.CodeSegment $r1;
        avrora.arch.legacy.LegacyInstr $r2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;

        $r2 = virtualinvoke $r1.<avrora.sim.CodeSegment: avrora.arch.legacy.LegacyInstr readInstr(int)>(i0);

        return $r2;
    }

    public int getSP()
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.RWRegister $r1, $r2;
        byte b0, b1;
        char $c2;

        r0 := @this: avrora.sim.AtmelInterpreter;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPL_reg>;

        b0 = $r1.<avrora.sim.RWRegister: byte value>;

        $r2 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPH_reg>;

        b1 = $r2.<avrora.sim.RWRegister: byte value>;

        $c2 = staticinvoke <cck.util.Arithmetic: char uword(byte,byte)>(b0, b1);

        return $c2;
    }

    public void enableInterrupts()
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.InterruptTable $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r0.<avrora.sim.AtmelInterpreter: boolean I> = 1;

        r0.<avrora.sim.AtmelInterpreter: boolean innerLoop> = 0;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;

        virtualinvoke $r1.<avrora.sim.InterruptTable: void enableAll()>();

        return;
    }

    public void disableInterrupts()
    {
        avrora.sim.AtmelInterpreter r0;
        avrora.sim.InterruptTable $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        r0.<avrora.sim.AtmelInterpreter: boolean I> = 0;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;

        virtualinvoke $r1.<avrora.sim.InterruptTable: void disableAll()>();

        return;
    }

    protected void commit()
    {
        avrora.sim.AtmelInterpreter r0;
        int $i0, $i1;
        long $l2;
        avrora.sim.clock.MainClock $r1;

        r0 := @this: avrora.sim.AtmelInterpreter;

        $i0 = r0.<avrora.sim.AtmelInterpreter: int nextPC>;

        r0.<avrora.sim.AtmelInterpreter: int pc> = $i0;

        $r1 = r0.<avrora.sim.AtmelInterpreter: avrora.sim.clock.MainClock clock>;

        $i1 = r0.<avrora.sim.AtmelInterpreter: int cyclesConsumed>;

        $l2 = (long) $i1;

        virtualinvoke $r1.<avrora.sim.clock.MainClock: void advance(long)>($l2);

        r0.<avrora.sim.AtmelInterpreter: int cyclesConsumed> = 0;

        return;
    }

    static byte access$000(avrora.sim.AtmelInterpreter, boolean, int)
    {
        avrora.sim.AtmelInterpreter r0;
        boolean z0;
        int i0;
        byte $b1;

        r0 := @parameter0: avrora.sim.AtmelInterpreter;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $b1 = specialinvoke r0.<avrora.sim.AtmelInterpreter: byte readSRAM(boolean,int)>(z0, i0);

        return $b1;
    }

    public static void <clinit>()
    {
        <avrora.sim.AtmelInterpreter: int NUM_REGS> = 32;

        <avrora.sim.AtmelInterpreter: boolean UNINSTRUMENTED> = 0;

        <avrora.sim.AtmelInterpreter: boolean INSTRUMENTED> = 1;

        return;
    }
}
