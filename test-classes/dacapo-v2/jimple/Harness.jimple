public class Harness extends java.lang.Object
{
    private static final java.lang.String HARNESS_PATH;
    private static final java.lang.String HARNESS_CLASS;
    private static final java.lang.String HARNESS_METHOD;
    private static final java.lang.String CALLBACK_CLASSPATH_PROPERTY;

    public void <init>()
    {
        Harness r0;

        r0 := @this: Harness;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.ClassLoader r0;
        java.lang.Thread $r1;
        java.lang.Class r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method r4;
        java.lang.Object[] $r5;
        java.lang.String[] r6;
        boolean $z0;

        r6 := @parameter0: java.lang.String[];

        r0 = staticinvoke <Harness: java.lang.ClassLoader makeHarnessClassLoader()>();

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r0);

        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.dacapo.harness.TestHarness");

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "[Ljava/lang/String;";

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("main", $r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownMethodInvoke(int,java.lang.Object,java.lang.reflect.Method)>(12, null, r4);

        $z0 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if 0 == $z0 goto label1;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall25(java.lang.Object,java.lang.Object[])>(null, $r5);

        goto label2;

     label1:
        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label2:
        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }

    private static java.lang.ClassLoader makeHarnessClassLoader() throws java.net.MalformedURLException, java.net.URISyntaxException
    {
        java.lang.Thread $r0;
        java.lang.ClassLoader r1;
        java.lang.String r2;
        java.net.URL r3, $r10;
        java.net.URL[] $r4, $r9, r14;
        java.net.URLClassLoader $r5;
        java.io.File $r6, $r12;
        boolean $z0;
        java.net.URI $r8, r13;
        java.net.URISyntaxException $r11;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("dacapo.callback.classpath");

        r3 = virtualinvoke r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("harness/");

        if r2 == null goto label4;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r2);

        $z0 = virtualinvoke $r6.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke $r6.<java.io.File: java.io.File getAbsoluteFile()>();

        r13 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>();

        goto label2;

     label1:
        $r8 = new java.net.URI;

        specialinvoke $r8.<java.net.URI: void <init>(java.lang.String)>(r2);

        r13 = $r8;

     label2:
        if r13 != null goto label3;

        $r11 = new java.net.URISyntaxException;

        specialinvoke $r11.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>(r2, "is not a URI nor a directory nor a class file");

        throw $r11;

     label3:
        $r9 = newarray (java.net.URL)[2];

        $r9[0] = r3;

        $r10 = virtualinvoke r13.<java.net.URI: java.net.URL toURL()>();

        $r9[1] = $r10;

        r14 = $r9;

        goto label5;

     label4:
        $r4 = newarray (java.net.URL)[1];

        $r4[0] = r3;

        r14 = $r4;

     label5:
        $r5 = staticinvoke <java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[],java.lang.ClassLoader)>(r14, r1);

        return $r5;
    }

    public static void <clinit>()
    {
        <Harness: java.lang.String CALLBACK_CLASSPATH_PROPERTY> = "dacapo.callback.classpath";

        <Harness: java.lang.String HARNESS_METHOD> = "main";

        <Harness: java.lang.String HARNESS_CLASS> = "org.dacapo.harness.TestHarness";

        <Harness: java.lang.String HARNESS_PATH> = "harness/";

        return;
    }
}
