public class org.dacapo.harness.TestHarness extends java.lang.Object
{
    public static final java.lang.String BUILD_NICKNAME;
    public static final java.lang.String BUILD_VERSION;
    private static java.lang.String BuildNickName;
    private static java.lang.String BuildVersion;
    private final org.dacapo.parser.Config config;
    private static org.dacapo.harness.CommandLineArgs commandLineArgs;

    public static java.lang.String getBuildNickName()
    {
        java.lang.String $r0;

        $r0 = <org.dacapo.harness.TestHarness: java.lang.String BuildNickName>;

        return $r0;
    }

    public static java.lang.String getBuildVersion()
    {
        java.lang.String $r0;

        $r0 = <org.dacapo.harness.TestHarness: java.lang.String BuildVersion>;

        return $r0;
    }

    public static double coeff_of_var(long[])
    {
        long[] r0;
        int $i0, $i1, i3;
        double d0, $d1, $d2, $d3, $d4, d5, $d6, d7, $d8, d9, d10, d11;
        long $l2;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        d0 = (double) $i0;

        d9 = 0.0;

        d10 = 0.0;

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $l2 = r0[i3];

        d7 = (double) $l2;

        d9 = d9 + d7;

        $d8 = d7 * d7;

        d10 = d10 + $d8;

        i3 = i3 + 1;

        goto label1;

     label2:
        d11 = d9 / d0;

        $d1 = 1.0 / d0;

        $d3 = $d1 * d10;

        $d2 = d11 * d11;

        $d4 = $d3 - $d2;

        d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $d6 = d5 / d11;

        return $d6;
    }

    public static void main(java.lang.String[])
    {
        java.util.Locale $r0;
        org.dacapo.harness.CommandLineArgs $r2, $r5, $r7, $r8, $r10, $r14, $r16, $r18, $r19, $r95, $r98, $r102;
        java.lang.String[] r3;
        java.io.File $r4;
        java.lang.String $r6, $r9, r13, $r15, $r31, $r46, $r58, $r73, $r84, r90, r91, r96, $r99, $r100, $r101;
        int $i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Iterable $r11;
        java.lang.Object $r12;
        java.io.FileInputStream $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r20, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r35, $r37, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r51, $r53, $r54, $r55, $r56, $r57, $r63, $r64, $r65, $r66, $r69, $r71, $r72, $r79, $r81, $r82, $r83;
        java.io.PrintStream $r21, $r36, $r50, $r52, $r70, $r75, $r80;
        org.dacapo.parser.Config $r23, $r32, $r33, $r34, $r38, $r47, $r59, $r62, $r97;
        org.dacapo.parser.Config$ThreadModel $r48, $r49, $r60, $r61;
        java.lang.Class $r67;
        java.lang.ClassLoader $r68;
        java.lang.Exception $r74;
        java.lang.RuntimeException $r76, $r85;
        java.io.FileNotFoundException $r78;
        java.util.Iterator r88;
        java.io.InputStream r89;
        org.dacapo.harness.TestHarness $r93;

        r3 := @parameter0: java.lang.String[];

        $r0 = new java.util.Locale;

        specialinvoke $r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("en", "AU");

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($r0);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.awt.headless", "true");

     label01:
        $r2 = new org.dacapo.harness.CommandLineArgs;

        specialinvoke $r2.<org.dacapo.harness.CommandLineArgs: void <init>(java.lang.String[])>(r3);

        <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs> = $r2;

        $r4 = new java.io.File;

        $r5 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r6 = virtualinvoke $r5.<org.dacapo.harness.CommandLineArgs: java.lang.String getScratchDir()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r6);

        staticinvoke <org.dacapo.harness.TestHarness: void makeCleanScratch(java.io.File)>($r4);

        $r7 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        staticinvoke <org.dacapo.harness.Benchmark: void setCommandLineOptions(org.dacapo.harness.CommandLineArgs)>($r7);

     label02:
        $r8 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r9 = virtualinvoke $r8.<org.dacapo.harness.CommandLineArgs: java.lang.String getThreadCount()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        staticinvoke <org.dacapo.parser.Config: void setThreadCountOverride(int)>($i0);

     label03:
        goto label05;

     label04:
        $r85 := @caughtexception;

     label05:
        $r10 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r11 = virtualinvoke $r10.<org.dacapo.harness.CommandLineArgs: java.lang.Iterable benchmarks()>();

        r88 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label29;

        $r12 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        r89 = null;

        $r14 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r15 = virtualinvoke $r14.<org.dacapo.harness.CommandLineArgs: java.lang.String getCnfOverride()>();

        if $r15 != null goto label08;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cnf/");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".cnf");

        r90 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        $r67 = class "Lorg/dacapo/harness/TestHarness;";

        $r68 = virtualinvoke $r67.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r89 = virtualinvoke $r68.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r90);

        if r89 != null goto label07;

        $r70 = <java.lang.System: java.io.PrintStream err>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown benchmark: ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r73);

        staticinvoke <java.lang.System: void exit(int)>(20);

     label07:
        goto label12;

     label08:
        $r16 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        r91 = virtualinvoke $r16.<org.dacapo.harness.CommandLineArgs: java.lang.String getCnfOverride()>();

     label09:
        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.lang.String)>(r91);

        r89 = $r17;

     label10:
        goto label12;

     label11:
        $r78 := @caughtexception;

        $r80 = <java.lang.System: java.io.PrintStream err>;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count not find cnf file: \'");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r91);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r80.<java.io.PrintStream: void println(java.lang.String)>($r84);

        staticinvoke <java.lang.System: void exit(int)>(20);

     label12:
        $r93 = new org.dacapo.harness.TestHarness;

        specialinvoke $r93.<org.dacapo.harness.TestHarness: void <init>(java.io.InputStream)>(r89);

        $r95 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        r96 = virtualinvoke $r95.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        i6 = 0;

        $r97 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        i1 = virtualinvoke $r97.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(r96);

     label13:
        $r98 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r99 = virtualinvoke $r98.<org.dacapo.harness.CommandLineArgs: java.lang.String getThreadFactor()>();

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r99);

        if 0 >= i6 goto label14;

        $r59 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r60 = virtualinvoke $r59.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $r61 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $r60 != $r61 goto label14;

        $r62 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        virtualinvoke $r62.<org.dacapo.parser.Config: void setThreadFactor(java.lang.String,int)>(r96, i6);

     label14:
        goto label16;

     label15:
        $r76 := @caughtexception;

     label16:
        $z0 = specialinvoke $r93.<org.dacapo.harness.TestHarness: boolean isValidSize(java.lang.String)>(r96);

        if $z0 != 0 goto label17;

        $r52 = <java.lang.System: java.io.PrintStream err>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No configuration size, ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r96);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for benchmark ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.String)>($r58);

        goto label28;

     label17:
        if i6 == 0 goto label18;

        $r47 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r48 = virtualinvoke $r47.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $r49 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $r48 == $r49 goto label18;

        $r50 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>("Can only set the thread factor for per_cpu configurable benchmarks");

        goto label28;

     label18:
        $z1 = specialinvoke $r93.<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>(r96);

        if $z1 != 0 goto label22;

        $r34 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i4 = staticinvoke <org.dacapo.parser.Config: int getThreadCountOverride()>();

        if $i4 > 0 goto label19;

        if i6 <= 0 goto label22;

     label19:
        $r36 = <java.lang.System: java.io.PrintStream err>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified number of threads (");

        $r38 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i5 = virtualinvoke $r38.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(r96);

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the range [1,");

        if i1 != 0 goto label20;

        $r100 = "unlimited";

        goto label21;

     label20:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r100 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r46);

        goto label28;

     label22:
        $r18 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $z2 = virtualinvoke $r18.<org.dacapo.harness.CommandLineArgs: boolean getInformation()>();

        if $z2 == 0 goto label23;

        specialinvoke $r93.<org.dacapo.harness.TestHarness: void bmInfo(java.lang.String)>(r96);

        goto label28;

     label23:
        $r19 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $z3 = virtualinvoke $r19.<org.dacapo.harness.CommandLineArgs: boolean getSizes()>();

        if $z3 == 0 goto label24;

        specialinvoke $r93.<org.dacapo.harness.TestHarness: void bmSizes()>();

        goto label28;

     label24:
        $z4 = specialinvoke $r93.<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>(r96);

        if $z4 != 0 goto label27;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The derived number of threads (");

        $r23 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i2 = virtualinvoke $r23.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(r96);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the range [1,");

        if i1 != 0 goto label25;

        $r101 = "unlimited";

        goto label26;

     label25:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r101 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

     label26:
        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; rescaling to match thread limit.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r31);

        $r32 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r33 = $r93.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i3 = virtualinvoke $r33.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(r96);

        staticinvoke <org.dacapo.parser.Config: void setThreadCountOverride(int)>($i3);

     label27:
        $r102 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $z6 = virtualinvoke $r102.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        specialinvoke $r93.<org.dacapo.harness.TestHarness: void dump(boolean)>($z6);

        staticinvoke <org.dacapo.harness.TestHarness: void runBenchmark(java.io.File,java.lang.String,org.dacapo.harness.TestHarness)>($r4, r13, $r93);

     label28:
        goto label06;

     label29:
        goto label31;

     label30:
        $r74 := @caughtexception;

        $r75 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r75.<java.io.PrintStream: void println(java.lang.Object)>($r74);

        virtualinvoke $r74.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label31:
        return;

        catch java.lang.RuntimeException from label02 to label03 with label04;
        catch java.io.FileNotFoundException from label09 to label10 with label11;
        catch java.lang.RuntimeException from label13 to label14 with label15;
        catch java.lang.Exception from label01 to label29 with label30;
    }

    public static void makeCleanScratch(java.io.File)
    {
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.dacapo.harness.TestHarness: void rmdir(java.io.File)>(r0);

        virtualinvoke r0.<java.io.File: boolean mkdir()>();

        return;
    }

    private boolean isValidSize(java.lang.String)
    {
        java.lang.String r0;
        org.dacapo.harness.TestHarness r1;
        org.dacapo.parser.Config $r2;
        java.util.Collection $r3;
        boolean $z0, $z1;

        r1 := @this: org.dacapo.harness.TestHarness;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = r1.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r3 = virtualinvoke $r2.<org.dacapo.parser.Config: java.util.Collection getSizes()>();

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean isValidThreadCount(java.lang.String)
    {
        org.dacapo.harness.TestHarness r0;
        java.lang.String r1;
        org.dacapo.parser.Config $r2, $r3, $r4;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.dacapo.harness.TestHarness;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i0 = virtualinvoke $r2.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        $r3 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i1 = virtualinvoke $r3.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(r1);

        $r4 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $i2 = virtualinvoke $r4.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(r1);

        if $i1 > $i2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static void runBenchmark(java.io.File, java.lang.String, org.dacapo.harness.TestHarness) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.Exception
    {
        org.dacapo.harness.TestHarness r0;
        org.dacapo.harness.CommandLineArgs $r1, $r5, $r14, $r17, $r25, $r29;
        org.dacapo.parser.Config $r2, $r10, $r16;
        java.io.PrintStream $r3, $r20;
        java.lang.String $r4, $r18, r22, $r26, $r28;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z3;
        java.lang.Class $r6;
        java.lang.Class[] $r7;
        java.lang.reflect.Constructor r8;
        java.lang.Object[] $r9;
        java.io.File r11;
        java.lang.Object $r12, $r0;
        org.dacapo.harness.Benchmark r13;
        org.dacapo.harness.Callback r15;
        java.lang.StringBuilder $r19, $r21, $r23, $r24, $r27;

        r11 := @parameter0: java.io.File;

        r22 := @parameter1: java.lang.String;

        r0 := @parameter2: org.dacapo.harness.TestHarness;

        $r2 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r1 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r4 = virtualinvoke $r1.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $r5 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $z0 = virtualinvoke $r5.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        virtualinvoke $r2.<org.dacapo.parser.Config: void printThreadModel(java.io.PrintStream,java.lang.String,boolean)>($r3, $r4, $z0);

        $r6 = specialinvoke r0.<org.dacapo.harness.TestHarness: java.lang.Class findClass()>();

        $r7 = newarray (java.lang.Class)[2];

        $r7[0] = class "Lorg/dacapo/parser/Config;";

        $r7[1] = class "Ljava/io/File;";

        r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r7);

        $r9 = newarray (java.lang.Object)[2];

        $r10 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r9[0] = $r10;

        $r9[1] = r11;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownConstructorNewInstance(int,java.lang.reflect.Constructor)>(9, r8);

        $z3 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if 0 == $z3 goto label1;

        $r0 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall21(java.lang.Object[])>($r9);

        $r12 = $r0;

        goto label2;

     label1:
        $r12 = virtualinvoke r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

     label2:
        r13 = (org.dacapo.harness.Benchmark) $r12;

        z3 = 1;

        $r14 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        r15 = virtualinvoke $r14.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback getCallback()>();

        $r16 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        virtualinvoke r15.<org.dacapo.harness.Callback: void init(org.dacapo.parser.Config)>($r16);

     label3:
        $r17 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r18 = virtualinvoke $r17.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $z1 = virtualinvoke r13.<org.dacapo.harness.Benchmark: boolean run(org.dacapo.harness.Callback,java.lang.String)>(r15, $r18);

        if $z1 == 0 goto label4;

        if z3 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        z3 = $z4;

        $z5 = virtualinvoke r15.<org.dacapo.harness.Callback: boolean runAgain()>();

        if $z5 != 0 goto label3;

        virtualinvoke r13.<org.dacapo.harness.Benchmark: void cleanup()>();

        if $z4 != 0 goto label6;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation FAILED for ");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r25 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r26 = virtualinvoke $r25.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r29 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $z2 = virtualinvoke $r29.<org.dacapo.harness.CommandLineArgs: boolean getIgnoreValidation()>();

        if $z2 != 0 goto label6;

        staticinvoke <java.lang.System: void exit(int)>(-2);

     label6:
        return;
    }

    private static void rmdir(java.io.File)
    {
        java.io.File r0, $r2;
        java.lang.String[] r1;
        int $i0, i1;
        java.lang.String $r3, $r8, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.io.PrintStream $r6;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        if r1 == null goto label4;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        $r2 = new java.io.File;

        $r3 = r1[i1];

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r3);

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        staticinvoke <org.dacapo.harness.TestHarness: void rmdir(java.io.File)>($r2);

     label2:
        $z1 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label3;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete ");

        $r8 = r1[i1];

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private void bmInfo(java.lang.String)
    {
        org.dacapo.harness.TestHarness r0;
        java.lang.String r1;
        java.io.PrintStream $r2;
        org.dacapo.parser.Config $r3;

        r0 := @this: org.dacapo.harness.TestHarness;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String)>($r2, r1);

        return;
    }

    private void bmSizes()
    {
        org.dacapo.harness.TestHarness r0;
        java.io.PrintStream $r1;
        org.dacapo.parser.Config $r2;

        r0 := @this: org.dacapo.harness.TestHarness;

        $r2 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<org.dacapo.parser.Config: void describeSizes(java.io.PrintStream)>($r1);

        return;
    }

    private void dump(boolean)
    {
        boolean z0;
        java.lang.StringBuilder $r0, $r2, $r6;
        java.io.PrintStream $r1, $r8, $r11;
        org.dacapo.harness.TestHarness r3;
        org.dacapo.parser.Config $r4, $r10;
        java.lang.String $r5, $r7, $r12;
        org.dacapo.harness.CommandLineArgs $r9;

        r3 := @this: org.dacapo.harness.TestHarness;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class name: ");

        $r4 = r3.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r5 = $r4.<org.dacapo.parser.Config: java.lang.String className>;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Configurations:");

        $r10 = r3.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r9 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $r12 = virtualinvoke $r9.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        virtualinvoke $r10.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String)>($r11, $r12);

     label1:
        return;
    }

    private void <init>(java.io.InputStream)
    {
        org.dacapo.harness.TestHarness r0;
        java.lang.Class $r1;
        java.security.ProtectionDomain $r2;
        java.security.CodeSource $r3;
        java.net.URL $r4;
        java.util.jar.JarFile $r5;
        java.lang.String $r6, $r7, r13, r16, r21;
        java.util.jar.Manifest r9;
        java.util.jar.Attributes r10;
        java.util.jar.Attributes$Name $r11, $r14;
        java.lang.Object $r12, $r15;
        java.io.InputStream r17;
        org.dacapo.parser.Config $r18, $r19;
        java.lang.Exception $r20;

        r0 := @this: org.dacapo.harness.TestHarness;

        r17 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r1 = class "Lorg/dacapo/harness/TestHarness;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r3 = virtualinvoke $r2.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        $r4 = virtualinvoke $r3.<java.security.CodeSource: java.net.URL getLocation()>();

        r21 = virtualinvoke $r4.<java.net.URL: java.lang.String getFile()>();

        $r5 = new java.util.jar.JarFile;

        $r6 = virtualinvoke r21.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("!/harness", "");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file:", "");

        specialinvoke $r5.<java.util.jar.JarFile: void <init>(java.lang.String)>($r7);

        r9 = virtualinvoke $r5.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();

        r10 = virtualinvoke r9.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        $r11 = new java.util.jar.Attributes$Name;

        specialinvoke $r11.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>("Specification-Version");

        $r12 = virtualinvoke r10.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($r11);

        r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = new java.util.jar.Attributes$Name;

        specialinvoke $r14.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>("Implementation-Version");

        $r15 = virtualinvoke r10.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($r14);

        r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        <org.dacapo.harness.TestHarness: java.lang.String BuildNickName> = r13;

        <org.dacapo.harness.TestHarness: java.lang.String BuildVersion> = r16;

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        <org.dacapo.harness.TestHarness: java.lang.String BuildNickName> = "Unknown";

        <org.dacapo.harness.TestHarness: java.lang.String BuildVersion> = "unknown";

     label4:
        $r18 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.InputStream)>(r17);

        r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config> = $r18;

        $r19 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        if $r19 != null goto label5;

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.Class findClass()
    {
        org.dacapo.harness.TestHarness r0;
        org.dacapo.parser.Config $r1;
        java.lang.String $r2;
        java.lang.Class $r3, $r0;
        java.lang.ClassNotFoundException $r4;
        java.io.PrintStream $r6;
        boolean $z0;

        r0 := @this: org.dacapo.harness.TestHarness;

     label1:
        $r1 = r0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $r2 = $r1.<org.dacapo.parser.Config: java.lang.String className>;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(2, $r2);

        $z0 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if 0 == $z0 goto label2;

        $r0 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall2()>();

        $r3 = $r0;

        goto label3;

     label2:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r4);

        virtualinvoke $r4.<java.lang.ClassNotFoundException: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(-1);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
    }

    public static void <clinit>()
    {
        <org.dacapo.harness.TestHarness: java.lang.String BUILD_VERSION> = "Implementation-Version";

        <org.dacapo.harness.TestHarness: java.lang.String BUILD_NICKNAME> = "Specification-Version";

        return;
    }
}
