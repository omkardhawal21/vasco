public class avrora.sim.radio.CC1000Radio$LockRegister extends avrora.sim.radio.CC1000Radio$RadioRegister
{
    static final int LOCK_NORMAL;
    static final int LOCK_CONTINUOUS;
    static final int LOCK_INSTANT;
    static final int ALARM_H;
    static final int ALARM_L;
    static final int CAL_COMPLETE;
    static final int IF_OUT;
    static final int REFERENCE_DIVIDER;
    static final int TX_DPB;
    static final int MANCHESTER_VIOLATION;
    static final int RX_PDB;
    static final int LOCK_AVG_FILTER;
    static final int N_DIVIDER;
    static final int F_COMP;
    final java.lang.String[] LOCK_SELECT;
    int lockSelect;
    boolean pllLockLength;
    int setsLockThreshold;
    int resetLockThreshold;
    boolean lockInstant;
    boolean lockContinuous;
    final avrora.sim.radio.CC1000Radio this$0;

    void <init>(avrora.sim.radio.CC1000Radio)
    {
        avrora.sim.radio.CC1000Radio$LockRegister r0;
        avrora.sim.radio.CC1000Radio r1;
        java.lang.String[] $r2;

        r0 := @this: avrora.sim.radio.CC1000Radio$LockRegister;

        r1 := @parameter0: avrora.sim.radio.CC1000Radio;

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: avrora.sim.radio.CC1000Radio this$0> = r1;

        specialinvoke r0.<avrora.sim.radio.CC1000Radio$RadioRegister: void <init>(avrora.sim.radio.CC1000Radio,java.lang.String,byte)>(r1, "LOCK", 0);

        $r2 = newarray (java.lang.String)[16];

        $r2[0] = "LOCK NORMAL";

        $r2[1] = "LOCK CONTINUOUS";

        $r2[2] = "LOCK INSTANT";

        $r2[3] = "ALARM HIGH";

        $r2[4] = "ALARM LOW";

        $r2[5] = "CAL COMPLETE";

        $r2[6] = "IF OUT";

        $r2[7] = "REFERENCE DIVIDER";

        $r2[8] = "TX DPB";

        $r2[9] = "MANCHESTER VIOLATION";

        $r2[10] = "RX PDB";

        $r2[11] = "NOT DEFINED (11)";

        $r2[12] = "NOT DEFINED (12)";

        $r2[13] = "LOCK AVG FILTER";

        $r2[14] = "N DIVIDER";

        $r2[15] = "F COMP";

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: java.lang.String[] LOCK_SELECT> = $r2;

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: int setsLockThreshold> = 127;

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: int resetLockThreshold> = 111;

        return;
    }

    protected void decode(byte)
    {
        avrora.sim.radio.CC1000Radio$LockRegister r0;
        byte b0;
        int $i1, $i2, $i3, i4, $i5, $i6;
        int[] $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: avrora.sim.radio.CC1000Radio$LockRegister;

        b0 := @parameter0: byte;

        $i1 = b0 & 240;

        $i2 = $i1 >> 4;

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: int lockSelect> = $i2;

        $i3 = b0 & 12;

        i4 = $i3 >> 2;

        $r1 = <avrora.sim.radio.CC1000Radio: int[] SETS_LOCK_THRESHOLD>;

        $i5 = $r1[i4];

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: int setsLockThreshold> = $i5;

        $r2 = <avrora.sim.radio.CC1000Radio: int[] RESET_LOCK_THRESHOLD>;

        $i6 = $r2[i4];

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: int resetLockThreshold> = $i6;

        $z0 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>(b0, 2);

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: boolean pllLockLength> = $z0;

        $z1 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>(b0, 1);

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: boolean lockInstant> = $z1;

        $z2 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>(b0, 0);

        r0.<avrora.sim.radio.CC1000Radio$LockRegister: boolean lockContinuous> = $z2;

        return;
    }

    protected void printStatus()
    {
        java.lang.StringBuffer $r0;
        avrora.sim.radio.CC1000Radio$LockRegister r3;
        int $i0, $i1, $i2;
        java.lang.String[] $r4;
        java.lang.String $r5, $r17;
        boolean $z0, $z1;
        char $c3, $c4;
        avrora.sim.radio.CC1000Radio $r15;
        avrora.sim.output.SimPrinter $r16;

        r3 := @this: avrora.sim.radio.CC1000Radio$LockRegister;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(100);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CC1000[LOCK]: lock select: ");

        $r4 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: java.lang.String[] LOCK_SELECT>;

        $i0 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: int lockSelect>;

        $r5 = $r4[$i0];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", set thr: ");

        $i1 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: int setsLockThreshold>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", reset thr: ");

        $i2 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: int resetLockThreshold>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", inst: ");

        $z0 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: boolean lockInstant>;

        $c3 = staticinvoke <cck.text.StringUtil: char toBit(boolean)>($z0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", contin: ");

        $z1 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: boolean lockContinuous>;

        $c4 = staticinvoke <cck.text.StringUtil: char toBit(boolean)>($z1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $r15 = r3.<avrora.sim.radio.CC1000Radio$LockRegister: avrora.sim.radio.CC1000Radio this$0>;

        $r16 = $r15.<avrora.sim.radio.CC1000Radio: avrora.sim.output.SimPrinter radioPrinter>;

        $r17 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($r17);

        return;
    }

    public byte read()
    {
        avrora.sim.radio.CC1000Radio$LockRegister r0;
        byte $b0, $b2;
        int $i1;

        r0 := @this: avrora.sim.radio.CC1000Radio$LockRegister;

        $b0 = r0.<avrora.sim.radio.CC1000Radio$LockRegister: byte value>;

        $i1 = $b0 & 3;

        $b2 = (byte) $i1;

        return $b2;
    }

    public static void <clinit>()
    {
        <avrora.sim.radio.CC1000Radio$LockRegister: int F_COMP> = 15;

        <avrora.sim.radio.CC1000Radio$LockRegister: int N_DIVIDER> = 14;

        <avrora.sim.radio.CC1000Radio$LockRegister: int LOCK_AVG_FILTER> = 13;

        <avrora.sim.radio.CC1000Radio$LockRegister: int RX_PDB> = 10;

        <avrora.sim.radio.CC1000Radio$LockRegister: int MANCHESTER_VIOLATION> = 9;

        <avrora.sim.radio.CC1000Radio$LockRegister: int TX_DPB> = 8;

        <avrora.sim.radio.CC1000Radio$LockRegister: int REFERENCE_DIVIDER> = 7;

        <avrora.sim.radio.CC1000Radio$LockRegister: int IF_OUT> = 6;

        <avrora.sim.radio.CC1000Radio$LockRegister: int CAL_COMPLETE> = 5;

        <avrora.sim.radio.CC1000Radio$LockRegister: int ALARM_L> = 4;

        <avrora.sim.radio.CC1000Radio$LockRegister: int ALARM_H> = 3;

        <avrora.sim.radio.CC1000Radio$LockRegister: int LOCK_INSTANT> = 2;

        <avrora.sim.radio.CC1000Radio$LockRegister: int LOCK_CONTINUOUS> = 1;

        <avrora.sim.radio.CC1000Radio$LockRegister: int LOCK_NORMAL> = 0;

        return;
    }
}
