public class cck.util.VersionTag extends java.lang.Object
{
    private static final java.util.HashMap tags;
    public final java.lang.String module;
    public final java.lang.String prefix;
    public final int major;
    public final int minor;
    public final int commit;
    public final java.lang.String string;
    public final java.lang.String suffix;

    public static cck.util.VersionTag getVersionTag(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        cck.util.VersionTag $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <cck.util.VersionTag: java.util.HashMap tags>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (cck.util.VersionTag) $r2;

        return $r3;
    }

    public void <init>(java.lang.String, java.lang.String, int, int, int)
    {
        cck.util.VersionTag r0;
        java.lang.String r1, r2, $r4, $r10, $r12, $r14, $r20, $r22;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r13, $r15, $r16, $r17, $r18, $r19, $r21;
        java.util.HashMap $r23;

        r0 := @this: cck.util.VersionTag;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cck.util.VersionTag: java.lang.String module> = r1;

        r0.<cck.util.VersionTag: java.lang.String prefix> = r2;

        r0.<cck.util.VersionTag: int major> = i0;

        r0.<cck.util.VersionTag: int minor> = i1;

        r0.<cck.util.VersionTag: int commit> = i2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = specialinvoke r0.<cck.util.VersionTag: java.lang.String prefixString(boolean,char)>(0, 32);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $i3 = r0.<cck.util.VersionTag: int major>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i4 = r0.<cck.util.VersionTag: int minor>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r10 = specialinvoke r0.<cck.util.VersionTag: java.lang.String commitNumber()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<cck.util.VersionTag: java.lang.String string> = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = specialinvoke r0.<cck.util.VersionTag: java.lang.String prefixString(boolean,char)>(1, 45);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $i5 = r0.<cck.util.VersionTag: int major>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i6 = r0.<cck.util.VersionTag: int minor>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r20 = specialinvoke r0.<cck.util.VersionTag: java.lang.String commitNumber()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<cck.util.VersionTag: java.lang.String suffix> = $r22;

        $r23 = <cck.util.VersionTag: java.util.HashMap tags>;

        virtualinvoke $r23.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

        return;
    }

    public java.lang.String toString()
    {
        cck.util.VersionTag r0;
        java.lang.String $r1;

        r0 := @this: cck.util.VersionTag;

        $r1 = r0.<cck.util.VersionTag: java.lang.String string>;

        return $r1;
    }

    private java.lang.String prefixString(boolean, char)
    {
        cck.util.VersionTag r0;
        java.lang.String $r1, $r5, $r6, $r7;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        boolean z0;
        char c1;

        r0 := @this: cck.util.VersionTag;

        z0 := @parameter0: boolean;

        c1 := @parameter1: char;

        $r1 = r0.<cck.util.VersionTag: java.lang.String prefix>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label2;

        $r6 = r0.<cck.util.VersionTag: java.lang.String prefix>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        goto label3;

     label2:
        $r7 = r0.<cck.util.VersionTag: java.lang.String prefix>;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private java.lang.String commitNumber()
    {
        cck.util.VersionTag r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, $r5, $r9;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8;

        r0 := @this: cck.util.VersionTag;

        $i0 = r0.<cck.util.VersionTag: int commit>;

        if $i0 >= 10 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00");

        $i4 = r0.<cck.util.VersionTag: int commit>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        $i1 = r0.<cck.util.VersionTag: int commit>;

        if $i1 >= 100 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $i3 = r0.<cck.util.VersionTag: int commit>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label2:
        $i2 = r0.<cck.util.VersionTag: int commit>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        return $r1;
    }

    public boolean isStable()
    {
        cck.util.VersionTag r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: cck.util.VersionTag;

        $i0 = r0.<cck.util.VersionTag: int minor>;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <cck.util.VersionTag: java.util.HashMap tags> = $r0;

        return;
    }
}
