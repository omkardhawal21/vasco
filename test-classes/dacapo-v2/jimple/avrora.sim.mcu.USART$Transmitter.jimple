public class avrora.sim.mcu.USART$Transmitter extends java.lang.Object
{
    boolean transmitting;
    avrora.sim.mcu.USART$Transmitter$Transmit transmit;
    final avrora.sim.mcu.USART this$0;

    protected void <init>(avrora.sim.mcu.USART)
    {
        avrora.sim.mcu.USART$Transmitter r0;
        avrora.sim.mcu.USART r1;
        avrora.sim.mcu.USART$Transmitter$Transmit $r2;

        r0 := @this: avrora.sim.mcu.USART$Transmitter;

        r1 := @parameter0: avrora.sim.mcu.USART;

        r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new avrora.sim.mcu.USART$Transmitter$Transmit;

        specialinvoke $r2.<avrora.sim.mcu.USART$Transmitter$Transmit: void <init>(avrora.sim.mcu.USART$Transmitter)>(r0);

        r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART$Transmitter$Transmit transmit> = $r2;

        return;
    }

    protected void enableTransmit()
    {
        avrora.sim.mcu.USART$Transmitter r0;
        boolean $z0, $z1;
        avrora.sim.mcu.USART$Frame $r1;
        avrora.sim.mcu.USART $r2, $r6, $r8, $r10, $r13, $r14, $r18, $r20;
        avrora.sim.mcu.USART$DataRegister $r3;
        avrora.sim.RWRegister $r4;
        avrora.sim.mcu.USART$Transmitter$Transmit $r5, $r17;
        byte $b0;
        avrora.sim.mcu.USART$ControlRegisterB $r7;
        avrora.sim.mcu.USART$ControlRegisterC $r9, $r15, $r19;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        avrora.sim.mcu.USART$ControlRegisterA $r11;
        avrora.sim.mcu.ATMegaFamily$InterruptFlag $r12;
        avrora.sim.clock.Clock $r16;
        long $l8;

        r0 := @this: avrora.sim.mcu.USART$Transmitter;

        $z0 = r0.<avrora.sim.mcu.USART$Transmitter: boolean transmitting>;

        if $z0 != 0 goto label1;

        $r5 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART$Transmitter$Transmit transmit>;

        $r1 = new avrora.sim.mcu.USART$Frame;

        $r2 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r3 = $r2.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$DataRegister UDRn_reg>;

        $r4 = $r3.<avrora.sim.mcu.USART$DataRegister: avrora.sim.RWRegister transmitRegister>;

        $b0 = virtualinvoke $r4.<avrora.sim.RWRegister: byte read()>();

        $r6 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r7 = $r6.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterB UCSRnB_reg>;

        $z1 = virtualinvoke $r7.<avrora.sim.mcu.USART$ControlRegisterB: boolean readBit(int)>(0);

        $r8 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r9 = $r8.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterC UCSRnC_reg>;

        $i1 = virtualinvoke $r9.<avrora.sim.mcu.USART$ControlRegisterC: int getFrameSize()>();

        specialinvoke $r1.<avrora.sim.mcu.USART$Frame: void <init>(byte,boolean,int)>($b0, $z1, $i1);

        $r5.<avrora.sim.mcu.USART$Transmitter$Transmit: avrora.sim.mcu.USART$Frame frame> = $r1;

        $r10 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r11 = $r10.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterA UCSRnA_reg>;

        $r12 = $r11.<avrora.sim.mcu.USART$ControlRegisterA: avrora.sim.mcu.ATMegaFamily$InterruptFlag UDRE_flag>;

        virtualinvoke $r12.<avrora.sim.mcu.ATMegaFamily$InterruptFlag: void flag(boolean)>(1);

        r0.<avrora.sim.mcu.USART$Transmitter: boolean transmitting> = 1;

        $r13 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r16 = $r13.<avrora.sim.mcu.USART: avrora.sim.clock.Clock mainClock>;

        $r17 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART$Transmitter$Transmit transmit>;

        $r14 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r15 = $r14.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterC UCSRnC_reg>;

        $i2 = virtualinvoke $r15.<avrora.sim.mcu.USART$ControlRegisterC: int getFrameSize()>();

        $i3 = 1 + $i2;

        $r18 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $r19 = $r18.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterC UCSRnC_reg>;

        $i4 = virtualinvoke $r19.<avrora.sim.mcu.USART$ControlRegisterC: int getStopBits()>();

        $i6 = $i3 + $i4;

        $r20 = r0.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;

        $i5 = $r20.<avrora.sim.mcu.USART: int period>;

        $i7 = $i6 * $i5;

        $l8 = (long) $i7;

        virtualinvoke $r16.<avrora.sim.clock.Clock: void insertEvent(avrora.sim.Simulator$Event,long)>($r17, $l8);

     label1:
        return;
    }
}
