public class avrora.sim.FiniteStateMachine extends java.lang.Object
{
    public static final int IN_TRANSITION;
    protected final int numStates;
    protected final int startState;
    protected final avrora.sim.clock.Clock clock;
    protected final avrora.sim.FiniteStateMachine$TransitionEvent transEvent;
    protected final avrora.sim.util.MulticastFSMProbe globalProbe;
    protected avrora.sim.FiniteStateMachine$State[] states;
    protected int curState;

    private static void fireBefore(avrora.sim.util.MulticastFSMProbe, int, int)
    {
        avrora.sim.util.MulticastFSMProbe r0;
        boolean $z0;
        int i0, i1;

        r0 := @parameter0: avrora.sim.util.MulticastFSMProbe;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<avrora.sim.util.MulticastFSMProbe: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<avrora.sim.util.MulticastFSMProbe: void fireBeforeTransition(int,int)>(i0, i1);

     label1:
        return;
    }

    private static void fireAfter(avrora.sim.util.MulticastFSMProbe, int, int)
    {
        avrora.sim.util.MulticastFSMProbe r0;
        boolean $z0;
        int i0, i1;

        r0 := @parameter0: avrora.sim.util.MulticastFSMProbe;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<avrora.sim.util.MulticastFSMProbe: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<avrora.sim.util.MulticastFSMProbe: void fireAfterTransition(int,int)>(i0, i1);

     label1:
        return;
    }

    public void <init>(avrora.sim.clock.Clock, int, java.lang.String[], int)
    {
        avrora.sim.FiniteStateMachine r0;
        avrora.sim.FiniteStateMachine$TransitionEvent $r1;
        avrora.sim.util.MulticastFSMProbe $r2;
        avrora.sim.clock.Clock r3;
        int i0, $i1, $i2, i3, $i4;
        java.lang.String[] r4;
        avrora.sim.FiniteStateMachine$State[] $r5;
        int[][] r6;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r3 := @parameter0: avrora.sim.clock.Clock;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String[];

        i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new avrora.sim.FiniteStateMachine$TransitionEvent;

        specialinvoke $r1.<avrora.sim.FiniteStateMachine$TransitionEvent: void <init>(avrora.sim.FiniteStateMachine)>(r0);

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent> = $r1;

        $r2 = new avrora.sim.util.MulticastFSMProbe;

        specialinvoke $r2.<avrora.sim.util.MulticastFSMProbe: void <init>()>();

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe> = $r2;

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock> = r3;

        r0.<avrora.sim.FiniteStateMachine: int startState> = i0;

        r0.<avrora.sim.FiniteStateMachine: int curState> = i0;

        $i1 = lengthof r4;

        r0.<avrora.sim.FiniteStateMachine: int numStates> = $i1;

        $i2 = r0.<avrora.sim.FiniteStateMachine: int numStates>;

        $r5 = newarray (avrora.sim.FiniteStateMachine$State)[$i2];

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states> = $r5;

        $i4 = r0.<avrora.sim.FiniteStateMachine: int numStates>;

        r6 = staticinvoke <avrora.sim.FiniteStateMachine: int[][] buildUniformTTM(int,int)>($i4, i3);

        specialinvoke r0.<avrora.sim.FiniteStateMachine: void buildStates(java.lang.String[],int[][])>(r4, r6);

        return;
    }

    public void <init>(avrora.sim.clock.Clock, int, java.lang.String[], int[][])
    {
        avrora.sim.FiniteStateMachine r0;
        avrora.sim.FiniteStateMachine$TransitionEvent $r1;
        avrora.sim.util.MulticastFSMProbe $r2;
        avrora.sim.clock.Clock r3;
        int i0, $i1, $i2;
        java.lang.String[] r4;
        avrora.sim.FiniteStateMachine$State[] $r5;
        int[][] r6;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r3 := @parameter0: avrora.sim.clock.Clock;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String[];

        r6 := @parameter3: int[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new avrora.sim.FiniteStateMachine$TransitionEvent;

        specialinvoke $r1.<avrora.sim.FiniteStateMachine$TransitionEvent: void <init>(avrora.sim.FiniteStateMachine)>(r0);

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent> = $r1;

        $r2 = new avrora.sim.util.MulticastFSMProbe;

        specialinvoke $r2.<avrora.sim.util.MulticastFSMProbe: void <init>()>();

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe> = $r2;

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock> = r3;

        r0.<avrora.sim.FiniteStateMachine: int startState> = i0;

        r0.<avrora.sim.FiniteStateMachine: int curState> = i0;

        $i1 = lengthof r4;

        r0.<avrora.sim.FiniteStateMachine: int numStates> = $i1;

        $i2 = r0.<avrora.sim.FiniteStateMachine: int numStates>;

        $r5 = newarray (avrora.sim.FiniteStateMachine$State)[$i2];

        r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states> = $r5;

        specialinvoke r0.<avrora.sim.FiniteStateMachine: void buildStates(java.lang.String[],int[][])>(r4, r6);

        return;
    }

    private void buildStates(java.lang.String[], int[][])
    {
        avrora.sim.FiniteStateMachine r0;
        int $i0, i1;
        avrora.sim.FiniteStateMachine$State $r1;
        java.lang.String[] r2;
        int[][] r3;
        int[] $r4;
        java.lang.String $r5;
        avrora.sim.FiniteStateMachine$State[] $r6;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r2 := @parameter0: java.lang.String[];

        r3 := @parameter1: int[][];

        i1 = 0;

     label1:
        $i0 = r0.<avrora.sim.FiniteStateMachine: int numStates>;

        if i1 >= $i0 goto label2;

        $r6 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r1 = new avrora.sim.FiniteStateMachine$State;

        $r5 = r2[i1];

        $r4 = r3[i1];

        specialinvoke $r1.<avrora.sim.FiniteStateMachine$State: void <init>(avrora.sim.FiniteStateMachine,java.lang.String,int[])>(r0, $r5, $r4);

        $r6[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void insertProbe(avrora.sim.FiniteStateMachine$Probe)
    {
        avrora.sim.FiniteStateMachine r0;
        avrora.sim.FiniteStateMachine$Probe r1;
        avrora.sim.util.MulticastFSMProbe $r2;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r1 := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        $r2 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        virtualinvoke $r2.<avrora.sim.util.MulticastFSMProbe: void add(java.lang.Object)>(r1);

        return;
    }

    public void removeProbe(avrora.sim.FiniteStateMachine$Probe)
    {
        avrora.sim.FiniteStateMachine r0;
        avrora.sim.FiniteStateMachine$Probe r1;
        avrora.sim.util.MulticastFSMProbe $r2;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r1 := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        $r2 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        virtualinvoke $r2.<avrora.sim.util.MulticastFSMProbe: void remove(java.lang.Object)>(r1);

        return;
    }

    public void insertProbe(avrora.sim.FiniteStateMachine$Probe, int)
    {
        avrora.sim.FiniteStateMachine r0;
        int i0;
        avrora.sim.FiniteStateMachine$State[] $r1;
        avrora.sim.FiniteStateMachine$State $r2;
        avrora.sim.FiniteStateMachine$Probe r3;
        avrora.sim.util.MulticastFSMProbe $r4;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r3 := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        i0 := @parameter1: int;

        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r2 = $r1[i0];

        $r4 = $r2.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        virtualinvoke $r4.<avrora.sim.util.MulticastFSMProbe: void add(java.lang.Object)>(r3);

        return;
    }

    public void removeProbe(avrora.sim.FiniteStateMachine$Probe, int)
    {
        avrora.sim.FiniteStateMachine r0;
        int i0;
        avrora.sim.FiniteStateMachine$State[] $r1;
        avrora.sim.FiniteStateMachine$State $r2;
        avrora.sim.FiniteStateMachine$Probe r3;
        avrora.sim.util.MulticastFSMProbe $r4;

        r0 := @this: avrora.sim.FiniteStateMachine;

        r3 := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        i0 := @parameter1: int;

        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r2 = $r1[i0];

        $r4 = $r2.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        virtualinvoke $r4.<avrora.sim.util.MulticastFSMProbe: void remove(java.lang.Object)>(r3);

        return;
    }

    public int getNumberOfStates()
    {
        avrora.sim.FiniteStateMachine r0;
        int $i0;

        r0 := @this: avrora.sim.FiniteStateMachine;

        $i0 = r0.<avrora.sim.FiniteStateMachine: int numStates>;

        return $i0;
    }

    public int getStartState()
    {
        avrora.sim.FiniteStateMachine r0;
        int $i0;

        r0 := @this: avrora.sim.FiniteStateMachine;

        $i0 = r0.<avrora.sim.FiniteStateMachine: int startState>;

        return $i0;
    }

    public int getCurrentState()
    {
        avrora.sim.FiniteStateMachine r0;
        int $i0;

        r0 := @this: avrora.sim.FiniteStateMachine;

        $i0 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        return $i0;
    }

    public void transition(int)
    {
        avrora.sim.FiniteStateMachine r0;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i10, $i11, $i12, $i13;
        avrora.sim.FiniteStateMachine$State[] $r1, $r5, $r8, $r15, $r18;
        avrora.sim.FiniteStateMachine$State $r2, $r6, $r9, $r16, $r19;
        int[] $r3;
        avrora.sim.util.MulticastFSMProbe $r4, $r7, $r10, $r17, $r20, $r21;
        avrora.sim.FiniteStateMachine$TransitionEvent $r11, $r12, $r13, $r33, $r36;
        long $l9;
        avrora.sim.clock.Clock $r14;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r34, $r35, $r37;
        java.lang.String $r27, $r38;
        cck.util.Util$InternalError $r28, $r39;

        r0 := @this: avrora.sim.FiniteStateMachine;

        i2 := @parameter0: int;

        $i0 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        if $i0 != -1 goto label1;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot transition to state ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while in transition: ");

        $r33 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $i12 = $r33.<avrora.sim.FiniteStateMachine$TransitionEvent: int oldState>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r36 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $i13 = $r36.<avrora.sim.FiniteStateMachine$TransitionEvent: int newState>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r38);

        throw $r39;

     label1:
        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $i1 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        $r2 = $r1[$i1];

        $r3 = $r2.<avrora.sim.FiniteStateMachine$State: int[] transition_time>;

        i3 = $r3[i2];

        if i3 >= 0 goto label2;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot transition from state ");

        $i11 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r27);

        throw $r28;

     label2:
        $r4 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        $i4 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireBefore(avrora.sim.util.MulticastFSMProbe,int,int)>($r4, $i4, i2);

        $r5 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $i5 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        $r6 = $r5[$i5];

        $r7 = $r6.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        $i6 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireBefore(avrora.sim.util.MulticastFSMProbe,int,int)>($r7, $i6, i2);

        $r8 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r9 = $r8[i2];

        $r10 = $r9.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        $i7 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireBefore(avrora.sim.util.MulticastFSMProbe,int,int)>($r10, $i7, i2);

        if i3 != 0 goto label3;

        i10 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        r0.<avrora.sim.FiniteStateMachine: int curState> = i2;

        $r15 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r16 = $r15[i10];

        $r17 = $r16.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>($r17, i10, i2);

        $r18 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r19 = $r18[i2];

        $r20 = $r19.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>($r20, i10, i2);

        $r21 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>($r21, i10, i2);

        goto label4;

     label3:
        $r11 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $i8 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        $r11.<avrora.sim.FiniteStateMachine$TransitionEvent: int oldState> = $i8;

        $r12 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $r12.<avrora.sim.FiniteStateMachine$TransitionEvent: int newState> = i2;

        $r14 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock>;

        $r13 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $l9 = (long) i3;

        virtualinvoke $r14.<avrora.sim.clock.Clock: void insertEvent(avrora.sim.Simulator$Event,long)>($r13, $l9);

     label4:
        return;
    }

    public int getTransitionTime(int, int)
    {
        avrora.sim.FiniteStateMachine r0;
        int i0, i1, $i2;
        avrora.sim.FiniteStateMachine$State[] $r1;
        avrora.sim.FiniteStateMachine$State $r2;
        int[] $r3;

        r0 := @this: avrora.sim.FiniteStateMachine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r2 = $r1[i0];

        $r3 = $r2.<avrora.sim.FiniteStateMachine$State: int[] transition_time>;

        $i2 = $r3[i1];

        return $i2;
    }

    public java.lang.String getStateName(int)
    {
        avrora.sim.FiniteStateMachine r0;
        int i0;
        avrora.sim.FiniteStateMachine$State[] $r1;
        avrora.sim.FiniteStateMachine$State $r2;
        java.lang.String $r3;

        r0 := @this: avrora.sim.FiniteStateMachine;

        i0 := @parameter0: int;

        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $r2 = $r1[i0];

        $r3 = $r2.<avrora.sim.FiniteStateMachine$State: java.lang.String name>;

        return $r3;
    }

    public java.lang.String getCurrentStateName()
    {
        avrora.sim.FiniteStateMachine r0;
        int $i0;
        avrora.sim.FiniteStateMachine$State[] $r1;
        avrora.sim.FiniteStateMachine$State $r2;
        java.lang.String $r3;

        r0 := @this: avrora.sim.FiniteStateMachine;

        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $i0 = r0.<avrora.sim.FiniteStateMachine: int curState>;

        $r2 = $r1[$i0];

        $r3 = $r2.<avrora.sim.FiniteStateMachine$State: java.lang.String name>;

        return $r3;
    }

    public avrora.sim.clock.Clock getClock()
    {
        avrora.sim.FiniteStateMachine r0;
        avrora.sim.clock.Clock $r1;

        r0 := @this: avrora.sim.FiniteStateMachine;

        $r1 = r0.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock>;

        return $r1;
    }

    public static int[][] buildUniformTTM(int, int)
    {
        int i0, i1, i2, i3;
        int[][] r0;
        int[] $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 = newmultiarray (int)[i0][i0];

        if i1 == 0 goto label4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r1 = r0[i2];

        $r1[i3] = i1;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r0;
    }

    public static int[][] buildSparseTTM(int, int)
    {
        int i0, i1, i2;
        int[][] r0;
        int[] r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 = newarray (int[])[i0];

        r1 = newarray (int)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r0[i2] = r1;

        r1[i2] = i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static int[][] buildBimodalTTM(int, int, int[], int[])
    {
        int i0, i1, $i2, $i3, i4, i5;
        int[][] r0;
        int[] r1, $r2, r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r3 := @parameter3: int[];

        r0 = staticinvoke <avrora.sim.FiniteStateMachine: int[][] newTTM(int)>(i0);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r2 = r0[i4];

        $i2 = r1[i4];

        $r2[i1] = $i2;

        $r4 = r0[i1];

        $i3 = r3[i4];

        $r4[i4] = $i3;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r0;
    }

    public static int[][] setCircularTTM(int[][], int[], int[])
    {
        int[][] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        int[] r1, r2, $r3, $r4;

        r0 := @parameter0: int[][];

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        i0 = lengthof r0;

        i13 = 0;

     label1:
        $i1 = i0 - 1;

        if i13 >= $i1 goto label2;

        $i7 = r1[i13];

        $r4 = r0[$i7];

        $i8 = i13 + 1;

        $i12 = r1[$i8];

        $i9 = i13 + 1;

        $i10 = r1[$i9];

        $i11 = r2[$i10];

        $r4[$i12] = $i11;

        i13 = i13 + 1;

        goto label1;

     label2:
        $i2 = i0 - 1;

        $i3 = r1[$i2];

        $r3 = r0[$i3];

        $i6 = r1[0];

        $i4 = r1[0];

        $i5 = r2[$i4];

        $r3[$i6] = $i5;

        return r0;
    }

    public static int[][] newTTM(int)
    {
        int i0, i1, i2;
        int[][] r0;
        int[] $r1;

        i0 := @parameter0: int;

        r0 = newmultiarray (int)[i0][i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r1 = r0[i1];

        $r1[i2] = -1;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r0;
    }

    public static int[][] setDiagonal(int[][], int)
    {
        int[][] r0;
        int $i0, i1, i2;
        int[] $r1;

        r0 := @parameter0: int[][];

        i1 := @parameter1: int;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $r1 = r0[i2];

        $r1[i2] = i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    static void access$000(avrora.sim.util.MulticastFSMProbe, int, int)
    {
        avrora.sim.util.MulticastFSMProbe r0;
        int i0, i1;

        r0 := @parameter0: avrora.sim.util.MulticastFSMProbe;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>(r0, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <avrora.sim.FiniteStateMachine: int IN_TRANSITION> = -1;

        return;
    }
}
