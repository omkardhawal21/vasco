public class avrora.syntax.objdump.ObjDumpProgramReader extends avrora.core.ProgramReader
{
    protected final cck.util.Option$List SECTIONS;

    public avrora.core.Program read(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int $i0, $i1;
        avrora.syntax.objdump.ObjDumpProgramReader r1;
        avrora.arch.AbstractArchitecture $r2;
        avrora.arch.legacy.LegacyArchitecture $r3;
        java.io.File $r4;
        java.lang.String $r5, $r12, $r15, $r18;
        avrora.syntax.RawModule $r7;
        avrora.syntax.objdump.ObjDumpReformatter $r9;
        cck.util.Option$List $r10;
        java.util.List $r11;
        java.lang.StringBuffer r13;
        java.io.StringReader $r14;
        avrora.syntax.objdump.ObjDumpParser $r17;
        avrora.core.Program r20;

        r1 := @this: avrora.syntax.objdump.ObjDumpProgramReader;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("no input files");

     label1:
        $i1 = lengthof r0;

        if $i1 == 1 goto label2;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type \"objdump\" accepts only one file at a time.");

     label2:
        $r2 = virtualinvoke r1.<avrora.syntax.objdump.ObjDumpProgramReader: avrora.arch.AbstractArchitecture getArchitecture()>();

        $r3 = <avrora.arch.legacy.LegacyArchitecture: avrora.arch.legacy.LegacyArchitecture INSTANCE>;

        if $r2 == $r3 goto label3;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type  \"objdump\" parses only the \"legacy\" architecture.");

     label3:
        $r4 = new java.io.File;

        $r5 = r0[0];

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        $r7 = new avrora.syntax.RawModule;

        specialinvoke $r7.<avrora.syntax.RawModule: void <init>(boolean,boolean)>(1, 1);

        $r9 = new avrora.syntax.objdump.ObjDumpReformatter;

        $r10 = r1.<avrora.syntax.objdump.ObjDumpProgramReader: cck.util.Option$List SECTIONS>;

        $r11 = virtualinvoke $r10.<cck.util.Option$List: java.util.List get()>();

        specialinvoke $r9.<avrora.syntax.objdump.ObjDumpReformatter: void <init>(java.util.List)>($r11);

        $r12 = r0[0];

        r13 = virtualinvoke $r9.<avrora.syntax.objdump.ObjDumpReformatter: java.lang.StringBuffer cleanCode(java.lang.String)>($r12);

        $r14 = new java.io.StringReader;

        $r15 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.io.StringReader: void <init>(java.lang.String)>($r15);

        $r17 = new avrora.syntax.objdump.ObjDumpParser;

        $r18 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>();

        specialinvoke $r17.<avrora.syntax.objdump.ObjDumpParser: void <init>(java.io.Reader,avrora.syntax.RawModule,java.lang.String)>($r14, $r7, $r18);

        virtualinvoke $r17.<avrora.syntax.objdump.ObjDumpParser: void Module()>();

        r20 = virtualinvoke $r7.<avrora.syntax.RawModule: avrora.core.Program build()>();

        virtualinvoke r1.<avrora.syntax.objdump.ObjDumpProgramReader: void addIndirectEdges(avrora.core.Program)>(r20);

        return r20;
    }

    public void <init>()
    {
        avrora.syntax.objdump.ObjDumpProgramReader r0;
        cck.util.Option$List $r1;

        r0 := @this: avrora.syntax.objdump.ObjDumpProgramReader;

        specialinvoke r0.<avrora.core.ProgramReader: void <init>(java.lang.String)>("The \"objdump\" input format reads programs that are the output of the \"avr-objdump\" utility provided with avr-binutils. For example, an ELF file must first be disassembled with \"avr-objdump -zhD\" to create a text file readable by this input format. The \"-zhD\" options are very important: the output will not be parseable otherwise.");

        $r1 = virtualinvoke r0.<avrora.syntax.objdump.ObjDumpProgramReader: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("sections", ".text,.data", "This option specifies a list of sections that the loader should load from the output.");

        r0.<avrora.syntax.objdump.ObjDumpProgramReader: cck.util.Option$List SECTIONS> = $r1;

        return;
    }
}
