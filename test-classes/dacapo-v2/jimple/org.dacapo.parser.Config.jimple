public class org.dacapo.parser.Config extends java.lang.Object
{
    private static int threadCountOverride;
    public final java.lang.String name;
    public java.lang.String className;
    private org.dacapo.parser.Config$ThreadModel threadModel;
    java.util.HashMap sizes;
    java.util.HashMap desc;
    public java.lang.String[] jars;

    public static void setThreadCountOverride(int)
    {
        int i0;

        i0 := @parameter0: int;

        <org.dacapo.parser.Config: int threadCountOverride> = i0;

        return;
    }

    public static int getThreadCountOverride()
    {
        int $i0;

        $i0 = <org.dacapo.parser.Config: int threadCountOverride>;

        return $i0;
    }

    public static org.dacapo.parser.Config parse(java.lang.String)
    {
        java.io.File $r0;
        java.lang.String r1;
        org.dacapo.parser.Config $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.File)>($r0);

        return $r2;
    }

    public static org.dacapo.parser.Config parse(java.io.File)
    {
        java.io.FileInputStream $r0;
        java.io.File r1;
        org.dacapo.parser.Config $r2;
        java.io.FileNotFoundException $r3;

        r1 := @parameter0: java.io.File;

     label1:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r2 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.InputStream)>($r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.FileNotFoundException: void printStackTrace()>();

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static org.dacapo.parser.Config parse(java.net.URL)
    {
        java.net.URL r0;
        java.io.InputStream $r1;
        org.dacapo.parser.Config $r2;
        java.io.IOException $r3;

        r0 := @parameter0: java.net.URL;

     label1:
        $r1 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

        $r2 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.InputStream)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static org.dacapo.parser.Config parse(java.io.InputStream)
    {
        org.dacapo.parser.ConfigFile $r0;
        java.io.InputStream r1;
        org.dacapo.parser.Config $r2;
        org.dacapo.parser.ParseException $r3;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $r0 = new org.dacapo.parser.ConfigFile;

        specialinvoke $r0.<org.dacapo.parser.ConfigFile: void <init>(java.io.InputStream,java.lang.String)>(r1, "UTF-8");

        $r2 = virtualinvoke $r0.<org.dacapo.parser.ConfigFile: org.dacapo.parser.Config configFile()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<org.dacapo.parser.ParseException: void printStackTrace()>();

        return null;

        catch org.dacapo.parser.ParseException from label1 to label2 with label3;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, i1;
        java.lang.String $r1;
        org.dacapo.parser.Config $r2;
        java.io.PrintStream $r3;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r1 = r0[i1];

        $r2 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.lang.String)>($r1);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<org.dacapo.parser.Config: void print(java.io.PrintStream)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void <init>(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.util.HashMap $r1, $r2;
        java.lang.String r3;

        r0 := @this: org.dacapo.parser.Config;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dacapo.parser.Config: java.lang.String className> = null;

        r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(3);

        r0.<org.dacapo.parser.Config: java.util.HashMap sizes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(6);

        r0.<org.dacapo.parser.Config: java.util.HashMap desc> = $r2;

        r0.<org.dacapo.parser.Config: java.lang.String name> = r3;

        return;
    }

    void setJars(java.lang.String[]) throws org.dacapo.parser.ParseException
    {
        org.dacapo.parser.Config r0;
        java.lang.String[] $r1, r2;
        org.dacapo.parser.ParseException $r3;

        r0 := @this: org.dacapo.parser.Config;

        r2 := @parameter0: java.lang.String[];

        $r1 = r0.<org.dacapo.parser.Config: java.lang.String[] jars>;

        if $r1 == null goto label1;

        $r3 = new org.dacapo.parser.ParseException;

        specialinvoke $r3.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Configuration file error - cannot set libs twice");

        throw $r3;

     label1:
        r0.<org.dacapo.parser.Config: java.lang.String[] jars> = r2;

        return;
    }

    void setClass(java.lang.String) throws org.dacapo.parser.ParseException
    {
        org.dacapo.parser.Config r0;
        java.lang.String $r1, r2;
        org.dacapo.parser.ParseException $r3;

        r0 := @this: org.dacapo.parser.Config;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.dacapo.parser.Config: java.lang.String className>;

        if $r1 == null goto label1;

        $r3 = new org.dacapo.parser.ParseException;

        specialinvoke $r3.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Configuration file error - cannot set class name twice");

        throw $r3;

     label1:
        r0.<org.dacapo.parser.Config: java.lang.String className> = r2;

        return;
    }

    void setThreadModel(org.dacapo.parser.Config$ThreadModel) throws org.dacapo.parser.ParseException
    {
        org.dacapo.parser.Config r0;
        org.dacapo.parser.Config$ThreadModel $r1, r2;
        org.dacapo.parser.ParseException $r3;

        r0 := @this: org.dacapo.parser.Config;

        r2 := @parameter0: org.dacapo.parser.Config$ThreadModel;

        $r1 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        if $r1 == null goto label1;

        $r3 = new org.dacapo.parser.ParseException;

        specialinvoke $r3.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Configuration file error - cannot set thread model twice");

        throw $r3;

     label1:
        r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel> = r2;

        return;
    }

    void addSize(java.lang.String, java.util.Vector)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1;
        org.dacapo.parser.Config$Size $r2;
        java.util.Vector r3;
        java.util.HashMap $r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Vector;

        $r4 = r0.<org.dacapo.parser.Config: java.util.HashMap sizes>;

        $r2 = new org.dacapo.parser.Config$Size;

        specialinvoke $r2.<org.dacapo.parser.Config$Size: void <init>(org.dacapo.parser.Config,java.lang.String,java.util.Vector)>(r0, r1, r3);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    void addDesc(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r2;
        java.util.HashMap $r3;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.dacapo.parser.Config: java.util.HashMap desc>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    void setThreadLimit(java.lang.String, int) throws org.dacapo.parser.ParseException
    {
        org.dacapo.parser.Config r0;
        org.dacapo.parser.Config$ThreadModel $r1, $r2, $r4, $r5;
        org.dacapo.parser.ParseException $r3, $r8;
        int i0;
        java.lang.String r6;
        org.dacapo.parser.Config$Size $r7;

        r0 := @this: org.dacapo.parser.Config;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        $r1 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel SINGLE>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        $r4 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel FIXED>;

        if $r5 != $r4 goto label2;

     label1:
        $r3 = new org.dacapo.parser.ParseException;

        specialinvoke $r3.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Thread limit is not valid for Single and Fixed threading models");

        throw $r3;

     label2:
        if i0 >= 0 goto label3;

        $r8 = new org.dacapo.parser.ParseException;

        specialinvoke $r8.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Thread limit cannot be less than 0");

        throw $r8;

     label3:
        $r7 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r6);

        virtualinvoke $r7.<org.dacapo.parser.Config$Size: void setThreadLimit(int)>(i0);

        return;
    }

    public void setThreadFactor(java.lang.String, int) throws org.dacapo.parser.ParseException
    {
        org.dacapo.parser.Config r0;
        org.dacapo.parser.Config$ThreadModel $r1, $r2, $r5, $r6, $r8, $r9;
        int i0;
        java.lang.String r3;
        org.dacapo.parser.Config$Size $r4, $r7;
        org.dacapo.parser.ParseException $r10, $r11;

        r0 := @this: org.dacapo.parser.Config;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        $r1 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel SINGLE>;

        if $r2 != $r1 goto label1;

        if i0 == 1 goto label1;

        $r11 = new org.dacapo.parser.ParseException;

        specialinvoke $r11.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Single threaded benchmarks must have exactly 1 thread");

        throw $r11;

     label1:
        if i0 >= 1 goto label2;

        $r10 = new org.dacapo.parser.ParseException;

        specialinvoke $r10.<org.dacapo.parser.ParseException: void <init>(java.lang.String)>("Thread factor or number must be 1 or more");

        throw $r10;

     label2:
        $r4 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r3);

        virtualinvoke $r4.<org.dacapo.parser.Config$Size: void setThreadCount(int)>(i0);

        $r6 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        $r5 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel SINGLE>;

        if $r6 == $r5 goto label3;

        $r9 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        $r8 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel FIXED>;

        if $r9 != $r8 goto label4;

     label3:
        $r7 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r3);

        virtualinvoke $r7.<org.dacapo.parser.Config$Size: void setThreadLimit(int)>(i0);

     label4:
        return;
    }

    void setSizeDescription(java.lang.String, java.lang.String) throws org.dacapo.parser.ParseException
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        virtualinvoke $r2.<org.dacapo.parser.Config$Size: void setDesc(java.lang.String)>(r3);

        return;
    }

    void addOutputFile(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        boolean $z0, $z1;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        virtualinvoke $r2.<org.dacapo.parser.Config$Size: void addOutputFile(java.lang.String)>(r3);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("stdout.log");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("stderr.log");

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r0.<org.dacapo.parser.Config: void setTextFile(java.lang.String,java.lang.String,boolean)>(r1, r3, 1);

        virtualinvoke r0.<org.dacapo.parser.Config: void setFilterScratch(java.lang.String,java.lang.String,boolean)>(r1, r3, 1);

     label2:
        return;
    }

    void setDigest(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3, r5;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: java.lang.String digest> = r5;

        return;
    }

    void setLines(java.lang.String, java.lang.String, int)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;
        int i0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: int lines> = i0;

        return;
    }

    void setBytes(java.lang.String, java.lang.String, long)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;
        long l0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: long bytes> = l0;

        return;
    }

    void setKeep(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: boolean keep> = 1;

        return;
    }

    void setExists(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: boolean existence> = 1;

        return;
    }

    public void setTextFile(java.lang.String, java.lang.String, boolean)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: boolean text> = z0;

        return;
    }

    public void setFilterScratch(java.lang.String, java.lang.String, boolean)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r4.<org.dacapo.parser.Config$OutputFile: boolean filter> = z0;

        return;
    }

    public java.lang.String[] getArgs(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1;
        org.dacapo.parser.Config$Size $r2;
        java.lang.String[] $r3, $r5, $r6;
        java.lang.Object $r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r3 = $r2.<org.dacapo.parser.Config$Size: java.lang.String[] args>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.String[]) $r4;

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public java.util.Collection getSizes()
    {
        org.dacapo.parser.Config r0;
        java.util.HashMap $r1;
        java.util.Set $r2, $r3;

        r0 := @this: org.dacapo.parser.Config;

        $r1 = r0.<org.dacapo.parser.Config: java.util.HashMap sizes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public org.dacapo.parser.Config$ThreadModel getThreadModel()
    {
        org.dacapo.parser.Config r0;
        org.dacapo.parser.Config$ThreadModel $r1, $r2, $r3;

        r0 := @this: org.dacapo.parser.Config;

        $r1 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        if $r1 != null goto label1;

        $r3 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel FIXED>;

        return $r3;

     label1:
        $r2 = r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        return $r2;
    }

    public int getThreadLimit(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1;
        org.dacapo.parser.Config$Size $r2;
        int $i0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $i0 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: int getThreadLimit()>();

        return $i0;
    }

    public int getThreadFactor(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1;
        org.dacapo.parser.Config$Size $r2;
        int $i0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $i0 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: int getThreadCount()>();

        return $i0;
    }

    public java.util.Set getOutputs(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1;
        org.dacapo.parser.Config$Size $r2;
        java.util.HashMap $r3;
        java.util.Set $r4, $r5;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r3 = $r2.<org.dacapo.parser.Config$Size: java.util.HashMap outputFiles>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        return $r5;
    }

    public java.lang.String getDigest(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3, $r5;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $r5 = $r4.<org.dacapo.parser.Config$OutputFile: java.lang.String digest>;

        return $r5;
    }

    public boolean hasDigest(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = virtualinvoke $r4.<org.dacapo.parser.Config$OutputFile: boolean hasDigest()>();

        return $z0;
    }

    public boolean isTextFile(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = $r4.<org.dacapo.parser.Config$OutputFile: boolean text>;

        return $z0;
    }

    public boolean filterScratch(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = $r4.<org.dacapo.parser.Config$OutputFile: boolean filter>;

        return $z0;
    }

    public boolean hasBytes(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = virtualinvoke $r4.<org.dacapo.parser.Config$OutputFile: boolean hasBytes()>();

        return $z0;
    }

    public long getBytes(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size $r2;
        org.dacapo.parser.Config$OutputFile $r4;
        long $l0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $l0 = $r4.<org.dacapo.parser.Config$OutputFile: long bytes>;

        return $l0;
    }

    public boolean hasLines(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = virtualinvoke $r4.<org.dacapo.parser.Config$OutputFile: boolean hasLines()>();

        return $z0;
    }

    public int getLines(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        int $i0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $i0 = $r4.<org.dacapo.parser.Config$OutputFile: int lines>;

        return $i0;
    }

    public boolean isKept(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = $r4.<org.dacapo.parser.Config$OutputFile: boolean keep>;

        return $z0;
    }

    public boolean checkExists(java.lang.String, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, r3;
        org.dacapo.parser.Config$Size r2;
        org.dacapo.parser.Config$OutputFile $r4;
        boolean $z0;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r3);

        $z0 = $r4.<org.dacapo.parser.Config$OutputFile: boolean existence>;

        return $z0;
    }

    private java.lang.String pad(java.lang.String, int)
    {
        int $i0, i1;
        java.lang.StringBuilder $r0, $r1, $r2;
        org.dacapo.parser.Config r3;
        java.lang.String r4;

        r3 := @this: org.dacapo.parser.Config;

        r4 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

     label1:
        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 >= i1 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return r4;
    }

    public void describeSizes(java.io.PrintStream, boolean, java.lang.String)
    {
        java.util.TreeSet $r0;
        org.dacapo.parser.Config r1;
        java.util.HashMap $r2;
        java.util.Set $r3;
        java.util.Iterator r5;
        boolean $z0, z1;
        java.io.PrintStream r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r17, $r18, $r19, $r20;
        java.lang.String $r8, $r12, r13, r16, r21, $r22;
        java.lang.Object $r15;

        r1 := @this: org.dacapo.parser.Config;

        r6 := @parameter0: java.io.PrintStream;

        z1 := @parameter1: boolean;

        r13 := @parameter2: java.lang.String;

        $r0 = new java.util.TreeSet;

        $r2 = r1.<org.dacapo.parser.Config: java.util.HashMap sizes>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>($r3);

        r21 = null;

        r5 = virtualinvoke $r0.<java.util.TreeSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        if r21 != null goto label2;

        r21 = r16;

        goto label3;

     label2:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        goto label1;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = specialinvoke r1.<org.dacapo.parser.Config: java.lang.String pad(java.lang.String,int)>("sizes", 10);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        if z1 == 0 goto label5;

        $r22 = r13;

        goto label6;

     label5:
        $r22 = "";

     label6:
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return;
    }

    public void describeSizes(java.io.PrintStream)
    {
        org.dacapo.parser.Config r0;
        java.io.PrintStream r1;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r0.<org.dacapo.parser.Config: void describeSizes(java.io.PrintStream,boolean,java.lang.String)>(r1, 0, ",");

        return;
    }

    public void describe(java.io.PrintStream, java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.io.PrintStream r1;
        java.lang.String r2;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean)>(r1, r2, 0);

        return;
    }

    private void describe(java.io.PrintStream, java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        boolean z0, $z1;
        java.lang.String r0, $r4, $r8, $r11, r12, r14, $r15;
        java.io.PrintStream r1;
        java.lang.StringBuilder $r2, $r5, $r9, $r10;
        org.dacapo.parser.Config r3;
        java.util.HashMap $r6;
        java.lang.Object $r7;

        r3 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.io.PrintStream;

        r14 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r0 := @parameter3: java.lang.String;

        r12 := @parameter4: java.lang.String;

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>("  ");

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("sizes");

        if $z1 == 0 goto label2;

        virtualinvoke r3.<org.dacapo.parser.Config: void describeSizes(java.io.PrintStream,boolean,java.lang.String)>(r1, z0, r12);

        goto label5;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = specialinvoke r3.<org.dacapo.parser.Config: java.lang.String pad(java.lang.String,int)>(r0, 10);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = r3.<org.dacapo.parser.Config: java.util.HashMap desc>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        if z0 == 0 goto label3;

        $r15 = r12;

        goto label4;

     label3:
        $r15 = "";

     label4:
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label5:
        return;
    }

    public void describe(java.io.PrintStream, java.lang.String, boolean)
    {
        boolean z0;
        org.dacapo.parser.Config r0;
        java.io.PrintStream r1;
        java.lang.String r2, $r5, $r9, $r13, $r14;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        org.dacapo.parser.Config$Size $r11, $r12;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("description");

     label1:
        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "short", ",");

        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "long", ",");

        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "author", ",");

        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "license", ",");

        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "copyright", ",");

        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "url", ",");

        if r2 == null goto label2;

        $r11 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r2);

        if $r11 == null goto label2;

        $r12 = specialinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<org.dacapo.parser.Config$Size: java.lang.String getDesc()>();

        goto label3;

     label2:
        $r13 = null;

     label3:
        if $r13 != null goto label4;

        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "version", ";");

        goto label7;

     label4:
        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "version", ",");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = specialinvoke r0.<org.dacapo.parser.Config: java.lang.String pad(java.lang.String,int)>("size", 10);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        if z0 == 0 goto label5;

        $r14 = ";";

        goto label6;

     label5:
        $r14 = "";

     label6:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label7:
        specialinvoke r0.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, z0, "sizes", ",");

        return;
    }

    public java.lang.String getDesc(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, $r4;
        java.util.HashMap $r2;
        java.lang.Object $r3;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dacapo.parser.Config: java.util.HashMap desc>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public void print(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r16, $r17, $r18, $r19, $r27, $r28, $r29, $r30, $r32, $r33, $r35, $r38, $r39, $r41;
        org.dacapo.parser.Config r3;
        java.lang.String $r4, $r6, $r7, $r10, r14, $r20, r24, $r31, $r34, $r36, $r37, $r40, $r42;
        org.dacapo.parser.Config$ThreadModel $r8, $r9, $r21;
        java.util.Collection $r11;
        java.util.Iterator r12, r43;
        java.lang.Object $r13, $r23;
        java.lang.String[] r15;
        int $i0, $i1, i2;
        java.util.Set $r22;
        org.dacapo.parser.Config$Size $r25;
        org.dacapo.parser.Config$OutputFile r26;
        boolean $z0, $z1, $z2, $z3, $z4;

        r3 := @this: org.dacapo.parser.Config;

        r0 := @parameter0: java.io.PrintStream;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("benchmark ");

        $r4 = r3.<org.dacapo.parser.Config: java.lang.String name>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r6);

        $r7 = r3.<org.dacapo.parser.Config: java.lang.String className>;

        if $r7 == null goto label01;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" class ");

        $r40 = r3.<org.dacapo.parser.Config: java.lang.String className>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r42);

     label01:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>(";");

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("  Threading model: ");

        $r8 = r3.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        if $r8 != null goto label02;

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("unspecified");

        goto label03;

     label02:
        $r9 = r3.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        $r10 = virtualinvoke $r9.<org.dacapo.parser.Config$ThreadModel: java.lang.String describe()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label03:
        $r11 = virtualinvoke r3.<org.dacapo.parser.Config: java.util.Collection getSizes()>();

        r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r13;

        r15 = virtualinvoke r3.<org.dacapo.parser.Config: java.lang.String[] getArgs(java.lang.String)>(r14);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" args \"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r20);

        i2 = 0;

     label05:
        $i0 = lengthof r15;

        if i2 >= $i0 goto label07;

        if i2 == 0 goto label06;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" ");

     label06:
        $r37 = r15[i2];

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r37);

        i2 = i2 + 1;

        goto label05;

     label07:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("\"");

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("  threads ");

        $r21 = r3.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel threadModel>;

        if $r21 != null goto label08;

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("<specified in benchmark arguments>");

        goto label09;

     label08:
        $i1 = virtualinvoke r3.<org.dacapo.parser.Config: int getThreadFactor(java.lang.String)>(r14);

        virtualinvoke r0.<java.io.PrintStream: void println(int)>($i1);

     label09:
        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("  outputs");

        $r22 = virtualinvoke r3.<org.dacapo.parser.Config: java.util.Set getOutputs(java.lang.String)>(r14);

        r43 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        virtualinvoke r0.<java.io.PrintStream: void println()>();

        $r23 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r23;

        $r25 = specialinvoke r3.<org.dacapo.parser.Config: org.dacapo.parser.Config$Size getSize(java.lang.String)>(r14);

        r26 = virtualinvoke $r25.<org.dacapo.parser.Config$Size: org.dacapo.parser.Config$OutputFile getOutputFile(java.lang.String)>(r24);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    \"");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r31);

        $z0 = virtualinvoke r26.<org.dacapo.parser.Config$OutputFile: boolean hasDigest()>();

        if $z0 == 0 goto label11;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digest 0x");

        $r34 = r26.<org.dacapo.parser.Config$OutputFile: java.lang.String digest>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r36);

     label11:
        $z1 = r26.<org.dacapo.parser.Config$OutputFile: boolean keep>;

        if $z1 == 0 goto label12;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" keep");

     label12:
        $z2 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(",");

     label13:
        goto label10;

     label14:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>(";");

        goto label04;

     label15:
        virtualinvoke r3.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String,boolean)>(r0, null, 1);

        return;
    }

    public void printThreadModel(java.io.PrintStream, java.lang.String, boolean)
    {
        org.dacapo.parser.Config r0;
        org.dacapo.parser.Config$ThreadModel $r1, $r2, $r3, $r4, $r5, $r6;
        boolean z0;
        java.io.PrintStream r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.String r10, $r13, $r26, $r28;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Runtime $r16;

        r0 := @this: org.dacapo.parser.Config;

        r7 := @parameter0: java.io.PrintStream;

        r10 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $r2 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $r1 != $r2 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using scaled threading model. ");

        $r16 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r16.<java.lang.Runtime: int availableProcessors()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" processors detected, ");

        $i2 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(r10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads used to drive the workload, in a possible range of [1,");

        $i3 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(r10);

        if $i3 != 0 goto label1;

        $r28 = "unlimited";

        goto label2;

     label1:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i4 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(r10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.io.PrintStream: void println(java.lang.String)>($r26);

        goto label5;

     label3:
        if z0 == 0 goto label5;

        $r3 = virtualinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $r4 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel FIXED>;

        if $r3 != $r4 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using a fixed threading model. ");

        $i0 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads used to drive the workload.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.io.PrintStream: void println(java.lang.String)>($r13);

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $r6 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel SINGLE>;

        if $r5 != $r6 goto label5;

        virtualinvoke r7.<java.io.PrintStream: void println(java.lang.String)>("Using a single thread to drive the workload.");

     label5:
        return;
    }

    public int getThreadCount(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        int[] $r1;
        org.dacapo.parser.Config$ThreadModel $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r3;
        java.lang.Runtime $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: org.dacapo.parser.Config;

        r3 := @parameter0: java.lang.String;

        $r1 = <org.dacapo.parser.Config$1: int[] $SwitchMap$org$dacapo$parser$Config$ThreadModel>;

        $r2 = virtualinvoke r0.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $i0 = virtualinvoke $r2.<org.dacapo.parser.Config$ThreadModel: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label6;
        };

     label1:
        return 1;

     label2:
        $i5 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadFactor(java.lang.String)>(r3);

        return $i5;

     label3:
        $i2 = <org.dacapo.parser.Config: int threadCountOverride>;

        if $i2 == 0 goto label4;

        $i6 = <org.dacapo.parser.Config: int threadCountOverride>;

        goto label5;

     label4:
        $i3 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadFactor(java.lang.String)>(r3);

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i4 = virtualinvoke $r4.<java.lang.Runtime: int availableProcessors()>();

        $i6 = $i3 * $i4;

     label5:
        return $i6;

     label6:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown thread model");

        throw $r5;
    }

    public java.lang.String[] preprocessArgs(java.lang.String, java.io.File)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, $r5, $r6, r7, r8, r9;
        java.lang.String[] r2, r3;
        int $i0, $i1, $i2, i3;
        java.io.File r4;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.io.File;

        r2 = virtualinvoke r0.<org.dacapo.parser.Config: java.lang.String[] getArgs(java.lang.String)>(r1);

        $i0 = lengthof r2;

        r3 = newarray (java.lang.String)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r2;

        if i3 >= $i1 goto label2;

        r7 = r2[i3];

        $r5 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${SCRATCH}", $r5);

        $i2 = virtualinvoke r0.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("${THREADS}", $r6);

        r3[i3] = r9;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r3;
    }

    private org.dacapo.parser.Config$Size getSize(java.lang.String)
    {
        org.dacapo.parser.Config r0;
        java.lang.String r1, $r10, $r12;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        org.dacapo.parser.Config$Size r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r11;
        java.io.PrintStream $r6;

        r0 := @this: org.dacapo.parser.Config;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dacapo.parser.Config: java.util.HashMap sizes>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.dacapo.parser.Config$Size) $r3;

        if r4 != null goto label1;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such size: \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" for benchmark ");

        $r10 = r0.<org.dacapo.parser.Config: java.lang.String name>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label1:
        return r4;
    }

    static void <clinit>()
    {
        <org.dacapo.parser.Config: int threadCountOverride> = 0;

        return;
    }
}
