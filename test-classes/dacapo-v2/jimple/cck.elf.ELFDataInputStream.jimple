public class cck.elf.ELFDataInputStream extends java.lang.Object
{
    final boolean bigEndian;
    final cck.elf.ELFHeader header;
    final java.io.RandomAccessFile file;

    public void <init>(cck.elf.ELFHeader, java.io.RandomAccessFile)
    {
        cck.elf.ELFDataInputStream r0;
        cck.elf.ELFHeader r1;
        boolean $z0;
        java.io.RandomAccessFile r2;

        r0 := @this: cck.elf.ELFDataInputStream;

        r1 := @parameter0: cck.elf.ELFHeader;

        r2 := @parameter1: java.io.RandomAccessFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cck.elf.ELFDataInputStream: cck.elf.ELFHeader header> = r1;

        $z0 = virtualinvoke r1.<cck.elf.ELFHeader: boolean isBigEndian()>();

        r0.<cck.elf.ELFDataInputStream: boolean bigEndian> = $z0;

        r0.<cck.elf.ELFDataInputStream: java.io.RandomAccessFile file> = r2;

        return;
    }

    public byte[] read_section(int, int) throws java.io.IOException
    {
        int i0, i1, $i3, $i4, i5;
        byte[] r0;
        cck.elf.ELFDataInputStream r1;
        long $l2;
        java.io.RandomAccessFile $r2, $r3;

        r1 := @this: cck.elf.ELFDataInputStream;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        $r2 = r1.<cck.elf.ELFDataInputStream: java.io.RandomAccessFile file>;

        $l2 = (long) i1;

        virtualinvoke $r2.<java.io.RandomAccessFile: void seek(long)>($l2);

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r3 = r1.<cck.elf.ELFDataInputStream: java.io.RandomAccessFile file>;

        $i3 = i0 - i5;

        $i4 = virtualinvoke $r3.<java.io.RandomAccessFile: int read(byte[],int,int)>(r0, i5, $i3);

        i5 = i5 + $i4;

        goto label1;

     label2:
        return r0;
    }

    public byte read_Elf32_byte() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;
        byte $b1;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        $b1 = (byte) $i0;

        return $b1;
    }

    public int read_Elf32_uchar() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        return $i0;
    }

    public int read_Elf32_Addr() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_4()>();

        return $i0;
    }

    public short read_Elf32_Half() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;
        short $s1;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_2()>();

        $s1 = (short) $i0;

        return $s1;
    }

    public int read_Elf32_Off() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_4()>();

        return $i0;
    }

    public int read_Elf32_SWord() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_4()>();

        return $i0;
    }

    public int read_Elf32_Word() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int $i0;

        r0 := @this: cck.elf.ELFDataInputStream;

        $i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_4()>();

        return $i0;
    }

    private int read_1() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        java.io.RandomAccessFile $r1;
        int $i0, $i1;

        r0 := @this: cck.elf.ELFDataInputStream;

        $r1 = r0.<cck.elf.ELFDataInputStream: java.io.RandomAccessFile file>;

        $i0 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

        $i1 = $i0 & 255;

        return $i1;
    }

    private int read_2() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int i0, i1;
        boolean $z0;
        short $s2, $s3;

        r0 := @this: cck.elf.ELFDataInputStream;

        i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        i1 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        $z0 = r0.<cck.elf.ELFDataInputStream: boolean bigEndian>;

        if $z0 == 0 goto label1;

        $s3 = specialinvoke r0.<cck.elf.ELFDataInputStream: short asShort(int,int)>(i1, i0);

        return $s3;

     label1:
        $s2 = specialinvoke r0.<cck.elf.ELFDataInputStream: short asShort(int,int)>(i0, i1);

        return $s2;
    }

    private int read_4() throws java.io.IOException
    {
        cck.elf.ELFDataInputStream r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean $z0;

        r0 := @this: cck.elf.ELFDataInputStream;

        i0 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        i1 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        i2 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        i3 = specialinvoke r0.<cck.elf.ELFDataInputStream: int read_1()>();

        $z0 = r0.<cck.elf.ELFDataInputStream: boolean bigEndian>;

        if $z0 == 0 goto label1;

        $i5 = specialinvoke r0.<cck.elf.ELFDataInputStream: int asInt(int,int,int,int)>(i3, i2, i1, i0);

        return $i5;

     label1:
        $i4 = specialinvoke r0.<cck.elf.ELFDataInputStream: int asInt(int,int,int,int)>(i0, i1, i2, i3);

        return $i4;
    }

    private short asShort(int, int)
    {
        int i0, i1, $i2, $i3;
        short $s4;
        cck.elf.ELFDataInputStream r0;

        r0 := @this: cck.elf.ELFDataInputStream;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i2 = i0 << 8;

        $i3 = $i2 | i1;

        $s4 = (short) $i3;

        return $s4;
    }

    private int asInt(int, int, int, int)
    {
        int i0, i1, $i2, $i3, i4, $i5, $i6, i7, $i8, $i9;
        cck.elf.ELFDataInputStream r0;

        r0 := @this: cck.elf.ELFDataInputStream;

        i7 := @parameter0: int;

        i4 := @parameter1: int;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        $i3 = i0 << 24;

        $i2 = i1 << 16;

        $i6 = $i3 | $i2;

        $i5 = i4 << 8;

        $i8 = $i6 | $i5;

        $i9 = $i8 | i7;

        return $i9;
    }
}
