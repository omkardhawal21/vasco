public class avrora.sim.mcu.ADC$MUXRegister extends avrora.sim.RWRegister
{
    final avrora.sim.state.RegisterView _mux;
    final avrora.sim.mcu.ADC this$0;

    protected void <init>(avrora.sim.mcu.ADC)
    {
        avrora.sim.mcu.ADC$MUXRegister r0;
        avrora.sim.mcu.ADC r1;
        avrora.sim.state.RegisterView $r2;

        r0 := @this: avrora.sim.mcu.ADC$MUXRegister;

        r1 := @parameter0: avrora.sim.mcu.ADC;

        r0.<avrora.sim.mcu.ADC$MUXRegister: avrora.sim.mcu.ADC this$0> = r1;

        specialinvoke r0.<avrora.sim.RWRegister: void <init>()>();

        $r2 = staticinvoke <avrora.sim.state.RegisterUtil: avrora.sim.state.RegisterView bitRangeView(avrora.sim.state.RegisterView,int,int)>(r0, 0, 4);

        r0.<avrora.sim.mcu.ADC$MUXRegister: avrora.sim.state.RegisterView _mux> = $r2;

        return;
    }

    boolean isSingleEnded()
    {
        avrora.sim.mcu.ADC$MUXRegister r0;
        int $i0;
        boolean $z0;

        r0 := @this: avrora.sim.mcu.ADC$MUXRegister;

        $i0 = virtualinvoke r0.<avrora.sim.mcu.ADC$MUXRegister: int getSingleIndex()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    int getSingleIndex()
    {
        avrora.sim.mcu.ADC$MUXRegister r0;
        avrora.sim.state.RegisterView $r1;
        byte[] $r2;
        int $i0;
        byte $b1;

        r0 := @this: avrora.sim.mcu.ADC$MUXRegister;

        $r2 = <avrora.sim.mcu.ADC: byte[] SINGLE_ENDED_INPUT>;

        $r1 = r0.<avrora.sim.mcu.ADC$MUXRegister: avrora.sim.state.RegisterView _mux>;

        $i0 = interfaceinvoke $r1.<avrora.sim.state.RegisterView: int getValue()>();

        $b1 = $r2[$i0];

        return $b1;
    }

    int getPosIndex()
    {
        avrora.sim.mcu.ADC$MUXRegister r0;
        avrora.sim.state.RegisterView $r1;
        byte[] $r2;
        int $i0;
        byte $b1;

        r0 := @this: avrora.sim.mcu.ADC$MUXRegister;

        $r2 = <avrora.sim.mcu.ADC: byte[] POS_INPUT>;

        $r1 = r0.<avrora.sim.mcu.ADC$MUXRegister: avrora.sim.state.RegisterView _mux>;

        $i0 = interfaceinvoke $r1.<avrora.sim.state.RegisterView: int getValue()>();

        $b1 = $r2[$i0];

        return $b1;
    }

    int getNegIndex()
    {
        avrora.sim.mcu.ADC$MUXRegister r0;
        avrora.sim.state.RegisterView $r1;
        byte[] $r2;
        int $i0;
        byte $b1;

        r0 := @this: avrora.sim.mcu.ADC$MUXRegister;

        $r2 = <avrora.sim.mcu.ADC: byte[] NEG_INPUT>;

        $r1 = r0.<avrora.sim.mcu.ADC$MUXRegister: avrora.sim.state.RegisterView _mux>;

        $i0 = interfaceinvoke $r1.<avrora.sim.state.RegisterView: int getValue()>();

        $b1 = $r2[$i0];

        return $b1;
    }

    int getGain()
    {
        avrora.sim.mcu.ADC$MUXRegister r0;
        avrora.sim.state.RegisterView $r1;
        short[] $r2;
        int $i0;
        short $s1;

        r0 := @this: avrora.sim.mcu.ADC$MUXRegister;

        $r2 = <avrora.sim.mcu.ADC: short[] GAIN>;

        $r1 = r0.<avrora.sim.mcu.ADC$MUXRegister: avrora.sim.state.RegisterView _mux>;

        $i0 = interfaceinvoke $r1.<avrora.sim.state.RegisterView: int getValue()>();

        $s1 = $r2[$i0];

        return $s1;
    }
}
