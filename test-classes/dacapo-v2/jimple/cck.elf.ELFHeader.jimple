public class cck.elf.ELFHeader extends java.lang.Object
{
    protected static final int ELFCLASSNONE;
    protected static final int ELFCLASS32;
    protected static final int ELFCLASS64;
    protected static final int ELFCLASSNUM;
    protected static final int EI_NIDENT;
    protected static final int EI_CLASS;
    protected static final int EI_DATA;
    protected static final int EI_VERSION;
    protected static final int EI_PAD;
    protected static final int ELFDATA2LSB;
    protected static final int ELFDATA2MSB;
    public final byte[] e_ident;
    public short e_type;
    public short e_machine;
    public int e_version;
    public int e_entry;
    public int e_phoff;
    public int e_shoff;
    public int e_flags;
    public short e_ehsize;
    public short e_phentsize;
    public short e_phnum;
    public short e_shentsize;
    public short e_shnum;
    public short e_shstrndx;
    boolean bigEndian;

    public void <init>()
    {
        cck.elf.ELFHeader r0;
        byte[] $r1;

        r0 := @this: cck.elf.ELFHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[16];

        r0.<cck.elf.ELFHeader: byte[] e_ident> = $r1;

        return;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException, cck.elf.ELFHeader$FormatError
    {
        java.io.RandomAccessFile r0;
        long $l0;
        byte $b1;
        cck.elf.ELFHeader r1;
        cck.elf.ELFDataInputStream $r2;
        short $s2, $s3, $s9, $s10, $s11, $s12, $s13, $s14;
        int $i4, $i5, $i6, $i7, $i8, $i15, $i16, i17;
        byte[] $r3;
        cck.elf.ELFHeader$FormatError $r4;

        r1 := @this: cck.elf.ELFHeader;

        r0 := @parameter0: java.io.RandomAccessFile;

        $l0 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $b1 = $l0 cmp 16L;

        if $b1 >= 0 goto label1;

        $r4 = new cck.elf.ELFHeader$FormatError;

        specialinvoke $r4.<cck.elf.ELFHeader$FormatError: void <init>(cck.elf.ELFHeader)>(r1);

        throw $r4;

     label1:
        i17 = 0;

     label2:
        if i17 >= 16 goto label3;

        $r3 = r1.<cck.elf.ELFHeader: byte[] e_ident>;

        $i15 = 16 - i17;

        $i16 = virtualinvoke r0.<java.io.RandomAccessFile: int read(byte[],int,int)>($r3, i17, $i15);

        i17 = i17 + $i16;

        goto label2;

     label3:
        specialinvoke r1.<cck.elf.ELFHeader: void checkIdent()>();

        $r2 = new cck.elf.ELFDataInputStream;

        specialinvoke $r2.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>(r1, r0);

        $s2 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_type> = $s2;

        $s3 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_machine> = $s3;

        $i4 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        r1.<cck.elf.ELFHeader: int e_version> = $i4;

        $i5 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();

        r1.<cck.elf.ELFHeader: int e_entry> = $i5;

        $i6 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        r1.<cck.elf.ELFHeader: int e_phoff> = $i6;

        $i7 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        r1.<cck.elf.ELFHeader: int e_shoff> = $i7;

        $i8 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        r1.<cck.elf.ELFHeader: int e_flags> = $i8;

        $s9 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_ehsize> = $s9;

        $s10 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_phentsize> = $s10;

        $s11 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_phnum> = $s11;

        $s12 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_shentsize> = $s12;

        $s13 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_shnum> = $s13;

        $s14 = virtualinvoke $r2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        r1.<cck.elf.ELFHeader: short e_shstrndx> = $s14;

        return;
    }

    private void checkIdent() throws cck.elf.ELFHeader$FormatError
    {
        cck.elf.ELFHeader r0;
        boolean $z0;

        r0 := @this: cck.elf.ELFHeader;

        specialinvoke r0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(0, 127);

        specialinvoke r0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(1, 69);

        specialinvoke r0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(2, 76);

        specialinvoke r0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(3, 70);

        $z0 = virtualinvoke r0.<cck.elf.ELFHeader: boolean isBigEndian()>();

        r0.<cck.elf.ELFHeader: boolean bigEndian> = $z0;

        return;
    }

    private void checkIndentByte(int, int) throws cck.elf.ELFHeader$FormatError
    {
        cck.elf.ELFHeader r0;
        int i0, i1;
        byte[] $r1;
        byte $b2;
        cck.elf.ELFHeader$FormatError $r2;

        r0 := @this: cck.elf.ELFHeader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<cck.elf.ELFHeader: byte[] e_ident>;

        $b2 = $r1[i0];

        if $b2 == i1 goto label1;

        $r2 = new cck.elf.ELFHeader$FormatError;

        specialinvoke $r2.<cck.elf.ELFHeader$FormatError: void <init>(cck.elf.ELFHeader)>(r0);

        throw $r2;

     label1:
        return;
    }

    public int getVersion()
    {
        cck.elf.ELFHeader r0;
        byte[] $r1;
        byte $b0;

        r0 := @this: cck.elf.ELFHeader;

        $r1 = r0.<cck.elf.ELFHeader: byte[] e_ident>;

        $b0 = $r1[6];

        return $b0;
    }

    public java.lang.String getArchitecture()
    {
        cck.elf.ELFHeader r0;
        short $s0;
        java.lang.String $r1;

        r0 := @this: cck.elf.ELFHeader;

        $s0 = r0.<cck.elf.ELFHeader: short e_machine>;

        $r1 = staticinvoke <cck.elf.ELFIdentifier: java.lang.String getArchitecture(int)>($s0);

        return $r1;
    }

    public boolean isLittleEndian()
    {
        cck.elf.ELFHeader r0;
        byte[] $r1;
        byte $b0;
        boolean $z0;

        r0 := @this: cck.elf.ELFHeader;

        $r1 = r0.<cck.elf.ELFHeader: byte[] e_ident>;

        $b0 = $r1[6];

        if $b0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBigEndian()
    {
        cck.elf.ELFHeader r0;
        byte[] $r1;
        byte $b0;
        boolean $z0;

        r0 := @this: cck.elf.ELFHeader;

        $r1 = r0.<cck.elf.ELFHeader: byte[] e_ident>;

        $b0 = $r1[6];

        if $b0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean is32Bit()
    {
        cck.elf.ELFHeader r0;
        byte[] $r1;
        byte $b0;
        boolean $z0;

        r0 := @this: cck.elf.ELFHeader;

        $r1 = r0.<cck.elf.ELFHeader: byte[] e_ident>;

        $b0 = $r1[4];

        if $b0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean is64Bit()
    {
        cck.elf.ELFHeader r0;
        byte[] $r1;
        byte $b0;
        boolean $z0;

        r0 := @this: cck.elf.ELFHeader;

        $r1 = r0.<cck.elf.ELFHeader: byte[] e_ident>;

        $b0 = $r1[4];

        if $b0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void <clinit>()
    {
        <cck.elf.ELFHeader: int ELFDATA2MSB> = 2;

        <cck.elf.ELFHeader: int ELFDATA2LSB> = 1;

        <cck.elf.ELFHeader: int EI_PAD> = 7;

        <cck.elf.ELFHeader: int EI_VERSION> = 6;

        <cck.elf.ELFHeader: int EI_DATA> = 5;

        <cck.elf.ELFHeader: int EI_CLASS> = 4;

        <cck.elf.ELFHeader: int EI_NIDENT> = 16;

        <cck.elf.ELFHeader: int ELFCLASSNUM> = 3;

        <cck.elf.ELFHeader: int ELFCLASS64> = 2;

        <cck.elf.ELFHeader: int ELFCLASS32> = 1;

        <cck.elf.ELFHeader: int ELFCLASSNONE> = 0;

        return;
    }
}
