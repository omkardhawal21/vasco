class Main extends java.lang.Object
{

    static void <clinit>()
    {
        boolean $stack1, $stack2, $stack3, $stack6, $stack7, $stack10, $stack11, $stack5#7, $stack9#16;
        java.lang.Exception $stack26;
        java.io.PrintStream $stack27;

     label01:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "A");

        $stack1 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack1 == 0 goto label02;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall0()>();

        goto label05;

     label02:
        $stack2 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack2 == 0 goto label03;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall1()>();

        goto label05;

     label03:
        $stack3 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack3 == 0 goto label04;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall2()>();

        goto label05;

     label04:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("A");

     label05:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "B");

        $stack5#7 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack5#7 == 0 goto label06;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall3()>();

        goto label09;

     label06:
        $stack6 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack6 == 0 goto label07;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall4()>();

        goto label09;

     label07:
        $stack7 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack7 == 0 goto label08;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall5()>();

        goto label09;

     label08:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("B");

     label09:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "F");

        $stack9#16 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack9#16 == 0 goto label10;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall6()>();

        goto label13;

     label10:
        $stack10 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack10 == 0 goto label11;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall7()>();

        goto label13;

     label11:
        $stack11 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack11 == 0 goto label12;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall8()>();

        goto label13;

     label12:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("F");

     label13:
        goto label15;

     label14:
        $stack26 := @caughtexception;

        $stack27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack27.<java.io.PrintStream: void println(java.lang.Object)>($stack26);

     label15:
        return;

        catch java.lang.Exception from label01 to label13 with label14;
    }

    void <init>()
    {
        Main l0;

        l0 := @this: Main;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.CloneNotSupportedException
    {
        A $stack2, $stack3, $stack4, $stack5, $stack6, $stack7;
        B l1, $stack9;
        java.lang.Object $stack8;
        java.lang.String[] l0;

        l0 := @parameter0: java.lang.String[];

        $stack2 = new A;

        specialinvoke $stack2.<A: void <init>()>();

        $stack3 = new A;

        specialinvoke $stack3.<A: void <init>()>();

        $stack4 = new A;

        specialinvoke $stack4.<A: void <init>()>();

        $stack5 = new A;

        specialinvoke $stack5.<A: void <init>()>();

        $stack6 = new A;

        specialinvoke $stack6.<A: void <init>()>();

        $stack7 = new A;

        specialinvoke $stack7.<A: void <init>()>();

        l1 = new B;

        specialinvoke l1.<B: void <init>()>();

        virtualinvoke l1.<B: void foo()>();

        $stack8 = virtualinvoke l1.<B: java.lang.Object clone()>();

        $stack9 = (B) $stack8;

        virtualinvoke $stack9.<B: void foo()>();

        return;
    }
}
