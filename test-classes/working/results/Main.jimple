class Main extends java.lang.Object
{

    static void <clinit>()
    {
        boolean $stack1, $stack2, $stack3, $stack4, $stack7, $stack8, $stack9, $stack12, $stack13, $stack14, $stack17, $stack18, $stack19, $stack22, $stack23, $stack24, $stack6#9, $stack11#21, $stack16#33, $stack21#45;
        java.lang.Exception $stack54;
        java.io.PrintStream $stack55;

     label01:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "F");

        $stack1 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack1 == 0 goto label02;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall0()>();

        goto label06;

     label02:
        $stack2 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack2 == 0 goto label03;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall1()>();

        goto label06;

     label03:
        $stack3 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack3 == 0 goto label04;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall2()>();

        goto label06;

     label04:
        $stack4 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack4 == 0 goto label05;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall3()>();

        goto label06;

     label05:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("F");

     label06:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "B");

        $stack6#9 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack6#9 == 0 goto label07;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall4()>();

        goto label11;

     label07:
        $stack7 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack7 == 0 goto label08;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall5()>();

        goto label11;

     label08:
        $stack8 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack8 == 0 goto label09;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall6()>();

        goto label11;

     label09:
        $stack9 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack9 == 0 goto label10;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall7()>();

        goto label11;

     label10:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("B");

     label11:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "C");

        $stack11#21 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack11#21 == 0 goto label12;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall8()>();

        goto label16;

     label12:
        $stack12 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack12 == 0 goto label13;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall9()>();

        goto label16;

     label13:
        $stack13 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack13 == 0 goto label14;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall10()>();

        goto label16;

     label14:
        $stack14 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack14 == 0 goto label15;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall11()>();

        goto label16;

     label15:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("C");

     label16:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "D");

        $stack16#33 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack16#33 == 0 goto label17;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall12()>();

        goto label21;

     label17:
        $stack17 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack17 == 0 goto label18;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall13()>();

        goto label21;

     label18:
        $stack18 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack18 == 0 goto label19;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall14()>();

        goto label21;

     label19:
        $stack19 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack19 == 0 goto label20;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall15()>();

        goto label21;

     label20:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("D");

     label21:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "soot.rtlib.tamiflex.ReflectiveCallsWrapper");

        $stack21#45 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack21#45 == 0 goto label22;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall16()>();

        goto label26;

     label22:
        $stack22 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack22 == 0 goto label23;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall17()>();

        goto label26;

     label23:
        $stack23 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack23 == 0 goto label24;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall18()>();

        goto label26;

     label24:
        $stack24 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack24 == 0 goto label25;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall19()>();

        goto label26;

     label25:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("soot.rtlib.tamiflex.ReflectiveCallsWrapper");

     label26:
        goto label28;

     label27:
        $stack54 := @caughtexception;

        $stack55 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack55.<java.io.PrintStream: void println(java.lang.Object)>($stack54);

     label28:
        return;

        catch java.lang.Exception from label01 to label26 with label27;
    }

    void <init>()
    {
        Main l0;

        l0 := @this: Main;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Class[] $stack2;
        java.lang.Class $stack3;
        java.lang.reflect.Constructor $stack4;
        boolean $stack5;
        java.lang.Object $stack6, $stack9, l0#4;
        B $stack7;
        java.lang.Exception $stack11;
        java.lang.String $stack12;
        java.lang.String[] l0#1;
        java.lang.Object[] l0#3;
        java.io.PrintStream l0#5;

        l0#1 := @parameter0: java.lang.String[];

     label1:
        $stack3 = class "LB;";

        $stack2 = newarray (java.lang.Class)[0];

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack2);

        l0#3 = newarray (java.lang.Object)[0];

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownConstructorNewInstance(int,java.lang.reflect.Constructor)>(1, $stack4);

        $stack5 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack5 == 0 goto label2;

        $stack9 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall20(java.lang.Object[])>(l0#3);

        l0#4 = $stack9;

        goto label3;

     label2:
        $stack6 = virtualinvoke $stack4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(l0#3);

        l0#4 = $stack6;

     label3:
        $stack7 = (B) l0#4;

        virtualinvoke $stack7.<B: D foo()>();

     label4:
        goto label6;

     label5:
        $stack11 := @caughtexception;

        l0#5 = <java.lang.System: java.io.PrintStream out>;

        $stack12 = virtualinvoke $stack11.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke l0#5.<java.io.PrintStream: void println(java.lang.String)>($stack12);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }
}
