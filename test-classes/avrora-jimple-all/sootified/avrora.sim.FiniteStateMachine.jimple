public class avrora.sim.FiniteStateMachine extends java.lang.Object
{
    public static final int IN_TRANSITION;
    protected final int numStates;
    protected final int startState;
    protected final avrora.sim.clock.Clock clock;
    protected final avrora.sim.FiniteStateMachine$TransitionEvent transEvent;
    protected final avrora.sim.util.MulticastFSMProbe globalProbe;
    protected avrora.sim.FiniteStateMachine$State[] states;
    protected int curState;

    private static void fireBefore(avrora.sim.util.MulticastFSMProbe, int, int)
    {
        avrora.sim.util.MulticastFSMProbe p;
        boolean $stack3;
        int oldState, newState;

        p := @parameter0: avrora.sim.util.MulticastFSMProbe;

        oldState := @parameter1: int;

        newState := @parameter2: int;

        $stack3 = virtualinvoke p.<avrora.sim.util.MulticastFSMProbe: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        virtualinvoke p.<avrora.sim.util.MulticastFSMProbe: void fireBeforeTransition(int,int)>(oldState, newState);

     label1:
        return;
    }

    private static void fireAfter(avrora.sim.util.MulticastFSMProbe, int, int)
    {
        avrora.sim.util.MulticastFSMProbe p;
        boolean $stack3;
        int oldState, newState;

        p := @parameter0: avrora.sim.util.MulticastFSMProbe;

        oldState := @parameter1: int;

        newState := @parameter2: int;

        $stack3 = virtualinvoke p.<avrora.sim.util.MulticastFSMProbe: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        virtualinvoke p.<avrora.sim.util.MulticastFSMProbe: void fireAfterTransition(int,int)>(oldState, newState);

     label1:
        return;
    }

    public void <init>(avrora.sim.clock.Clock, int, java.lang.String[], int)
    {
        avrora.sim.FiniteStateMachine this;
        avrora.sim.FiniteStateMachine$TransitionEvent $stack6;
        avrora.sim.util.MulticastFSMProbe $stack7;
        avrora.sim.clock.Clock c;
        int ss, $stack8, $stack9, tt, $stack11;
        java.lang.String[] nm;
        avrora.sim.FiniteStateMachine$State[] $stack10;
        int[][] ttm;

        this := @this: avrora.sim.FiniteStateMachine;

        c := @parameter0: avrora.sim.clock.Clock;

        ss := @parameter1: int;

        nm := @parameter2: java.lang.String[];

        tt := @parameter3: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack6 = new avrora.sim.FiniteStateMachine$TransitionEvent;

        specialinvoke $stack6.<avrora.sim.FiniteStateMachine$TransitionEvent: void <init>(avrora.sim.FiniteStateMachine)>(this);

        this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent> = $stack6;

        $stack7 = new avrora.sim.util.MulticastFSMProbe;

        specialinvoke $stack7.<avrora.sim.util.MulticastFSMProbe: void <init>()>();

        this.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe> = $stack7;

        this.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock> = c;

        this.<avrora.sim.FiniteStateMachine: int startState> = ss;

        this.<avrora.sim.FiniteStateMachine: int curState> = ss;

        $stack8 = lengthof nm;

        this.<avrora.sim.FiniteStateMachine: int numStates> = $stack8;

        $stack9 = this.<avrora.sim.FiniteStateMachine: int numStates>;

        $stack10 = newarray (avrora.sim.FiniteStateMachine$State)[$stack9];

        this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states> = $stack10;

        $stack11 = this.<avrora.sim.FiniteStateMachine: int numStates>;

        ttm = staticinvoke <avrora.sim.FiniteStateMachine: int[][] buildUniformTTM(int,int)>($stack11, tt);

        specialinvoke this.<avrora.sim.FiniteStateMachine: void buildStates(java.lang.String[],int[][])>(nm, ttm);

        return;
    }

    public void <init>(avrora.sim.clock.Clock, int, java.lang.String[], int[][])
    {
        avrora.sim.FiniteStateMachine this;
        avrora.sim.FiniteStateMachine$TransitionEvent $stack5;
        avrora.sim.util.MulticastFSMProbe $stack6;
        avrora.sim.clock.Clock c;
        int ss, $stack7, $stack8;
        java.lang.String[] nm;
        avrora.sim.FiniteStateMachine$State[] $stack9;
        int[][] ttm;

        this := @this: avrora.sim.FiniteStateMachine;

        c := @parameter0: avrora.sim.clock.Clock;

        ss := @parameter1: int;

        nm := @parameter2: java.lang.String[];

        ttm := @parameter3: int[][];

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack5 = new avrora.sim.FiniteStateMachine$TransitionEvent;

        specialinvoke $stack5.<avrora.sim.FiniteStateMachine$TransitionEvent: void <init>(avrora.sim.FiniteStateMachine)>(this);

        this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent> = $stack5;

        $stack6 = new avrora.sim.util.MulticastFSMProbe;

        specialinvoke $stack6.<avrora.sim.util.MulticastFSMProbe: void <init>()>();

        this.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe> = $stack6;

        this.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock> = c;

        this.<avrora.sim.FiniteStateMachine: int startState> = ss;

        this.<avrora.sim.FiniteStateMachine: int curState> = ss;

        $stack7 = lengthof nm;

        this.<avrora.sim.FiniteStateMachine: int numStates> = $stack7;

        $stack8 = this.<avrora.sim.FiniteStateMachine: int numStates>;

        $stack9 = newarray (avrora.sim.FiniteStateMachine$State)[$stack8];

        this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states> = $stack9;

        specialinvoke this.<avrora.sim.FiniteStateMachine: void buildStates(java.lang.String[],int[][])>(nm, ttm);

        return;
    }

    private void buildStates(java.lang.String[], int[][])
    {
        avrora.sim.FiniteStateMachine this;
        int $stack4, cntr#1;
        avrora.sim.FiniteStateMachine$State $stack5;
        java.lang.String[] nm;
        int[][] ttm;
        int[] $stack6;
        java.lang.String $stack7;
        avrora.sim.FiniteStateMachine$State[] $stack8;

        this := @this: avrora.sim.FiniteStateMachine;

        nm := @parameter0: java.lang.String[];

        ttm := @parameter1: int[][];

        cntr#1 = 0;

     label1:
        $stack4 = this.<avrora.sim.FiniteStateMachine: int numStates>;

        if cntr#1 >= $stack4 goto label2;

        $stack8 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack5 = new avrora.sim.FiniteStateMachine$State;

        $stack7 = nm[cntr#1];

        $stack6 = ttm[cntr#1];

        specialinvoke $stack5.<avrora.sim.FiniteStateMachine$State: void <init>(avrora.sim.FiniteStateMachine,java.lang.String,int[])>(this, $stack7, $stack6);

        $stack8[cntr#1] = $stack5;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        return;
    }

    public void insertProbe(avrora.sim.FiniteStateMachine$Probe)
    {
        avrora.sim.FiniteStateMachine this;
        avrora.sim.FiniteStateMachine$Probe p;
        avrora.sim.util.MulticastFSMProbe $stack2;

        this := @this: avrora.sim.FiniteStateMachine;

        p := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        $stack2 = this.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        virtualinvoke $stack2.<avrora.sim.util.MulticastFSMProbe: void add(java.lang.Object)>(p);

        return;
    }

    public void removeProbe(avrora.sim.FiniteStateMachine$Probe)
    {
        avrora.sim.FiniteStateMachine this;
        avrora.sim.FiniteStateMachine$Probe p;
        avrora.sim.util.MulticastFSMProbe $stack2;

        this := @this: avrora.sim.FiniteStateMachine;

        p := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        $stack2 = this.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        virtualinvoke $stack2.<avrora.sim.util.MulticastFSMProbe: void remove(java.lang.Object)>(p);

        return;
    }

    public void insertProbe(avrora.sim.FiniteStateMachine$Probe, int)
    {
        avrora.sim.FiniteStateMachine this;
        int state;
        avrora.sim.FiniteStateMachine$State[] $stack3;
        avrora.sim.FiniteStateMachine$State $stack4;
        avrora.sim.FiniteStateMachine$Probe p;
        avrora.sim.util.MulticastFSMProbe $stack5;

        this := @this: avrora.sim.FiniteStateMachine;

        p := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        state := @parameter1: int;

        $stack3 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack4 = $stack3[state];

        $stack5 = $stack4.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        virtualinvoke $stack5.<avrora.sim.util.MulticastFSMProbe: void add(java.lang.Object)>(p);

        return;
    }

    public void removeProbe(avrora.sim.FiniteStateMachine$Probe, int)
    {
        avrora.sim.FiniteStateMachine this;
        int state;
        avrora.sim.FiniteStateMachine$State[] $stack3;
        avrora.sim.FiniteStateMachine$State $stack4;
        avrora.sim.FiniteStateMachine$Probe p;
        avrora.sim.util.MulticastFSMProbe $stack5;

        this := @this: avrora.sim.FiniteStateMachine;

        p := @parameter0: avrora.sim.FiniteStateMachine$Probe;

        state := @parameter1: int;

        $stack3 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack4 = $stack3[state];

        $stack5 = $stack4.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        virtualinvoke $stack5.<avrora.sim.util.MulticastFSMProbe: void remove(java.lang.Object)>(p);

        return;
    }

    public int getNumberOfStates()
    {
        avrora.sim.FiniteStateMachine this;
        int $stack1;

        this := @this: avrora.sim.FiniteStateMachine;

        $stack1 = this.<avrora.sim.FiniteStateMachine: int numStates>;

        return $stack1;
    }

    public int getStartState()
    {
        avrora.sim.FiniteStateMachine this;
        int $stack1;

        this := @this: avrora.sim.FiniteStateMachine;

        $stack1 = this.<avrora.sim.FiniteStateMachine: int startState>;

        return $stack1;
    }

    public int getCurrentState()
    {
        avrora.sim.FiniteStateMachine this;
        int $stack1;

        this := @this: avrora.sim.FiniteStateMachine;

        $stack1 = this.<avrora.sim.FiniteStateMachine: int curState>;

        return $stack1;
    }

    public void transition(int)
    {
        avrora.sim.FiniteStateMachine this;
        int $stack4, $stack5, newState, ttime, $stack9, $stack11, $stack14, $stack18, $stack20, oldState, $stack35, $stack46, $stack50;
        avrora.sim.FiniteStateMachine$State[] $stack6, $stack12, $stack16, $stack26, $stack29;
        avrora.sim.FiniteStateMachine$State $stack7, $stack13, $stack17, $stack27, $stack30;
        int[] $stack8;
        avrora.sim.util.MulticastFSMProbe $stack10, $stack15, $stack19, $stack28, $stack31, $stack32;
        avrora.sim.FiniteStateMachine$TransitionEvent $stack21, $stack22, $stack24, $stack45, $stack49;
        long $stack23;
        avrora.sim.clock.Clock $stack25;
        java.lang.StringBuilder $stack33, $stack34, $stack36, $stack37, $stack38, $stack41, $stack42, $stack43, $stack44, $stack47, $stack48, $stack51;
        java.lang.String $stack39, $stack52;
        cck.util.Util$InternalError $stack40, $stack53;

        this := @this: avrora.sim.FiniteStateMachine;

        newState := @parameter0: int;

        $stack4 = this.<avrora.sim.FiniteStateMachine: int curState>;

        if $stack4 != -1 goto label1;

        $stack41 = new java.lang.StringBuilder;

        specialinvoke $stack41.<java.lang.StringBuilder: void <init>()>();

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot transition to state ");

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(newState);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while in transition: ");

        $stack45 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $stack46 = $stack45.<avrora.sim.FiniteStateMachine$TransitionEvent: int oldState>;

        $stack47 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack46);

        $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $stack49 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $stack50 = $stack49.<avrora.sim.FiniteStateMachine$TransitionEvent: int newState>;

        $stack51 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack50);

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack53 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack52);

        throw $stack53;

     label1:
        $stack6 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack5 = this.<avrora.sim.FiniteStateMachine: int curState>;

        $stack7 = $stack6[$stack5];

        $stack8 = $stack7.<avrora.sim.FiniteStateMachine$State: int[] transition_time>;

        ttime = $stack8[newState];

        if ttime >= 0 goto label2;

        $stack33 = new java.lang.StringBuilder;

        specialinvoke $stack33.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot transition from state ");

        $stack35 = this.<avrora.sim.FiniteStateMachine: int curState>;

        $stack36 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack35);

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(newState);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack40 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack39);

        throw $stack40;

     label2:
        $stack10 = this.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        $stack9 = this.<avrora.sim.FiniteStateMachine: int curState>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireBefore(avrora.sim.util.MulticastFSMProbe,int,int)>($stack10, $stack9, newState);

        $stack12 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack11 = this.<avrora.sim.FiniteStateMachine: int curState>;

        $stack13 = $stack12[$stack11];

        $stack15 = $stack13.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        $stack14 = this.<avrora.sim.FiniteStateMachine: int curState>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireBefore(avrora.sim.util.MulticastFSMProbe,int,int)>($stack15, $stack14, newState);

        $stack16 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack17 = $stack16[newState];

        $stack19 = $stack17.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        $stack18 = this.<avrora.sim.FiniteStateMachine: int curState>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireBefore(avrora.sim.util.MulticastFSMProbe,int,int)>($stack19, $stack18, newState);

        if ttime != 0 goto label3;

        oldState = this.<avrora.sim.FiniteStateMachine: int curState>;

        this.<avrora.sim.FiniteStateMachine: int curState> = newState;

        $stack26 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack27 = $stack26[oldState];

        $stack28 = $stack27.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>($stack28, oldState, newState);

        $stack29 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack30 = $stack29[newState];

        $stack31 = $stack30.<avrora.sim.FiniteStateMachine$State: avrora.sim.util.MulticastFSMProbe probes>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>($stack31, oldState, newState);

        $stack32 = this.<avrora.sim.FiniteStateMachine: avrora.sim.util.MulticastFSMProbe globalProbe>;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>($stack32, oldState, newState);

        goto label4;

     label3:
        $stack21 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $stack20 = this.<avrora.sim.FiniteStateMachine: int curState>;

        $stack21.<avrora.sim.FiniteStateMachine$TransitionEvent: int oldState> = $stack20;

        $stack22 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $stack22.<avrora.sim.FiniteStateMachine$TransitionEvent: int newState> = newState;

        $stack25 = this.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock>;

        $stack24 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$TransitionEvent transEvent>;

        $stack23 = (long) ttime;

        virtualinvoke $stack25.<avrora.sim.clock.Clock: void insertEvent(avrora.sim.Simulator$Event,long)>($stack24, $stack23);

     label4:
        return;
    }

    public int getTransitionTime(int, int)
    {
        avrora.sim.FiniteStateMachine this;
        int beforeState, afterState, $stack6;
        avrora.sim.FiniteStateMachine$State[] $stack3;
        avrora.sim.FiniteStateMachine$State $stack4;
        int[] $stack5;

        this := @this: avrora.sim.FiniteStateMachine;

        beforeState := @parameter0: int;

        afterState := @parameter1: int;

        $stack3 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack4 = $stack3[beforeState];

        $stack5 = $stack4.<avrora.sim.FiniteStateMachine$State: int[] transition_time>;

        $stack6 = $stack5[afterState];

        return $stack6;
    }

    public java.lang.String getStateName(int)
    {
        avrora.sim.FiniteStateMachine this;
        int state;
        avrora.sim.FiniteStateMachine$State[] $stack2;
        avrora.sim.FiniteStateMachine$State $stack3;
        java.lang.String $stack4;

        this := @this: avrora.sim.FiniteStateMachine;

        state := @parameter0: int;

        $stack2 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack3 = $stack2[state];

        $stack4 = $stack3.<avrora.sim.FiniteStateMachine$State: java.lang.String name>;

        return $stack4;
    }

    public java.lang.String getCurrentStateName()
    {
        avrora.sim.FiniteStateMachine this;
        int $stack1;
        avrora.sim.FiniteStateMachine$State[] $stack2;
        avrora.sim.FiniteStateMachine$State $stack3;
        java.lang.String $stack4;

        this := @this: avrora.sim.FiniteStateMachine;

        $stack2 = this.<avrora.sim.FiniteStateMachine: avrora.sim.FiniteStateMachine$State[] states>;

        $stack1 = this.<avrora.sim.FiniteStateMachine: int curState>;

        $stack3 = $stack2[$stack1];

        $stack4 = $stack3.<avrora.sim.FiniteStateMachine$State: java.lang.String name>;

        return $stack4;
    }

    public avrora.sim.clock.Clock getClock()
    {
        avrora.sim.FiniteStateMachine this;
        avrora.sim.clock.Clock $stack1;

        this := @this: avrora.sim.FiniteStateMachine;

        $stack1 = this.<avrora.sim.FiniteStateMachine: avrora.sim.clock.Clock clock>;

        return $stack1;
    }

    public static int[][] buildUniformTTM(int, int)
    {
        int size, tt, cntr#1, loop#2;
        int[][] ttm;
        int[] $stack8;

        size := @parameter0: int;

        tt := @parameter1: int;

        ttm = newmultiarray (int)[size][size];

        if tt == 0 goto label4;

        cntr#1 = 0;

     label1:
        if cntr#1 >= size goto label4;

        loop#2 = 0;

     label2:
        if loop#2 >= size goto label3;

        $stack8 = ttm[cntr#1];

        $stack8[loop#2] = tt;

        loop#2 = loop#2 + 1;

        goto label2;

     label3:
        cntr#1 = cntr#1 + 1;

        goto label1;

     label4:
        return ttm;
    }

    public static int[][] buildSparseTTM(int, int)
    {
        int size, tt, cntr#1;
        int[][] ttm;
        int[] row;

        size := @parameter0: int;

        tt := @parameter1: int;

        ttm = newarray (int[])[size];

        row = newarray (int)[size];

        cntr#1 = 0;

     label1:
        if cntr#1 >= size goto label2;

        ttm[cntr#1] = row;

        row[cntr#1] = tt;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        return ttm;
    }

    public static int[][] buildBimodalTTM(int, int, int[], int[])
    {
        int size, ds, $stack10, $stack12, cntr#1, loop#2;
        int[][] ttm;
        int[] tf, $stack11, tt, $stack13;

        size := @parameter0: int;

        ds := @parameter1: int;

        tf := @parameter2: int[];

        tt := @parameter3: int[];

        ttm = staticinvoke <avrora.sim.FiniteStateMachine: int[][] newTTM(int)>(size);

        cntr#1 = 0;

     label1:
        if cntr#1 >= size goto label4;

        loop#2 = 0;

     label2:
        if loop#2 >= size goto label3;

        $stack11 = ttm[cntr#1];

        $stack10 = tf[cntr#1];

        $stack11[ds] = $stack10;

        $stack13 = ttm[ds];

        $stack12 = tt[cntr#1];

        $stack13[cntr#1] = $stack12;

        loop#2 = loop#2 + 1;

        goto label2;

     label3:
        cntr#1 = cntr#1 + 1;

        goto label1;

     label4:
        return ttm;
    }

    public static int[][] setCircularTTM(int[][], int[], int[])
    {
        int[][] ttm;
        int size, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, cntr#1;
        int[] perm, tt, $stack11, $stack18;

        ttm := @parameter0: int[][];

        perm := @parameter1: int[];

        tt := @parameter2: int[];

        size = lengthof ttm;

        cntr#1 = 0;

     label1:
        $stack5 = size - 1;

        if cntr#1 >= $stack5 goto label2;

        $stack12 = perm[cntr#1];

        $stack18 = ttm[$stack12];

        $stack13 = cntr#1 + 1;

        $stack17 = perm[$stack13];

        $stack14 = cntr#1 + 1;

        $stack15 = perm[$stack14];

        $stack16 = tt[$stack15];

        $stack18[$stack17] = $stack16;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        $stack6 = size - 1;

        $stack7 = perm[$stack6];

        $stack11 = ttm[$stack7];

        $stack10 = perm[0];

        $stack8 = perm[0];

        $stack9 = tt[$stack8];

        $stack11[$stack10] = $stack9;

        return ttm;
    }

    public static int[][] newTTM(int)
    {
        int size, cntr#1, loop#2;
        int[][] ttm;
        int[] $stack6;

        size := @parameter0: int;

        ttm = newmultiarray (int)[size][size];

        cntr#1 = 0;

     label1:
        if cntr#1 >= size goto label4;

        loop#2 = 0;

     label2:
        if loop#2 >= size goto label3;

        $stack6 = ttm[cntr#1];

        $stack6[loop#2] = -1;

        loop#2 = loop#2 + 1;

        goto label2;

     label3:
        cntr#1 = cntr#1 + 1;

        goto label1;

     label4:
        return ttm;
    }

    public static int[][] setDiagonal(int[][], int)
    {
        int[][] ttm;
        int $stack3, diag, cntr#1;
        int[] $stack4;

        ttm := @parameter0: int[][];

        diag := @parameter1: int;

        cntr#1 = 0;

     label1:
        $stack3 = lengthof ttm;

        if cntr#1 >= $stack3 goto label2;

        $stack4 = ttm[cntr#1];

        $stack4[cntr#1] = diag;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        return ttm;
    }

    static void access$000(avrora.sim.util.MulticastFSMProbe, int, int)
    {
        avrora.sim.util.MulticastFSMProbe x0;
        int x1, x2;

        x0 := @parameter0: avrora.sim.util.MulticastFSMProbe;

        x1 := @parameter1: int;

        x2 := @parameter2: int;

        staticinvoke <avrora.sim.FiniteStateMachine: void fireAfter(avrora.sim.util.MulticastFSMProbe,int,int)>(x0, x1, x2);

        return;
    }

    public static void <clinit>()
    {
        <avrora.sim.FiniteStateMachine: int IN_TRANSITION> = -1;

        return;
    }
}
