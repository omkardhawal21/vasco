public class org.dacapo.harness.TestHarness extends java.lang.Object
{
    public static final java.lang.String BUILD_NICKNAME;
    public static final java.lang.String BUILD_VERSION;
    private static java.lang.String BuildNickName;
    private static java.lang.String BuildVersion;
    private final org.dacapo.parser.Config config;
    private static org.dacapo.harness.CommandLineArgs commandLineArgs;

    public static java.lang.String getBuildNickName()
    {
        java.lang.String $stack0;

        $stack0 = <org.dacapo.harness.TestHarness: java.lang.String BuildNickName>;

        return $stack0;
    }

    public static java.lang.String getBuildVersion()
    {
        java.lang.String $stack0;

        $stack0 = <org.dacapo.harness.TestHarness: java.lang.String BuildVersion>;

        return $stack0;
    }

    public static double coeff_of_var(long[])
    {
        long[] times;
        int $stack11, $stack12, i#3;
        double n, $stack13, $stack14, $stack15, $stack16, sigma, $stack18, x, $stack20, sum#1, sum2#2, i#4;
        long $stack19;

        times := @parameter0: long[];

        $stack11 = lengthof times;

        n = (double) $stack11;

        sum#1 = 0.0;

        sum2#2 = 0.0;

        i#3 = 0;

     label1:
        $stack12 = lengthof times;

        if i#3 >= $stack12 goto label2;

        $stack19 = times[i#3];

        x = (double) $stack19;

        sum#1 = sum#1 + x;

        $stack20 = x * x;

        sum2#2 = sum2#2 + $stack20;

        i#3 = i#3 + 1;

        goto label1;

     label2:
        i#4 = sum#1 / n;

        $stack13 = 1.0 / n;

        $stack15 = $stack13 * sum2#2;

        $stack14 = i#4 * i#4;

        $stack16 = $stack15 - $stack14;

        sigma = staticinvoke <java.lang.Math: double sqrt(double)>($stack16);

        $stack18 = sigma / i#4;

        return $stack18;
    }

    public static void main(java.lang.String[])
    {
        java.util.Locale $stack10;
        org.dacapo.harness.CommandLineArgs $stack12, $stack14, $stack16, $stack17, $stack20, $stack25, $stack27, $stack40, $stack42, $stack31#19, $stack35#35, $stack45#49;
        java.lang.String[] args;
        java.io.File $stack13;
        java.lang.String $stack15, $stack18, bm, $stack26, $stack61, $stack88, $stack108, $stack131, $stack143, cnf#9, cnf#10, e#22, $stack36#37, $stack85#44, $stack58#45;
        int $stack19, limit, $stack52, $stack64, $stack74, $stack79, factor#25;
        java.lang.Iterable $stack21;
        java.lang.Object $stack24;
        java.io.FileInputStream $stack29;
        boolean $stack38, $stack39, $stack41, $stack43, $stack44, $stack23#7, $stack46#51;
        java.lang.StringBuilder $stack48, $stack50, $stack53, $stack54, $stack55, $stack56, $stack57, $stack59, $stack60, $stack75, $stack77, $stack80, $stack81, $stack82, $stack83, $stack84, $stack86, $stack87, $stack101, $stack103, $stack104, $stack105, $stack106, $stack107, $stack113, $stack114, $stack115, $stack116, $stack127, $stack129, $stack130, $stack138, $stack140, $stack141, $stack142;
        java.io.PrintStream $stack49, $stack76, $stack100, $stack102, $stack128, $stack133, $stack139;
        org.dacapo.parser.Config $stack51, $stack62, $stack63, $stack73, $stack78, $stack95, $stack109, $stack112, $stack33#29;
        org.dacapo.parser.Config$ThreadModel $stack96, $stack97, $stack110, $stack111;
        java.lang.Class $stack118;
        java.lang.ClassLoader $stack119;
        java.lang.Exception $stack132;
        java.lang.RuntimeException $stack134, $stack144;
        java.io.FileNotFoundException $stack137;
        java.util.Iterator l2#3;
        java.io.InputStream ins#8;
        org.dacapo.harness.TestHarness $stack30#14;

        args := @parameter0: java.lang.String[];

        $stack10 = new java.util.Locale;

        specialinvoke $stack10.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("en", "AU");

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack10);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.awt.headless", "true");

     label01:
        $stack12 = new org.dacapo.harness.CommandLineArgs;

        specialinvoke $stack12.<org.dacapo.harness.CommandLineArgs: void <init>(java.lang.String[])>(args);

        <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs> = $stack12;

        $stack13 = new java.io.File;

        $stack14 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack15 = virtualinvoke $stack14.<org.dacapo.harness.CommandLineArgs: java.lang.String getScratchDir()>();

        specialinvoke $stack13.<java.io.File: void <init>(java.lang.String)>($stack15);

        staticinvoke <org.dacapo.harness.TestHarness: void makeCleanScratch(java.io.File)>($stack13);

        $stack16 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        staticinvoke <org.dacapo.harness.Benchmark: void setCommandLineOptions(org.dacapo.harness.CommandLineArgs)>($stack16);

     label02:
        $stack17 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack18 = virtualinvoke $stack17.<org.dacapo.harness.CommandLineArgs: java.lang.String getThreadCount()>();

        $stack19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack18);

        staticinvoke <org.dacapo.parser.Config: void setThreadCountOverride(int)>($stack19);

     label03:
        goto label05;

     label04:
        $stack144 := @caughtexception;

     label05:
        $stack20 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack21 = virtualinvoke $stack20.<org.dacapo.harness.CommandLineArgs: java.lang.Iterable benchmarks()>();

        l2#3 = interfaceinvoke $stack21.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $stack23#7 = interfaceinvoke l2#3.<java.util.Iterator: boolean hasNext()>();

        if $stack23#7 == 0 goto label29;

        $stack24 = interfaceinvoke l2#3.<java.util.Iterator: java.lang.Object next()>();

        bm = (java.lang.String) $stack24;

        ins#8 = null;

        $stack25 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack26 = virtualinvoke $stack25.<org.dacapo.harness.CommandLineArgs: java.lang.String getCnfOverride()>();

        if $stack26 != null goto label08;

        $stack113 = new java.lang.StringBuilder;

        specialinvoke $stack113.<java.lang.StringBuilder: void <init>()>();

        $stack114 = virtualinvoke $stack113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cnf/");

        $stack115 = virtualinvoke $stack114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(bm);

        $stack116 = virtualinvoke $stack115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".cnf");

        cnf#9 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack118 = class "Lorg/dacapo/harness/TestHarness;";

        $stack119 = virtualinvoke $stack118.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        ins#8 = virtualinvoke $stack119.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(cnf#9);

        if ins#8 != null goto label07;

        $stack128 = <java.lang.System: java.io.PrintStream err>;

        $stack127 = new java.lang.StringBuilder;

        specialinvoke $stack127.<java.lang.StringBuilder: void <init>()>();

        $stack129 = virtualinvoke $stack127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown benchmark: ");

        $stack130 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(bm);

        $stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack128.<java.io.PrintStream: void println(java.lang.String)>($stack131);

        staticinvoke <java.lang.System: void exit(int)>(20);

     label07:
        goto label12;

     label08:
        $stack27 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        cnf#10 = virtualinvoke $stack27.<org.dacapo.harness.CommandLineArgs: java.lang.String getCnfOverride()>();

     label09:
        $stack29 = new java.io.FileInputStream;

        specialinvoke $stack29.<java.io.FileInputStream: void <init>(java.lang.String)>(cnf#10);

        ins#8 = $stack29;

     label10:
        goto label12;

     label11:
        $stack137 := @caughtexception;

        $stack139 = <java.lang.System: java.io.PrintStream err>;

        $stack138 = new java.lang.StringBuilder;

        specialinvoke $stack138.<java.lang.StringBuilder: void <init>()>();

        $stack140 = virtualinvoke $stack138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count not find cnf file: \'");

        $stack141 = virtualinvoke $stack140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(cnf#10);

        $stack142 = virtualinvoke $stack141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack143 = virtualinvoke $stack142.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack139.<java.io.PrintStream: void println(java.lang.String)>($stack143);

        staticinvoke <java.lang.System: void exit(int)>(20);

     label12:
        $stack30#14 = new org.dacapo.harness.TestHarness;

        specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: void <init>(java.io.InputStream)>(ins#8);

        $stack31#19 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        e#22 = virtualinvoke $stack31#19.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        factor#25 = 0;

        $stack33#29 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        limit = virtualinvoke $stack33#29.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(e#22);

     label13:
        $stack35#35 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack36#37 = virtualinvoke $stack35#35.<org.dacapo.harness.CommandLineArgs: java.lang.String getThreadFactor()>();

        factor#25 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack36#37);

        if 0 >= factor#25 goto label14;

        $stack109 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack110 = virtualinvoke $stack109.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $stack111 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $stack110 != $stack111 goto label14;

        $stack112 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        virtualinvoke $stack112.<org.dacapo.parser.Config: void setThreadFactor(java.lang.String,int)>(e#22, factor#25);

     label14:
        goto label16;

     label15:
        $stack134 := @caughtexception;

     label16:
        $stack38 = specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: boolean isValidSize(java.lang.String)>(e#22);

        if $stack38 != 0 goto label17;

        $stack102 = <java.lang.System: java.io.PrintStream err>;

        $stack101 = new java.lang.StringBuilder;

        specialinvoke $stack101.<java.lang.StringBuilder: void <init>()>();

        $stack103 = virtualinvoke $stack101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No configuration size, ");

        $stack104 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(e#22);

        $stack105 = virtualinvoke $stack104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for benchmark ");

        $stack106 = virtualinvoke $stack105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(bm);

        $stack107 = virtualinvoke $stack106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack108 = virtualinvoke $stack107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack102.<java.io.PrintStream: void println(java.lang.String)>($stack108);

        goto label28;

     label17:
        if factor#25 == 0 goto label18;

        $stack95 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack96 = virtualinvoke $stack95.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $stack97 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $stack96 == $stack97 goto label18;

        $stack100 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack100.<java.io.PrintStream: void println(java.lang.String)>("Can only set the thread factor for per_cpu configurable benchmarks");

        goto label28;

     label18:
        $stack39 = specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>(e#22);

        if $stack39 != 0 goto label22;

        $stack73 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack74 = staticinvoke <org.dacapo.parser.Config: int getThreadCountOverride()>();

        if $stack74 > 0 goto label19;

        if factor#25 <= 0 goto label22;

     label19:
        $stack76 = <java.lang.System: java.io.PrintStream err>;

        $stack75 = new java.lang.StringBuilder;

        specialinvoke $stack75.<java.lang.StringBuilder: void <init>()>();

        $stack77 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified number of threads (");

        $stack78 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack79 = virtualinvoke $stack78.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(e#22);

        $stack80 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack79);

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the range [1,");

        if limit != 0 goto label20;

        $stack85#44 = "unlimited";

        goto label21;

     label20:
        $stack82 = new java.lang.StringBuilder;

        specialinvoke $stack82.<java.lang.StringBuilder: void <init>()>();

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(limit);

        $stack85#44 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        $stack86 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack85#44);

        $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack88 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack76.<java.io.PrintStream: void println(java.lang.String)>($stack88);

        goto label28;

     label22:
        $stack40 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack41 = virtualinvoke $stack40.<org.dacapo.harness.CommandLineArgs: boolean getInformation()>();

        if $stack41 == 0 goto label23;

        specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: void bmInfo(java.lang.String)>(e#22);

        goto label28;

     label23:
        $stack42 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack43 = virtualinvoke $stack42.<org.dacapo.harness.CommandLineArgs: boolean getSizes()>();

        if $stack43 == 0 goto label24;

        specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: void bmSizes()>();

        goto label28;

     label24:
        $stack44 = specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>(e#22);

        if $stack44 != 0 goto label27;

        $stack49 = <java.lang.System: java.io.PrintStream err>;

        $stack48 = new java.lang.StringBuilder;

        specialinvoke $stack48.<java.lang.StringBuilder: void <init>()>();

        $stack50 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The derived number of threads (");

        $stack51 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack52 = virtualinvoke $stack51.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(e#22);

        $stack53 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack52);

        $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the range [1,");

        if limit != 0 goto label25;

        $stack58#45 = "unlimited";

        goto label26;

     label25:
        $stack55 = new java.lang.StringBuilder;

        specialinvoke $stack55.<java.lang.StringBuilder: void <init>()>();

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(limit);

        $stack58#45 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.String toString()>();

     label26:
        $stack59 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack58#45);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; rescaling to match thread limit.");

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack49.<java.io.PrintStream: void println(java.lang.String)>($stack61);

        $stack62 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack63 = $stack30#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack64 = virtualinvoke $stack63.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(e#22);

        staticinvoke <org.dacapo.parser.Config: void setThreadCountOverride(int)>($stack64);

     label27:
        $stack45#49 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack46#51 = virtualinvoke $stack45#49.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        specialinvoke $stack30#14.<org.dacapo.harness.TestHarness: void dump(boolean)>($stack46#51);

        staticinvoke <org.dacapo.harness.TestHarness: void runBenchmark(java.io.File,java.lang.String,org.dacapo.harness.TestHarness)>($stack13, bm, $stack30#14);

     label28:
        goto label06;

     label29:
        goto label31;

     label30:
        $stack132 := @caughtexception;

        $stack133 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack133.<java.io.PrintStream: void println(java.lang.Object)>($stack132);

        virtualinvoke $stack132.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label31:
        return;

        catch java.lang.RuntimeException from label02 to label03 with label04;
        catch java.io.FileNotFoundException from label09 to label10 with label11;
        catch java.lang.RuntimeException from label13 to label14 with label15;
        catch java.lang.Exception from label01 to label29 with label30;
    }

    public static void makeCleanScratch(java.io.File)
    {
        java.io.File scratch;

        scratch := @parameter0: java.io.File;

        staticinvoke <org.dacapo.harness.TestHarness: void rmdir(java.io.File)>(scratch);

        virtualinvoke scratch.<java.io.File: boolean mkdir()>();

        return;
    }

    private boolean isValidSize(java.lang.String)
    {
        java.lang.String size;
        org.dacapo.harness.TestHarness this;
        org.dacapo.parser.Config $stack2;
        java.util.Collection $stack3;
        boolean $stack4, $stack5#1;

        this := @this: org.dacapo.harness.TestHarness;

        size := @parameter0: java.lang.String;

        if size == null goto label1;

        $stack2 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack3 = virtualinvoke $stack2.<org.dacapo.parser.Config: java.util.Collection getSizes()>();

        $stack4 = interfaceinvoke $stack3.<java.util.Collection: boolean contains(java.lang.Object)>(size);

        if $stack4 == 0 goto label1;

        $stack5#1 = 1;

        goto label2;

     label1:
        $stack5#1 = 0;

     label2:
        return $stack5#1;
    }

    private boolean isValidThreadCount(java.lang.String)
    {
        org.dacapo.harness.TestHarness this;
        java.lang.String size;
        org.dacapo.parser.Config $stack2, $stack4, $stack6;
        int $stack3, $stack5, $stack7;
        boolean $stack8#1;

        this := @this: org.dacapo.harness.TestHarness;

        size := @parameter0: java.lang.String;

        $stack2 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack3 = virtualinvoke $stack2.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(size);

        if $stack3 == 0 goto label1;

        $stack4 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack5 = virtualinvoke $stack4.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(size);

        $stack6 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack7 = virtualinvoke $stack6.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(size);

        if $stack5 > $stack7 goto label2;

     label1:
        $stack8#1 = 1;

        goto label3;

     label2:
        $stack8#1 = 0;

     label3:
        return $stack8#1;
    }

    private static void runBenchmark(java.io.File, java.lang.String, org.dacapo.harness.TestHarness) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.Exception
    {
        org.dacapo.harness.TestHarness harness;
        org.dacapo.harness.CommandLineArgs $stack7, $stack11, $stack19, $stack22, $stack33, $stack37;
        org.dacapo.parser.Config $stack8, $stack17, $stack21;
        java.io.PrintStream $stack9, $stack29;
        java.lang.String $stack10, $stack23, bm, $stack34, $stack36;
        boolean $stack12, $stack24, $stack38, valid#1, $stack39#2, $stack25#6;
        java.lang.Class $stack13;
        java.lang.Class[] $stack14;
        java.lang.reflect.Constructor cons;
        java.lang.Object[] $stack16;
        java.io.File scratch;
        java.lang.Object $stack18;
        org.dacapo.harness.Benchmark b;
        org.dacapo.harness.Callback callback;
        java.lang.StringBuilder $stack28, $stack30, $stack31, $stack32, $stack35;

        scratch := @parameter0: java.io.File;

        bm := @parameter1: java.lang.String;

        harness := @parameter2: org.dacapo.harness.TestHarness;

        $stack8 = harness.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        $stack7 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack10 = virtualinvoke $stack7.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $stack11 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack12 = virtualinvoke $stack11.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        virtualinvoke $stack8.<org.dacapo.parser.Config: void printThreadModel(java.io.PrintStream,java.lang.String,boolean)>($stack9, $stack10, $stack12);

        $stack13 = specialinvoke harness.<org.dacapo.harness.TestHarness: java.lang.Class findClass()>();

        $stack14 = newarray (java.lang.Class)[2];

        $stack14[0] = class "Lorg/dacapo/parser/Config;";

        $stack14[1] = class "Ljava/io/File;";

        cons = virtualinvoke $stack13.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack14);

        $stack16 = newarray (java.lang.Object)[2];

        $stack17 = harness.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack16[0] = $stack17;

        $stack16[1] = scratch;

        $stack18 = virtualinvoke cons.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack16);

        b = (org.dacapo.harness.Benchmark) $stack18;

        valid#1 = 1;

        $stack19 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        callback = virtualinvoke $stack19.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback getCallback()>();

        $stack21 = harness.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        virtualinvoke callback.<org.dacapo.harness.Callback: void init(org.dacapo.parser.Config)>($stack21);

     label1:
        $stack22 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack23 = virtualinvoke $stack22.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $stack24 = virtualinvoke b.<org.dacapo.harness.Benchmark: boolean run(org.dacapo.harness.Callback,java.lang.String)>(callback, $stack23);

        if $stack24 == 0 goto label2;

        if valid#1 == 0 goto label2;

        $stack39#2 = 1;

        goto label3;

     label2:
        $stack39#2 = 0;

     label3:
        valid#1 = $stack39#2;

        $stack25#6 = virtualinvoke callback.<org.dacapo.harness.Callback: boolean runAgain()>();

        if $stack25#6 != 0 goto label1;

        virtualinvoke b.<org.dacapo.harness.Benchmark: void cleanup()>();

        if $stack39#2 != 0 goto label4;

        $stack29 = <java.lang.System: java.io.PrintStream err>;

        $stack28 = new java.lang.StringBuilder;

        specialinvoke $stack28.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation FAILED for ");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(bm);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack33 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack34 = virtualinvoke $stack33.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $stack35 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack29.<java.io.PrintStream: void println(java.lang.String)>($stack36);

        $stack37 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack38 = virtualinvoke $stack37.<org.dacapo.harness.CommandLineArgs: boolean getIgnoreValidation()>();

        if $stack38 != 0 goto label4;

        staticinvoke <java.lang.System: void exit(int)>(-2);

     label4:
        return;
    }

    private static void rmdir(java.io.File)
    {
        java.io.File dir, $stack6;
        java.lang.String[] files;
        int $stack5, f#1;
        java.lang.String $stack7, $stack15, $stack17;
        boolean $stack8, $stack9;
        java.lang.StringBuilder $stack12, $stack14, $stack16;
        java.io.PrintStream $stack13;

        dir := @parameter0: java.io.File;

        files = virtualinvoke dir.<java.io.File: java.lang.String[] list()>();

        if files == null goto label4;

        f#1 = 0;

     label1:
        $stack5 = lengthof files;

        if f#1 >= $stack5 goto label4;

        $stack6 = new java.io.File;

        $stack7 = files[f#1];

        specialinvoke $stack6.<java.io.File: void <init>(java.io.File,java.lang.String)>(dir, $stack7);

        $stack8 = virtualinvoke $stack6.<java.io.File: boolean isDirectory()>();

        if $stack8 == 0 goto label2;

        staticinvoke <org.dacapo.harness.TestHarness: void rmdir(java.io.File)>($stack6);

     label2:
        $stack9 = virtualinvoke $stack6.<java.io.File: boolean delete()>();

        if $stack9 != 0 goto label3;

        $stack13 = <java.lang.System: java.io.PrintStream err>;

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete ");

        $stack15 = files[f#1];

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack13.<java.io.PrintStream: void println(java.lang.String)>($stack17);

     label3:
        f#1 = f#1 + 1;

        goto label1;

     label4:
        return;
    }

    private void bmInfo(java.lang.String)
    {
        org.dacapo.harness.TestHarness this;
        java.lang.String size;
        java.io.PrintStream $stack2;
        org.dacapo.parser.Config $stack3;

        this := @this: org.dacapo.harness.TestHarness;

        size := @parameter0: java.lang.String;

        $stack3 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack3.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String)>($stack2, size);

        return;
    }

    private void bmSizes()
    {
        org.dacapo.harness.TestHarness this;
        java.io.PrintStream $stack1;
        org.dacapo.parser.Config $stack2;

        this := @this: org.dacapo.harness.TestHarness;

        $stack2 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack2.<org.dacapo.parser.Config: void describeSizes(java.io.PrintStream)>($stack1);

        return;
    }

    private void dump(boolean)
    {
        boolean verbose;
        java.lang.StringBuilder $stack2, $stack4, $stack7;
        java.io.PrintStream $stack3, $stack9, $stack12;
        org.dacapo.harness.TestHarness this;
        org.dacapo.parser.Config $stack5, $stack11;
        java.lang.String $stack6, $stack8, $stack13;
        org.dacapo.harness.CommandLineArgs $stack10;

        this := @this: org.dacapo.harness.TestHarness;

        verbose := @parameter0: boolean;

        if verbose == 0 goto label1;

        $stack3 = <java.lang.System: java.io.PrintStream err>;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class name: ");

        $stack5 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack6 = $stack5.<org.dacapo.parser.Config: java.lang.String className>;

        $stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack3.<java.io.PrintStream: void println(java.lang.String)>($stack8);

        $stack9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.String)>("Configurations:");

        $stack11 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack12 = <java.lang.System: java.io.PrintStream err>;

        $stack10 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack13 = virtualinvoke $stack10.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        virtualinvoke $stack11.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String)>($stack12, $stack13);

     label1:
        return;
    }

    private void <init>(java.io.InputStream)
    {
        org.dacapo.harness.TestHarness this;
        java.lang.Class $stack8;
        java.security.ProtectionDomain $stack9;
        java.security.CodeSource $stack10;
        java.net.URL $stack11;
        java.util.jar.JarFile $stack13;
        java.lang.String $stack14, $stack15, nickname, version, url#1;
        java.util.jar.Manifest manifest;
        java.util.jar.Attributes attributes;
        java.util.jar.Attributes$Name $stack18, $stack21;
        java.lang.Object $stack19, $stack22;
        java.io.InputStream stream;
        org.dacapo.parser.Config $stack24, $stack25;
        java.lang.Exception $stack26;

        this := @this: org.dacapo.harness.TestHarness;

        stream := @parameter0: java.io.InputStream;

        specialinvoke this.<java.lang.Object: void <init>()>();

     label1:
        $stack8 = class "Lorg/dacapo/harness/TestHarness;";

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $stack10 = virtualinvoke $stack9.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        $stack11 = virtualinvoke $stack10.<java.security.CodeSource: java.net.URL getLocation()>();

        url#1 = virtualinvoke $stack11.<java.net.URL: java.lang.String getFile()>();

        $stack13 = new java.util.jar.JarFile;

        $stack14 = virtualinvoke url#1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("!/harness", "");

        $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file:", "");

        specialinvoke $stack13.<java.util.jar.JarFile: void <init>(java.lang.String)>($stack15);

        manifest = virtualinvoke $stack13.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();

        attributes = virtualinvoke manifest.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        $stack18 = new java.util.jar.Attributes$Name;

        specialinvoke $stack18.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>("Specification-Version");

        $stack19 = virtualinvoke attributes.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($stack18);

        nickname = virtualinvoke $stack19.<java.lang.Object: java.lang.String toString()>();

        $stack21 = new java.util.jar.Attributes$Name;

        specialinvoke $stack21.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>("Implementation-Version");

        $stack22 = virtualinvoke attributes.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($stack21);

        version = virtualinvoke $stack22.<java.lang.Object: java.lang.String toString()>();

        <org.dacapo.harness.TestHarness: java.lang.String BuildNickName> = nickname;

        <org.dacapo.harness.TestHarness: java.lang.String BuildVersion> = version;

     label2:
        goto label4;

     label3:
        $stack26 := @caughtexception;

        <org.dacapo.harness.TestHarness: java.lang.String BuildNickName> = "Unknown";

        <org.dacapo.harness.TestHarness: java.lang.String BuildVersion> = "unknown";

     label4:
        $stack24 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.InputStream)>(stream);

        this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config> = $stack24;

        $stack25 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        if $stack25 != null goto label5;

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.Class findClass()
    {
        org.dacapo.harness.TestHarness this;
        org.dacapo.parser.Config $stack2;
        java.lang.String $stack3;
        java.lang.Class $stack4;
        java.lang.ClassNotFoundException $stack5;
        java.io.PrintStream $stack6;

        this := @this: org.dacapo.harness.TestHarness;

     label1:
        $stack2 = this.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack3 = $stack2.<org.dacapo.parser.Config: java.lang.String className>;

        $stack4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($stack3);

     label2:
        return $stack4;

     label3:
        $stack5 := @caughtexception;

        $stack6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.Object)>($stack5);

        virtualinvoke $stack5.<java.lang.ClassNotFoundException: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(-1);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.dacapo.harness.TestHarness: java.lang.String BUILD_VERSION> = "Implementation-Version";

        <org.dacapo.harness.TestHarness: java.lang.String BUILD_NICKNAME> = "Specification-Version";

        return;
    }
}
