public class cck.text.StringUtil extends java.lang.Object
{
    public static final java.lang.String QUOTE;
    public static final java.lang.String SQUOTE;
    public static final java.lang.String LPAREN;
    public static final java.lang.String RPAREN;
    public static final java.lang.String COMMA;
    public static final java.lang.String COMMA_SPACE;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final char SQUOTE_CHAR;
    public static final char BACKSLASH;
    public static final char QUOTE_CHAR;
    protected static final java.lang.String[] spacers;

    public void <init>()
    {
        cck.text.StringUtil this;

        this := @this: cck.text.StringUtil;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String addrToString(int)
    {
        int address;
        long $stack1;
        java.lang.String $stack2;

        address := @parameter0: int;

        $stack1 = (long) address;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String to0xHex(long,int)>($stack1, 4);

        return $stack2;
    }

    public static java.lang.String baseFileName(java.lang.String)
    {
        int sind, dind, $stack7;
        java.lang.String f#1;

        f#1 := @parameter0: java.lang.String;

        sind = virtualinvoke f#1.<java.lang.String: int lastIndexOf(int)>(47);

        if sind < 0 goto label1;

        $stack7 = sind + 1;

        f#1 = virtualinvoke f#1.<java.lang.String: java.lang.String substring(int)>($stack7);

     label1:
        dind = virtualinvoke f#1.<java.lang.String: int lastIndexOf(int)>(46);

        if dind < 0 goto label2;

        f#1 = virtualinvoke f#1.<java.lang.String: java.lang.String substring(int,int)>(0, dind);

     label2:
        return f#1;
    }

    public static java.lang.String readIdentifier(java.text.CharacterIterator)
    {
        java.lang.StringBuffer $stack3;
        java.text.CharacterIterator i;
        char c;
        boolean $stack5;
        java.lang.String $stack13;

        i := @parameter0: java.text.CharacterIterator;

        $stack3 = new java.lang.StringBuffer;

        specialinvoke $stack3.<java.lang.StringBuffer: void <init>()>();

     label1:
        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        $stack5 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c);

        if $stack5 != 0 goto label2;

        if c == 95 goto label2;

        goto label3;

     label2:
        virtualinvoke $stack3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        $stack13 = virtualinvoke $stack3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack13;
    }

    public static java.lang.String readDotIdentifier(java.text.CharacterIterator)
    {
        java.lang.StringBuffer $stack3;
        java.text.CharacterIterator i;
        char c;
        boolean $stack5;
        java.lang.String $stack13;

        i := @parameter0: java.text.CharacterIterator;

        $stack3 = new java.lang.StringBuffer;

        specialinvoke $stack3.<java.lang.StringBuffer: void <init>()>();

     label1:
        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        $stack5 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c);

        if $stack5 != 0 goto label2;

        if c == 95 goto label2;

        if c == 46 goto label2;

        goto label3;

     label2:
        virtualinvoke $stack3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        $stack13 = virtualinvoke $stack3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack13;
    }

    public static int readHexValue(java.text.CharacterIterator, int)
    {
        int max_chars, $stack7, $stack8, accumul#1, cntr#2;
        java.text.CharacterIterator i;
        char c;
        boolean $stack6;

        i := @parameter0: java.text.CharacterIterator;

        max_chars := @parameter1: int;

        accumul#1 = 0;

        cntr#2 = 0;

     label1:
        if cntr#2 >= max_chars goto label4;

        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        if c != 65535 goto label2;

        goto label4;

     label2:
        $stack6 = staticinvoke <cck.text.StringUtil: boolean isHexDigit(char)>(c);

        if $stack6 != 0 goto label3;

        goto label4;

     label3:
        $stack7 = accumul#1 << 4;

        $stack8 = staticinvoke <cck.text.StringUtil: int hexValueOf(char)>(c);

        accumul#1 = $stack7 | $stack8;

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        cntr#2 = cntr#2 + 1;

        goto label1;

     label4:
        return accumul#1;
    }

    public static int readOctalValue(java.text.CharacterIterator, int)
    {
        int max_chars, $stack7, $stack8, accumul#1, cntr#2;
        java.text.CharacterIterator i;
        char c;
        boolean $stack6;

        i := @parameter0: java.text.CharacterIterator;

        max_chars := @parameter1: int;

        accumul#1 = 0;

        cntr#2 = 0;

     label1:
        if cntr#2 >= max_chars goto label3;

        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        $stack6 = staticinvoke <cck.text.StringUtil: boolean isOctalDigit(char)>(c);

        if $stack6 != 0 goto label2;

        goto label3;

     label2:
        $stack7 = accumul#1 << 3;

        $stack8 = staticinvoke <cck.text.StringUtil: int octalValueOf(char)>(c);

        accumul#1 = $stack7 | $stack8;

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        cntr#2 = cntr#2 + 1;

        goto label1;

     label3:
        return accumul#1;
    }

    public static int readBinaryValue(java.text.CharacterIterator, int)
    {
        int max_chars, $stack8, accumul#1, cntr#2;
        java.text.CharacterIterator i;
        char ch;

        i := @parameter0: java.text.CharacterIterator;

        max_chars := @parameter1: int;

        accumul#1 = 0;

        cntr#2 = 0;

     label1:
        if cntr#2 >= max_chars goto label4;

        ch = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        if ch != 48 goto label2;

        accumul#1 = accumul#1 << 1;

        goto label3;

     label2:
        if ch != 49 goto label4;

        $stack8 = accumul#1 << 1;

        accumul#1 = $stack8 | 1;

     label3:
        cntr#2 = cntr#2 + 1;

        goto label1;

     label4:
        return accumul#1;
    }

    public static int readDecimalValue(java.text.CharacterIterator, int)
    {
        java.text.CharacterIterator i;
        int max_chars, $stack3;
        java.lang.String $stack2;

        i := @parameter0: java.text.CharacterIterator;

        max_chars := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String readDecimalString(java.text.CharacterIterator,int)>(i, max_chars);

        $stack3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack2);

        return $stack3;
    }

    public static java.lang.String readDecimalString(java.text.CharacterIterator, int)
    {
        java.lang.StringBuffer $stack5;
        java.text.CharacterIterator i;
        boolean $stack6, $stack9;
        int max_chars, cntr#1;
        java.lang.String $stack7;
        char c;

        i := @parameter0: java.text.CharacterIterator;

        max_chars := @parameter1: int;

        $stack5 = new java.lang.StringBuffer;

        specialinvoke $stack5.<java.lang.StringBuffer: void <init>()>();

        $stack6 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>(i, 45);

        if $stack6 == 0 goto label1;

        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label1:
        cntr#1 = 0;

     label2:
        if cntr#1 >= max_chars goto label4;

        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        $stack9 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c);

        if $stack9 != 0 goto label3;

        goto label4;

     label3:
        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        cntr#1 = cntr#1 + 1;

        goto label2;

     label4:
        $stack7 = virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack7;
    }

    public static int readIntegerValue(java.text.CharacterIterator)
    {
        java.text.CharacterIterator i;
        int $stack3, $stack6, $stack8, $stack9, $stack16;
        char ch#1, ch#2;

        i := @parameter0: java.text.CharacterIterator;

        ch#1 = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        if ch#1 != 45 goto label1;

        $stack16 = staticinvoke <cck.text.StringUtil: int readDecimalValue(java.text.CharacterIterator,int)>(i, 10);

        return $stack16;

     label1:
        if ch#1 != 48 goto label6;

        ch#2 = interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        if ch#2 == 120 goto label2;

        if ch#2 != 88 goto label3;

     label2:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        $stack6 = staticinvoke <cck.text.StringUtil: int readHexValue(java.text.CharacterIterator,int)>(i, 8);

        return $stack6;

     label3:
        if ch#2 == 98 goto label4;

        if ch#2 != 66 goto label5;

     label4:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        $stack8 = staticinvoke <cck.text.StringUtil: int readBinaryValue(java.text.CharacterIterator,int)>(i, 32);

        return $stack8;

     label5:
        $stack9 = staticinvoke <cck.text.StringUtil: int readOctalValue(java.text.CharacterIterator,int)>(i, 11);

        return $stack9;

     label6:
        $stack3 = staticinvoke <cck.text.StringUtil: int readDecimalValue(java.text.CharacterIterator,int)>(i, 10);

        return $stack3;
    }

    public static void skipWhiteSpace(java.text.CharacterIterator)
    {
        java.text.CharacterIterator i;
        char c;

        i := @parameter0: java.text.CharacterIterator;

     label1:
        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        if c == 32 goto label2;

        if c == 10 goto label2;

        if c == 9 goto label2;

        goto label3;

     label2:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        return;
    }

    public static char peek(java.text.CharacterIterator)
    {
        java.text.CharacterIterator i;
        char $stack1;

        i := @parameter0: java.text.CharacterIterator;

        $stack1 = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        return $stack1;
    }

    public static boolean peekAndEat(java.text.CharacterIterator, char)
    {
        java.text.CharacterIterator i;
        char r, c;

        i := @parameter0: java.text.CharacterIterator;

        c := @parameter1: char;

        r = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        if r != c goto label1;

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 1;

     label1:
        return 0;
    }

    public static boolean peekAndEat(java.text.CharacterIterator, java.lang.String)
    {
        java.text.CharacterIterator i;
        int ind, $stack5, cntr#1;
        java.lang.String s;
        char $stack6, $stack7;

        i := @parameter0: java.text.CharacterIterator;

        s := @parameter1: java.lang.String;

        ind = interfaceinvoke i.<java.text.CharacterIterator: int getIndex()>();

        cntr#1 = 0;

     label1:
        $stack5 = virtualinvoke s.<java.lang.String: int length()>();

        if cntr#1 >= $stack5 goto label4;

        $stack6 = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        $stack7 = virtualinvoke s.<java.lang.String: char charAt(int)>(cntr#1);

        if $stack6 != $stack7 goto label2;

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        goto label3;

     label2:
        interfaceinvoke i.<java.text.CharacterIterator: char setIndex(int)>(ind);

        return 0;

     label3:
        cntr#1 = cntr#1 + 1;

        goto label1;

     label4:
        return 1;
    }

    public static void expectChar(java.text.CharacterIterator, char) throws java.lang.Exception
    {
        java.text.CharacterIterator i;
        char r, c;
        java.lang.StringBuilder $stack5, $stack6, $stack8, $stack9, $stack11;
        int $stack7;
        java.lang.String $stack10, $stack12;

        i := @parameter0: java.text.CharacterIterator;

        c := @parameter1: char;

        r = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        if r == c goto label1;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parse error at ");

        $stack7 = interfaceinvoke i.<java.text.CharacterIterator: int getIndex()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected character ");

        $stack10 = staticinvoke <cck.text.StringUtil: java.lang.String squote(char)>(c);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack12);

     label1:
        return;
    }

    public static void expectChars(java.text.CharacterIterator, java.lang.String) throws java.lang.Exception
    {
        java.lang.String s;
        int $stack3, cntr#1;
        java.text.CharacterIterator i;
        char $stack4;

        i := @parameter0: java.text.CharacterIterator;

        s := @parameter1: java.lang.String;

        cntr#1 = 0;

     label1:
        $stack3 = virtualinvoke s.<java.lang.String: int length()>();

        if cntr#1 >= $stack3 goto label2;

        $stack4 = virtualinvoke s.<java.lang.String: char charAt(int)>(cntr#1);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(i, $stack4);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void expectKeyword(java.text.CharacterIterator, java.lang.String)
    {
        java.text.CharacterIterator i;
        java.lang.String str, kw, $stack10, $stack12;
        boolean $stack4;
        java.lang.StringBuilder $stack5, $stack6, $stack8, $stack9, $stack11;
        int $stack7;

        i := @parameter0: java.text.CharacterIterator;

        kw := @parameter1: java.lang.String;

        str = staticinvoke <cck.text.StringUtil: java.lang.String readIdentifier(java.text.CharacterIterator)>(i);

        $stack4 = virtualinvoke str.<java.lang.String: boolean equals(java.lang.Object)>(kw);

        if $stack4 != 0 goto label1;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parse error at ");

        $stack7 = interfaceinvoke i.<java.text.CharacterIterator: int getIndex()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected keyword ");

        $stack10 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(kw);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack12);

     label1:
        return;
    }

    public static boolean isHex(java.lang.String)
    {
        java.lang.String s;
        int $stack2;
        char c, $stack4;
        boolean $stack5#1;

        s := @parameter0: java.lang.String;

        $stack2 = virtualinvoke s.<java.lang.String: int length()>();

        if $stack2 >= 2 goto label1;

        return 0;

     label1:
        c = virtualinvoke s.<java.lang.String: char charAt(int)>(1);

        $stack4 = virtualinvoke s.<java.lang.String: char charAt(int)>(0);

        if $stack4 != 48 goto label3;

        if c == 120 goto label2;

        if c != 88 goto label3;

     label2:
        $stack5#1 = 1;

        goto label4;

     label3:
        $stack5#1 = 0;

     label4:
        return $stack5#1;
    }

    public static boolean isBin(java.lang.String)
    {
        java.lang.String s;
        int $stack2;
        char c, $stack4;
        boolean $stack5#1;

        s := @parameter0: java.lang.String;

        $stack2 = virtualinvoke s.<java.lang.String: int length()>();

        if $stack2 >= 2 goto label1;

        return 0;

     label1:
        c = virtualinvoke s.<java.lang.String: char charAt(int)>(1);

        $stack4 = virtualinvoke s.<java.lang.String: char charAt(int)>(0);

        if $stack4 != 48 goto label3;

        if c == 98 goto label2;

        if c != 66 goto label3;

     label2:
        $stack5#1 = 1;

        goto label4;

     label3:
        $stack5#1 = 0;

     label4:
        return $stack5#1;
    }

    public static boolean isHexDigit(char)
    {
        char c;
        boolean $stack1;

        c := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: boolean isHexDigit(char)>(c);

        return $stack1;
    }

    public static int hexValueOf(char)
    {
        char c;
        int $stack1;

        c := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: int hexValueOf(char)>(c);

        return $stack1;
    }

    public static int octalValueOf(char)
    {
        char c;
        int $stack1;

        c := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: int octValueOf(char)>(c);

        return $stack1;
    }

    public static boolean isOctalDigit(char)
    {
        char c;
        boolean $stack1;

        c := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: boolean isOctDigit(char)>(c);

        return $stack1;
    }

    public static void justify(boolean, java.lang.StringBuffer, java.lang.String, int)
    {
        int width, $stack5, pad;
        java.lang.String s;
        boolean right;
        java.lang.StringBuffer buf;

        right := @parameter0: boolean;

        buf := @parameter1: java.lang.StringBuffer;

        s := @parameter2: java.lang.String;

        width := @parameter3: int;

        $stack5 = virtualinvoke s.<java.lang.String: int length()>();

        pad = width - $stack5;

        if right == 0 goto label1;

        staticinvoke <cck.text.StringUtil: void space(java.lang.StringBuffer,int)>(buf, pad);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(s);

        goto label2;

     label1:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(s);

        staticinvoke <cck.text.StringUtil: void space(java.lang.StringBuffer,int)>(buf, pad);

     label2:
        return;
    }

    public static void justify(boolean, java.lang.StringBuffer, long, int)
    {
        boolean right;
        java.lang.StringBuffer buf;
        long l;
        java.lang.String $stack5;
        int width;

        right := @parameter0: boolean;

        buf := @parameter1: java.lang.StringBuffer;

        l := @parameter2: long;

        width := @parameter3: int;

        $stack5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(right, buf, $stack5, width);

        return;
    }

    public static void justify(boolean, java.lang.StringBuffer, float, int)
    {
        boolean right;
        java.lang.StringBuffer buf;
        float f;
        java.lang.String $stack4;
        int width;

        right := @parameter0: boolean;

        buf := @parameter1: java.lang.StringBuffer;

        f := @parameter2: float;

        width := @parameter3: int;

        $stack4 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(right, buf, $stack4, width);

        return;
    }

    public static java.lang.String justify(boolean, java.lang.String, int)
    {
        int width, $stack4, $stack5;
        java.lang.String s, $stack7;
        java.lang.StringBuffer $stack6;
        boolean right;

        right := @parameter0: boolean;

        s := @parameter1: java.lang.String;

        width := @parameter2: int;

        $stack4 = virtualinvoke s.<java.lang.String: int length()>();

        $stack5 = width - $stack4;

        if $stack5 > 0 goto label1;

        return s;

     label1:
        $stack6 = new java.lang.StringBuffer;

        specialinvoke $stack6.<java.lang.StringBuffer: void <init>(int)>(width);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(right, $stack6, s, width);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack7;
    }

    public static java.lang.String justify(boolean, long, int)
    {
        boolean right;
        long l;
        java.lang.String $stack4, $stack5;
        int width;

        right := @parameter0: boolean;

        l := @parameter1: long;

        width := @parameter2: int;

        $stack4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l);

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(right, $stack4, width);

        return $stack5;
    }

    public static java.lang.String justify(boolean, float, int)
    {
        boolean right;
        float f;
        java.lang.String $stack3, $stack4;
        int width;

        right := @parameter0: boolean;

        f := @parameter1: float;

        width := @parameter2: int;

        $stack3 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f);

        $stack4 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(right, $stack3, width);

        return $stack4;
    }

    public static java.lang.String leftJustify(long, int)
    {
        long v;
        int width;
        java.lang.String $stack3;

        v := @parameter0: long;

        width := @parameter1: int;

        $stack3 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,long,int)>(0, v, width);

        return $stack3;
    }

    public static java.lang.String leftJustify(float, int)
    {
        float v;
        int width;
        java.lang.String $stack2;

        v := @parameter0: float;

        width := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,float,int)>(0, v, width);

        return $stack2;
    }

    public static java.lang.String leftJustify(java.lang.String, int)
    {
        java.lang.String s, $stack2;
        int width;

        s := @parameter0: java.lang.String;

        width := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(0, s, width);

        return $stack2;
    }

    public static java.lang.String rightJustify(long, int)
    {
        long v;
        int width;
        java.lang.String $stack3;

        v := @parameter0: long;

        width := @parameter1: int;

        $stack3 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,long,int)>(1, v, width);

        return $stack3;
    }

    public static java.lang.String rightJustify(float, int)
    {
        float v;
        int width;
        java.lang.String $stack2;

        v := @parameter0: float;

        width := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,float,int)>(1, v, width);

        return $stack2;
    }

    public static java.lang.String rightJustify(java.lang.String, int)
    {
        java.lang.String s, $stack2;
        int width;

        s := @parameter0: java.lang.String;

        width := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(1, s, width);

        return $stack2;
    }

    public static java.lang.String toHex(long, int)
    {
        long value;
        int width;
        char[] $stack3, $stack4;
        java.lang.String $stack5;

        value := @parameter0: long;

        width := @parameter1: int;

        $stack4 = newarray (char)[width];

        $stack3 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(value, width, 0, $stack4, $stack3);

        return $stack5;
    }

    public static java.lang.String toLowHex(long, int)
    {
        long value;
        int width;
        char[] $stack3, $stack4;
        java.lang.String $stack5;

        value := @parameter0: long;

        width := @parameter1: int;

        $stack4 = newarray (char)[width];

        $stack3 = <cck.text.CharUtil: char[] LOW_HEX_CHARS>;

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(value, width, 0, $stack4, $stack3);

        return $stack5;
    }

    private static java.lang.String convertToHex(long, int, int, char[], char[])
    {
        long value, $stack9, $stack14;
        int width, $stack8, start, $stack11, $stack13, $stack15, $stack16, $stack18, cntr#2, buf#3, cntr#4;
        byte $stack10;
        java.lang.String $stack12, $stack22, $stack23, $stack25;
        char[] result, hexChars;
        char $stack17, $stack26;
        java.lang.StringBuffer $stack21;

        value := @parameter0: long;

        width := @parameter1: int;

        start := @parameter2: int;

        result := @parameter3: char[];

        hexChars := @parameter4: char[];

        $stack8 = width * 4;

        $stack9 = 1L << $stack8;

        $stack10 = value cmp $stack9;

        if $stack10 <= 0 goto label3;

        $stack21 = new java.lang.StringBuffer;

        specialinvoke $stack21.<java.lang.StringBuffer: void <init>()>();

        cntr#2 = 0;

     label1:
        if cntr#2 >= start goto label2;

        $stack26 = result[cntr#2];

        virtualinvoke $stack21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack26);

        cntr#2 = cntr#2 + 1;

        goto label1;

     label2:
        $stack22 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(value);

        $stack23 = virtualinvoke $stack22.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $stack21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack23);

        $stack25 = virtualinvoke $stack21.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack25;

     label3:
        $stack11 = start + width;

        buf#3 = $stack11 - 1;

        cntr#4 = 0;

     label4:
        if cntr#4 >= width goto label5;

        $stack18 = buf#3 - cntr#4;

        $stack13 = cntr#4 * 4;

        $stack14 = value >> $stack13;

        $stack15 = (int) $stack14;

        $stack16 = $stack15 & 15;

        $stack17 = hexChars[$stack16];

        result[$stack18] = $stack17;

        cntr#4 = cntr#4 + 1;

        goto label4;

     label5:
        $stack12 = new java.lang.String;

        specialinvoke $stack12.<java.lang.String: void <init>(char[])>(result);

        return $stack12;
    }

    public static java.lang.String to0xHex(long, int)
    {
        int width, $stack4;
        char[] result, $stack5;
        long value;
        java.lang.String $stack6;

        value := @parameter0: long;

        width := @parameter1: int;

        $stack4 = width + 2;

        result = newarray (char)[$stack4];

        result[0] = 48;

        result[1] = 120;

        $stack5 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(value, width, 2, result, $stack5);

        return $stack6;
    }

    public static java.lang.String toBin(long, int)
    {
        int width, $stack6, $stack7, $stack11, cntr#1;
        char[] result;
        java.lang.String $stack5;
        long value, $stack8, $stack9;
        byte $stack10;
        char $stack14#2;

        value := @parameter0: long;

        width := @parameter1: int;

        result = newarray (char)[width];

        cntr#1 = 0;

     label1:
        if cntr#1 >= width goto label4;

        $stack6 = width - cntr#1;

        $stack11 = $stack6 - 1;

        $stack7 = 1 << cntr#1;

        $stack8 = (long) $stack7;

        $stack9 = value & $stack8;

        $stack10 = $stack9 cmp 0L;

        if $stack10 != 0 goto label2;

        $stack14#2 = 48;

        goto label3;

     label2:
        $stack14#2 = 49;

     label3:
        result[$stack11] = $stack14#2;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label4:
        $stack5 = new java.lang.String;

        specialinvoke $stack5.<java.lang.String: void <init>(char[])>(result);

        return $stack5;
    }

    public static void toHex(java.lang.StringBuffer, long, int)
    {
        long value, $stack6, $stack9;
        int width, $stack5, $stack8, $stack10, $stack11, cntr#1;
        byte $stack7;
        java.lang.StringBuffer buf;
        char[] $stack12;
        char $stack13;
        java.lang.String $stack16, $stack17;

        buf := @parameter0: java.lang.StringBuffer;

        value := @parameter1: long;

        width := @parameter2: int;

        $stack5 = width * 4;

        $stack6 = 1L << $stack5;

        $stack7 = value cmp $stack6;

        if $stack7 <= 0 goto label1;

        $stack16 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(value);

        $stack17 = virtualinvoke $stack16.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack17);

        return;

     label1:
        cntr#1 = width - 1;

     label2:
        if cntr#1 < 0 goto label3;

        $stack12 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $stack8 = cntr#1 * 4;

        $stack9 = value >> $stack8;

        $stack10 = (int) $stack9;

        $stack11 = $stack10 & 15;

        $stack13 = $stack12[$stack11];

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack13);

        cntr#1 = cntr#1 + -1;

        goto label2;

     label3:
        return;
    }

    public static java.lang.String splice(java.lang.String[], java.lang.String[])
    {
        java.lang.StringBuffer $stack4;
        java.lang.String[] a, b;
        int $stack5, $stack6, $stack14, cntr#1;
        java.lang.String $stack7, $stack8, $stack12, $stack17;

        a := @parameter0: java.lang.String[];

        b := @parameter1: java.lang.String[];

        $stack4 = new java.lang.StringBuffer;

        specialinvoke $stack4.<java.lang.StringBuffer: void <init>()>();

        cntr#1 = 0;

     label1:
        $stack5 = lengthof a;

        if cntr#1 >= $stack5 goto label3;

        $stack12 = a[cntr#1];

        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack12);

        $stack14 = lengthof b;

        if cntr#1 >= $stack14 goto label2;

        $stack17 = b[cntr#1];

        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack17);

     label2:
        cntr#1 = cntr#1 + 1;

        goto label1;

     label3:
        $stack6 = lengthof b;

        if cntr#1 >= $stack6 goto label4;

        $stack8 = b[cntr#1];

        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack8);

        cntr#1 = cntr#1 + 1;

        goto label3;

     label4:
        $stack7 = virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack7;
    }

    public static java.lang.String quote(java.lang.Object)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        java.lang.Object s;
        java.lang.String $stack5;

        s := @parameter0: java.lang.Object;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(s);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String squote(char)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        char c;
        java.lang.String $stack5;

        c := @parameter0: char;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String embed(java.lang.Object)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        java.lang.Object s;
        java.lang.String $stack5;

        s := @parameter0: java.lang.Object;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(s);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5, $stack6;
        java.lang.Object lead, arg;
        java.lang.String $stack7;

        lead := @parameter0: java.lang.Object;

        arg := @parameter1: java.lang.Object;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lead);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;
        java.lang.Object lead, arg1, arg2;
        java.lang.String $stack10;

        lead := @parameter0: java.lang.Object;

        arg1 := @parameter1: java.lang.Object;

        arg2 := @parameter2: java.lang.Object;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lead);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg1);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg2);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        java.lang.Object lead, arg1, arg2, arg3;
        java.lang.String $stack13;

        lead := @parameter0: java.lang.Object;

        arg1 := @parameter1: java.lang.Object;

        arg2 := @parameter2: java.lang.Object;

        arg3 := @parameter3: java.lang.Object;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lead);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg1);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg2);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg3);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack13;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15;
        java.lang.Object lead, arg1, arg2, arg3, arg4;
        java.lang.String $stack16;

        lead := @parameter0: java.lang.Object;

        arg1 := @parameter1: java.lang.Object;

        arg2 := @parameter2: java.lang.Object;

        arg3 := @parameter3: java.lang.Object;

        arg4 := @parameter4: java.lang.Object;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lead);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg1);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg2);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg3);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(arg4);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack16;
    }

    public static java.lang.String commalist(java.util.List)
    {
        java.lang.StringBuffer $stack2;
        java.util.List l;
        java.lang.String $stack3;

        l := @parameter0: java.util.List;

        $stack2 = new java.lang.StringBuffer;

        specialinvoke $stack2.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void commalist(java.util.List,java.lang.StringBuffer)>(l, $stack2);

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack3;
    }

    public static void commalist(java.util.List, java.lang.StringBuffer)
    {
        java.util.List l;
        java.util.Iterator i;
        java.lang.StringBuffer buf;
        java.lang.Object $stack5;
        java.lang.String $stack6;
        boolean $stack8, $stack4#4;

        l := @parameter0: java.util.List;

        buf := @parameter1: java.lang.StringBuffer;

        i = interfaceinvoke l.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack4#4 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack4#4 == 0 goto label2;

        $stack5 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack6);

        $stack8 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label1;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label1;

     label2:
        return;
    }

    public static java.lang.String commalist(java.lang.Object[])
    {
        java.lang.StringBuffer $stack2;
        java.lang.Object[] o;
        java.lang.String $stack3;

        o := @parameter0: java.lang.Object[];

        $stack2 = new java.lang.StringBuffer;

        specialinvoke $stack2.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void commalist(java.lang.Object[],java.lang.StringBuffer)>(o, $stack2);

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack3;
    }

    public static void commalist(java.lang.Object[], java.lang.StringBuffer)
    {
        java.lang.Object[] o;
        int $stack3, cntr#1;
        java.lang.StringBuffer buf;
        java.lang.Object $stack4;
        java.lang.String $stack5;

        o := @parameter0: java.lang.Object[];

        buf := @parameter1: java.lang.StringBuffer;

        cntr#1 = 0;

     label1:
        $stack3 = lengthof o;

        if cntr#1 >= $stack3 goto label3;

        if cntr#1 <= 0 goto label2;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $stack4 = o[cntr#1];

        $stack5 = virtualinvoke $stack4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack5);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void commalist(java.util.Iterator, java.lang.StringBuffer)
    {
        java.util.Iterator i;
        boolean $stack3;
        java.lang.StringBuffer buf;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        int cntr#1;

        i := @parameter0: java.util.Iterator;

        buf := @parameter1: java.lang.StringBuffer;

        cntr#1 = 0;

     label1:
        $stack3 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack3 == 0 goto label3;

        if cntr#1 <= 0 goto label2;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $stack4 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack5);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String linelist(java.util.List)
    {
        java.lang.StringBuffer $stack2;
        java.util.List l;
        java.lang.String $stack3;

        l := @parameter0: java.util.List;

        $stack2 = new java.lang.StringBuffer;

        specialinvoke $stack2.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void linelist(java.lang.StringBuffer,java.util.List)>($stack2, l);

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack3;
    }

    public static void linelist(java.lang.StringBuffer, java.util.List)
    {
        java.util.List l;
        java.util.Iterator i;
        boolean $stack4;
        java.lang.StringBuffer buf;
        java.lang.Object $stack5;
        java.lang.String $stack6;

        buf := @parameter0: java.lang.StringBuffer;

        l := @parameter1: java.util.List;

        i = interfaceinvoke l.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack4 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        $stack5 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack6);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5;
        java.lang.Object o1, o2;
        java.lang.String $stack6;

        o1 := @parameter0: java.lang.Object;

        o2 := @parameter1: java.lang.Object;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o1);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o2);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack6;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        java.lang.Object o1, o2, o3;
        java.lang.String $stack9;

        o1 := @parameter0: java.lang.Object;

        o2 := @parameter1: java.lang.Object;

        o3 := @parameter2: java.lang.Object;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o1);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o2);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o3);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;
        java.lang.Object o1, o2, o3, o4;
        java.lang.String $stack12;

        o1 := @parameter0: java.lang.Object;

        o2 := @parameter1: java.lang.Object;

        o3 := @parameter2: java.lang.Object;

        o4 := @parameter3: java.lang.Object;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o1);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o2);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o3);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(o4);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack12;
    }

    public static java.lang.String interval(int, int)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5, $stack6, $stack7;
        int low, high;
        java.lang.String $stack8;

        low := @parameter0: int;

        high := @parameter1: int;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(low);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(high);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack8;
    }

    public static char alpha(int)
    {
        int num, $stack1, $stack2;
        char $stack3;

        num := @parameter0: int;

        $stack1 = 97 + num;

        $stack2 = $stack1 - 1;

        $stack3 = (char) $stack2;

        return $stack3;
    }

    public static java.lang.String qembed(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack7, $stack8, $stack9;
        java.lang.String s1, s2, $stack6, s3, $stack10;

        s1 := @parameter0: java.lang.String;

        s2 := @parameter1: java.lang.String;

        s3 := @parameter2: java.lang.String;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s1);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(s2);

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s3);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public static int evaluateIntegerLiteral(java.lang.String)
    {
        java.text.StringCharacterIterator $stack1;
        java.lang.String val;
        int $stack2;

        val := @parameter0: java.lang.String;

        $stack1 = new java.text.StringCharacterIterator;

        specialinvoke $stack1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(val);

        $stack2 = staticinvoke <cck.text.StringUtil: int readIntegerValue(java.text.CharacterIterator)>($stack1);

        return $stack2;
    }

    public static java.lang.String evaluateStringLiteral(java.lang.String) throws java.lang.Exception
    {
        java.lang.StringBuffer $stack4;
        java.lang.String literal, $stack16;
        int $stack5;
        java.text.StringCharacterIterator $stack6;
        boolean $stack7;
        char c#1;

        literal := @parameter0: java.lang.String;

        $stack4 = new java.lang.StringBuffer;

        $stack5 = virtualinvoke literal.<java.lang.String: int length()>();

        specialinvoke $stack4.<java.lang.StringBuffer: void <init>(int)>($stack5);

        $stack6 = new java.text.StringCharacterIterator;

        specialinvoke $stack6.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(literal);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($stack6, 34);

     label1:
        $stack7 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>($stack6, 34);

        if $stack7 == 0 goto label2;

        goto label5;

     label2:
        c#1 = interfaceinvoke $stack6.<java.text.CharacterIterator: char current()>();

        interfaceinvoke $stack6.<java.text.CharacterIterator: char next()>();

        if c#1 != 65535 goto label3;

        goto label5;

     label3:
        if c#1 != 92 goto label4;

        c#1 = staticinvoke <cck.text.StringUtil: char escapeChar(java.text.CharacterIterator)>($stack6);

     label4:
        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c#1);

        goto label1;

     label5:
        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($stack6, 65535);

        $stack16 = virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack16;
    }

    public static char evaluateCharLiteral(java.lang.String) throws java.lang.Exception
    {
        java.text.StringCharacterIterator $stack3;
        java.lang.String literal;
        boolean $stack4;
        char ch#1;

        literal := @parameter0: java.lang.String;

        $stack3 = new java.text.StringCharacterIterator;

        specialinvoke $stack3.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(literal);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($stack3, 39);

        $stack4 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>($stack3, 92);

        if $stack4 == 0 goto label1;

        ch#1 = staticinvoke <cck.text.StringUtil: char escapeChar(java.text.CharacterIterator)>($stack3);

        goto label2;

     label1:
        ch#1 = interfaceinvoke $stack3.<java.text.CharacterIterator: char current()>();

        interfaceinvoke $stack3.<java.text.CharacterIterator: char next()>();

     label2:
        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($stack3, 39);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>($stack3, 65535);

        return ch#1;
    }

    private static char escapeChar(java.text.CharacterIterator)
    {
        java.text.CharacterIterator i;
        char c, $stack4, $stack12;
        int $stack3, $stack11;

        i := @parameter0: java.text.CharacterIterator;

        c = interfaceinvoke i.<java.text.CharacterIterator: char current()>();

        lookupswitch(c)
        {
            case 34: goto label07;
            case 39: goto label06;
            case 48: goto label10;
            case 49: goto label10;
            case 50: goto label10;
            case 51: goto label10;
            case 52: goto label10;
            case 53: goto label10;
            case 54: goto label10;
            case 55: goto label10;
            case 92: goto label05;
            case 98: goto label02;
            case 102: goto label01;
            case 110: goto label03;
            case 114: goto label04;
            case 116: goto label08;
            case 120: goto label09;
            default: goto label11;
        };

     label01:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 12;

     label02:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 8;

     label03:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 10;

     label04:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 13;

     label05:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 92;

     label06:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 39;

     label07:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 34;

     label08:
        interfaceinvoke i.<java.text.CharacterIterator: char next()>();

        return 9;

     label09:
        $stack3 = staticinvoke <cck.text.StringUtil: int readHexValue(java.text.CharacterIterator,int)>(i, 4);

        $stack4 = (char) $stack3;

        return $stack4;

     label10:
        $stack11 = staticinvoke <cck.text.StringUtil: int readOctalValue(java.text.CharacterIterator,int)>(i, 3);

        $stack12 = (char) $stack11;

        return $stack12;

     label11:
        return c;
    }

    private static java.lang.IllegalArgumentException invalidCharLiteral(java.lang.String)
    {
        java.lang.IllegalArgumentException $stack1;
        java.lang.StringBuilder $stack2, $stack3, $stack4;
        java.lang.String lit, $stack5;

        lit := @parameter0: java.lang.String;

        $stack1 = new java.lang.IllegalArgumentException;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character literal: ");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lit);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5);

        return $stack1;
    }

    public static java.lang.String trimquotes(java.lang.String)
    {
        java.lang.String s, $stack8;
        int $stack3, $stack6, start#1, end#2;
        char $stack5, $stack7;

        s := @parameter0: java.lang.String;

        $stack3 = virtualinvoke s.<java.lang.String: int length()>();

        if $stack3 != 0 goto label1;

        return s;

     label1:
        start#1 = 0;

        end#2 = virtualinvoke s.<java.lang.String: int length()>();

        $stack5 = virtualinvoke s.<java.lang.String: char charAt(int)>(0);

        if $stack5 != 34 goto label2;

        start#1 = 0 + 1;

     label2:
        $stack6 = end#2 - 1;

        $stack7 = virtualinvoke s.<java.lang.String: char charAt(int)>($stack6);

        if $stack7 != 34 goto label3;

        end#2 = end#2 + -1;

     label3:
        if start#1 >= end#2 goto label4;

        $stack8 = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(start#1, end#2);

        return $stack8;

     label4:
        return "";
    }

    public static java.lang.String formatParagraphs(java.lang.String, int, int, int)
    {
        java.lang.String s, indstr, ljstr, $stack19;
        int len, leftJust, $stack16, $stack17, width, $stack25, $stack27, $stack28, $stack29, indent#1, indent#2, consumed#3, lastSp#4, cntr#5;
        java.lang.StringBuffer $stack15;
        char c;
        boolean $stack21;

        s := @parameter0: java.lang.String;

        leftJust := @parameter1: int;

        indent#1 := @parameter2: int;

        width := @parameter3: int;

        len = virtualinvoke s.<java.lang.String: int length()>();

        indent#2 = indent#1 + leftJust;

        consumed#3 = indent#2 + leftJust;

        indstr = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(indent#2);

        ljstr = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(leftJust);

        $stack15 = new java.lang.StringBuffer;

        $stack16 = virtualinvoke s.<java.lang.String: int length()>();

        $stack17 = $stack16 + 50;

        specialinvoke $stack15.<java.lang.StringBuffer: void <init>(int)>($stack17);

        virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(indstr);

        lastSp#4 = -1;

        cntr#5 = 0;

     label1:
        if cntr#5 >= len goto label5;

        c = virtualinvoke s.<java.lang.String: char charAt(int)>(cntr#5);

        if c != 10 goto label2;

        virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        consumed#3 = indent#2;

        virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(indstr);

        goto label4;

     label2:
        $stack21 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c);

        if $stack21 == 0 goto label3;

        lastSp#4 = virtualinvoke $stack15.<java.lang.StringBuffer: int length()>();

     label3:
        virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        consumed#3 = consumed#3 + 1;

        if consumed#3 <= width goto label4;

        if lastSp#4 < 0 goto label4;

        virtualinvoke $stack15.<java.lang.StringBuffer: void setCharAt(int,char)>(lastSp#4, 10);

        $stack25 = lastSp#4 + 1;

        virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>($stack25, ljstr);

        $stack27 = virtualinvoke $stack15.<java.lang.StringBuffer: int length()>();

        $stack28 = $stack27 - lastSp#4;

        $stack29 = $stack28 + leftJust;

        consumed#3 = $stack29 - 1;

     label4:
        cntr#5 = cntr#5 + 1;

        goto label1;

     label5:
        $stack19 = virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack19;
    }

    public static java.util.List trimLines(java.lang.String, int, int)
    {
        java.util.LinkedList $stack12;
        java.lang.String s, indstr, $stack19, leftover;
        int len, indent, $stack16, $stack18, width, $stack27, consumed#1, lastSp#3, cntr#4;
        java.lang.StringBuffer $stack15, buf#2;
        char c;
        boolean $stack23;

        s := @parameter0: java.lang.String;

        indent := @parameter1: int;

        width := @parameter2: int;

        $stack12 = new java.util.LinkedList;

        specialinvoke $stack12.<java.util.LinkedList: void <init>()>();

        len = virtualinvoke s.<java.lang.String: int length()>();

        consumed#1 = indent;

        indstr = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(indent);

        $stack15 = new java.lang.StringBuffer;

        $stack16 = virtualinvoke s.<java.lang.String: int length()>();

        specialinvoke $stack15.<java.lang.StringBuffer: void <init>(int)>($stack16);

        buf#2 = $stack15;

        virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(indstr);

        lastSp#3 = -1;

        cntr#4 = 0;

     label1:
        if cntr#4 >= len goto label5;

        c = virtualinvoke s.<java.lang.String: char charAt(int)>(cntr#4);

        if c != 10 goto label2;

        buf#2 = staticinvoke <cck.text.StringUtil: java.lang.StringBuffer newBuffer(java.lang.String,java.lang.StringBuffer,java.util.List)>(indstr, buf#2, $stack12);

        consumed#1 = virtualinvoke buf#2.<java.lang.StringBuffer: int length()>();

        goto label4;

     label2:
        $stack23 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c);

        if $stack23 == 0 goto label3;

        lastSp#3 = consumed#1;

     label3:
        virtualinvoke buf#2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        consumed#1 = consumed#1 + 1;

        if consumed#1 <= width goto label4;

        if lastSp#3 < 0 goto label4;

        $stack27 = lastSp#3 + 1;

        leftover = virtualinvoke buf#2.<java.lang.StringBuffer: java.lang.String substring(int)>($stack27);

        virtualinvoke buf#2.<java.lang.StringBuffer: void setLength(int)>(lastSp#3);

        buf#2 = staticinvoke <cck.text.StringUtil: java.lang.StringBuffer newBuffer(java.lang.String,java.lang.StringBuffer,java.util.List)>(leftover, buf#2, $stack12);

        consumed#1 = virtualinvoke buf#2.<java.lang.StringBuffer: int length()>();

     label4:
        cntr#4 = cntr#4 + 1;

        goto label1;

     label5:
        $stack18 = virtualinvoke buf#2.<java.lang.StringBuffer: int length()>();

        if $stack18 <= 0 goto label6;

        $stack19 = virtualinvoke buf#2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $stack12.<java.util.LinkedList: boolean add(java.lang.Object)>($stack19);

     label6:
        return $stack12;
    }

    static java.lang.StringBuffer newBuffer(java.lang.String, java.lang.StringBuffer, java.util.List)
    {
        java.util.List strs;
        java.lang.StringBuffer old, $stack5;
        java.lang.String $stack3, n;

        n := @parameter0: java.lang.String;

        old := @parameter1: java.lang.StringBuffer;

        strs := @parameter2: java.util.List;

        $stack3 = virtualinvoke old.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke strs.<java.util.List: boolean add(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuffer;

        specialinvoke $stack5.<java.lang.StringBuffer: void <init>(java.lang.String)>(n);

        return $stack5;
    }

    public static java.lang.String dup(char, int)
    {
        java.lang.StringBuffer $stack4;
        int len, cntr#1;
        java.lang.String $stack5;
        char c;

        c := @parameter0: char;

        len := @parameter1: int;

        $stack4 = new java.lang.StringBuffer;

        specialinvoke $stack4.<java.lang.StringBuffer: void <init>(int)>(len);

        cntr#1 = 0;

     label1:
        if cntr#1 >= len goto label2;

        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        $stack5 = virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String space(int)
    {
        int len, $stack2;
        java.lang.String[] $stack1, $stack4;
        java.lang.String $stack3, $stack5;

        len := @parameter0: int;

        if len > 0 goto label1;

        return "";

     label1:
        $stack1 = <cck.text.StringUtil: java.lang.String[] spacers>;

        $stack2 = lengthof $stack1;

        if len >= $stack2 goto label2;

        $stack4 = <cck.text.StringUtil: java.lang.String[] spacers>;

        $stack5 = $stack4[len];

        return $stack5;

     label2:
        $stack3 = staticinvoke <cck.text.StringUtil: java.lang.String dup(char,int)>(32, len);

        return $stack3;
    }

    public static void space(java.lang.StringBuffer, int)
    {
        int $stack2, len#1;
        java.lang.StringBuffer buf;

        buf := @parameter0: java.lang.StringBuffer;

        len#1 := @parameter1: int;

     label1:
        $stack2 = len#1;

        len#1 = len#1 + -1;

        if $stack2 <= 0 goto label2;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String toFixedFloat(float, int)
    {
        float fval, $stack12, $stack15, $stack16#1;
        boolean $stack6, $stack7;
        java.lang.StringBuffer $stack8;
        int places, $stack9;
        long val;
        byte $stack11;
        double $stack13;
        java.lang.String $stack14;

        fval := @parameter0: float;

        places := @parameter1: int;

        $stack6 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(fval);

        if $stack6 == 0 goto label1;

        return "(inf)";

     label1:
        $stack7 = staticinvoke <java.lang.Float: boolean isNaN(float)>(fval);

        if $stack7 == 0 goto label2;

        return "(NaN)";

     label2:
        $stack8 = new java.lang.StringBuffer;

        $stack9 = places + 5;

        specialinvoke $stack8.<java.lang.StringBuffer: void <init>(int)>($stack9);

        val = (long) fval;

        virtualinvoke $stack8.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(val);

        $stack11 = fval cmpl 0.0F;

        if $stack11 < 0 goto label3;

        $stack15 = (float) val;

        $stack16#1 = fval - $stack15;

        goto label4;

     label3:
        $stack12 = (float) val;

        $stack16#1 = $stack12 - fval;

     label4:
        $stack13 = (double) $stack16#1;

        staticinvoke <cck.text.StringUtil: void appendFract(java.lang.StringBuffer,double,int)>($stack8, $stack13, places);

        $stack14 = virtualinvoke $stack8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack14;
    }

    public static java.lang.String toDecimal(long, int)
    {
        java.lang.StringBuffer $stack4;
        int $stack5, places#2;
        java.lang.StringBuilder $stack7, $stack8, $stack10;
        java.lang.String $stack9, $stack11;
        long $stack12, val#1;

        val#1 := @parameter0: long;

        places#2 := @parameter1: int;

        $stack4 = new java.lang.StringBuffer;

        $stack5 = 10 + places#2;

        specialinvoke $stack4.<java.lang.StringBuffer: void <init>(int)>($stack5);

     label1:
        if places#2 <= 0 goto label2;

        $stack12 = val#1 % 10L;

        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($stack12);

        places#2 = places#2 + -1;

        val#1 = val#1 / 10L;

        if places#2 != 0 goto label1;

        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label1;

     label2:
        virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.StringBuffer reverse()>();

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(val#1);

        $stack9 = virtualinvoke $stack4.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack11;
    }

    public static java.lang.String toMultirepString(int, int)
    {
        java.lang.StringBuffer $stack5;
        int bits, $stack6, $stack7, $stack9, hexdigs, value, bit#1;
        long $stack10;
        java.lang.String $stack15;
        boolean $stack17;
        char $stack20#2;

        value := @parameter0: int;

        bits := @parameter1: int;

        $stack5 = new java.lang.StringBuffer;

        $stack6 = bits * 3;

        $stack7 = $stack6 + 8;

        specialinvoke $stack5.<java.lang.StringBuffer: void <init>(int)>($stack7);

        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");

        $stack9 = bits + 3;

        hexdigs = $stack9 / 4;

        $stack10 = (long) value;

        staticinvoke <cck.text.StringUtil: void toHex(java.lang.StringBuffer,long,int)>($stack5, $stack10, hexdigs);

        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        bit#1 = bits - 1;

     label1:
        if bit#1 < 0 goto label4;

        $stack17 = staticinvoke <cck.util.Arithmetic: boolean getBit(int,int)>(value, bit#1);

        if $stack17 == 0 goto label2;

        $stack20#2 = 49;

        goto label3;

     label2:
        $stack20#2 = 48;

     label3:
        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack20#2);

        bit#1 = bit#1 + -1;

        goto label1;

     label4:
        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(value);

        virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        if bits >= 9 goto label5;

        staticinvoke <cck.text.StringUtil: void appendChar(int,java.lang.StringBuffer)>(value, $stack5);

     label5:
        $stack15 = virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack15;
    }

    private static void appendChar(int, java.lang.StringBuffer)
    {
        int value;
        java.lang.StringBuffer buf;
        char $stack7;

        value := @parameter0: int;

        buf := @parameter1: java.lang.StringBuffer;

        tableswitch(value)
        {
            case 8: goto label3;
            case 9: goto label4;
            case 10: goto label1;
            case 11: goto label5;
            case 12: goto label5;
            case 13: goto label2;
            default: goto label5;
        };

     label1:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\n\'");

        goto label6;

     label2:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\r\'");

        goto label6;

     label3:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\b\'");

        goto label6;

     label4:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\t\'");

        goto label6;

     label5:
        if value < 32 goto label6;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $stack7 = (char) value;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack7);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

     label6:
        return;
    }

    public static char toBit(boolean)
    {
        boolean f;
        char $stack1#1;

        f := @parameter0: boolean;

        if f == 0 goto label1;

        $stack1#1 = 49;

        goto label2;

     label1:
        $stack1#1 = 48;

     label2:
        return $stack1#1;
    }

    public static void appendFract(java.lang.StringBuffer, double, int)
    {
        int digits, $stack9, digit, $stack10, cntr#1, radix#2;
        double val, $stack7, $stack8;
        java.lang.StringBuffer buf;
        char $stack11;

        buf := @parameter0: java.lang.StringBuffer;

        val := @parameter1: double;

        digits := @parameter2: int;

        cntr#1 = 0;

        radix#2 = 10;

     label1:
        if cntr#1 >= digits goto label3;

        if cntr#1 != 0 goto label2;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label2:
        $stack7 = (double) radix#2;

        $stack8 = val * $stack7;

        $stack9 = (int) $stack8;

        digit = $stack9 % 10;

        $stack10 = digit + 48;

        $stack11 = (char) $stack10;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack11);

        radix#2 = radix#2 * 10;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object)
    {
        java.util.Properties p;
        java.lang.Object o1;
        java.lang.String $stack4, template, $stack6;

        template := @parameter0: java.lang.String;

        p := @parameter1: java.util.Properties;

        o1 := @parameter2: java.lang.Object;

        $stack4 = virtualinvoke o1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $stack4);

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(template, p);

        return $stack6;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object[])
    {
        java.lang.Object[] strs;
        int $stack4, $stack6, cntr#1;
        java.lang.String template, $stack5, $stack7, $stack9;
        java.util.Properties p;
        java.lang.Object $stack8;

        template := @parameter0: java.lang.String;

        p := @parameter1: java.util.Properties;

        strs := @parameter2: java.lang.Object[];

        cntr#1 = 0;

     label1:
        $stack4 = lengthof strs;

        if cntr#1 >= $stack4 goto label2;

        $stack6 = cntr#1 + 1;

        $stack7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($stack6);

        $stack8 = strs[cntr#1];

        $stack9 = virtualinvoke $stack8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($stack7, $stack9);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(template, p);

        return $stack5;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.String[])
    {
        java.lang.String[] strs;
        int $stack4, $stack6, cntr#1;
        java.lang.String template, $stack5, $stack7, $stack8;
        java.util.Properties p;

        template := @parameter0: java.lang.String;

        p := @parameter1: java.util.Properties;

        strs := @parameter2: java.lang.String[];

        cntr#1 = 0;

     label1:
        $stack4 = lengthof strs;

        if cntr#1 >= $stack4 goto label2;

        $stack6 = cntr#1 + 1;

        $stack7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($stack6);

        $stack8 = strs[cntr#1];

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($stack7, $stack8);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(template, p);

        return $stack5;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object, java.lang.Object)
    {
        java.util.Properties p;
        java.lang.Object o1, o2;
        java.lang.String $stack5, $stack8, template, $stack10;

        template := @parameter0: java.lang.String;

        p := @parameter1: java.util.Properties;

        o1 := @parameter2: java.lang.Object;

        o2 := @parameter3: java.lang.Object;

        $stack5 = virtualinvoke o1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $stack5);

        $stack8 = virtualinvoke o2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("2", $stack8);

        $stack10 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(template, p);

        return $stack10;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Properties p;
        java.lang.Object o1, o2, o3;
        java.lang.String $stack6, $stack9, $stack12, template, $stack14;

        template := @parameter0: java.lang.String;

        p := @parameter1: java.util.Properties;

        o1 := @parameter2: java.lang.Object;

        o2 := @parameter3: java.lang.Object;

        o3 := @parameter4: java.lang.Object;

        $stack6 = virtualinvoke o1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $stack6);

        $stack9 = virtualinvoke o2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("2", $stack9);

        $stack12 = virtualinvoke o3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke p.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("3", $stack12);

        $stack14 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(template, p);

        return $stack14;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties)
    {
        java.lang.String template, $stack8;
        int max, pos#1;
        java.lang.StringBuffer $stack7;
        char ch;
        java.util.Properties p;

        template := @parameter0: java.lang.String;

        p := @parameter1: java.util.Properties;

        max = virtualinvoke template.<java.lang.String: int length()>();

        $stack7 = new java.lang.StringBuffer;

        specialinvoke $stack7.<java.lang.StringBuffer: void <init>(int)>(max);

        pos#1 = 0;

     label1:
        if pos#1 >= max goto label5;

        ch = virtualinvoke template.<java.lang.String: char charAt(int)>(pos#1);

        if ch != 36 goto label2;

        pos#1 = staticinvoke <cck.text.StringUtil: int replaceVar(int,int,java.lang.String,java.lang.StringBuffer,java.util.Properties)>(pos#1, max, template, $stack7, p);

        goto label4;

     label2:
        if ch != 37 goto label3;

        pos#1 = staticinvoke <cck.text.StringUtil: int replaceVarQuote(int,int,java.lang.String,java.lang.StringBuffer,java.util.Properties)>(pos#1, max, template, $stack7, p);

        goto label4;

     label3:
        virtualinvoke $stack7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(ch);

     label4:
        pos#1 = pos#1 + 1;

        goto label1;

     label5:
        $stack8 = virtualinvoke $stack7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack8;
    }

    private static int replaceVar(int, int, java.lang.String, java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer $stack7, buf;
        int max, pos#1, pos#2;
        java.lang.String template, result;
        java.util.Properties p;

        pos#1 := @parameter0: int;

        max := @parameter1: int;

        template := @parameter2: java.lang.String;

        buf := @parameter3: java.lang.StringBuffer;

        p := @parameter4: java.util.Properties;

        $stack7 = new java.lang.StringBuffer;

        specialinvoke $stack7.<java.lang.StringBuffer: void <init>(int)>(10);

        pos#2 = staticinvoke <cck.text.StringUtil: int scanAhead(int,char,int,java.lang.String,java.lang.StringBuffer,java.lang.StringBuffer)>(pos#1, 36, max, template, buf, $stack7);

        result = staticinvoke <cck.text.StringUtil: java.lang.String getProperty(java.lang.StringBuffer,java.util.Properties)>($stack7, p);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(result);

        return pos#2;
    }

    private static int scanAhead(int, char, int, java.lang.String, java.lang.StringBuffer, java.lang.StringBuffer)
    {
        int max, pos#1, pos#2;
        java.lang.String template;
        char vch, ch;
        boolean $stack8;
        java.lang.StringBuffer var, buf;

        pos#1 := @parameter0: int;

        ch := @parameter1: char;

        max := @parameter2: int;

        template := @parameter3: java.lang.String;

        buf := @parameter4: java.lang.StringBuffer;

        var := @parameter5: java.lang.StringBuffer;

        pos#2 = pos#1 + 1;

     label1:
        if pos#2 >= max goto label4;

        vch = virtualinvoke template.<java.lang.String: char charAt(int)>(pos#2);

        $stack8 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(vch);

        if $stack8 != 0 goto label2;

        pos#2 = pos#2 + -1;

        goto label4;

     label2:
        if vch != ch goto label3;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(ch);

        goto label4;

     label3:
        virtualinvoke var.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(vch);

        pos#2 = pos#2 + 1;

        goto label1;

     label4:
        return pos#2;
    }

    private static java.lang.String getProperty(java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer var;
        java.lang.String varname, result, $stack8, $stack10;
        java.util.Properties p;
        java.lang.StringBuilder $stack6, $stack7, $stack9;
        cck.util.Util$InternalError $stack11;

        var := @parameter0: java.lang.StringBuffer;

        p := @parameter1: java.util.Properties;

        varname = virtualinvoke var.<java.lang.StringBuffer: java.lang.String toString()>();

        result = virtualinvoke p.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(varname);

        if result != null goto label1;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringReplace(): unknown variable ");

        $stack8 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(varname);

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack10);

        throw $stack11;

     label1:
        return result;
    }

    private static int replaceVarQuote(int, int, java.lang.String, java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer $stack7, buf;
        int max, pos#1, pos#2;
        java.lang.String template, result;
        java.util.Properties p;

        pos#1 := @parameter0: int;

        max := @parameter1: int;

        template := @parameter2: java.lang.String;

        buf := @parameter3: java.lang.StringBuffer;

        p := @parameter4: java.util.Properties;

        $stack7 = new java.lang.StringBuffer;

        specialinvoke $stack7.<java.lang.StringBuffer: void <init>(int)>(10);

        pos#2 = staticinvoke <cck.text.StringUtil: int scanAhead(int,char,int,java.lang.String,java.lang.StringBuffer,java.lang.StringBuffer)>(pos#1, 37, max, template, buf, $stack7);

        result = staticinvoke <cck.text.StringUtil: java.lang.String getProperty(java.lang.StringBuffer,java.util.Properties)>($stack7, p);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(result);

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        return pos#2;
    }

    public static char[] getStringChars(java.lang.String)
    {
        java.lang.String str;
        int $stack2, $stack3;
        char[] val;

        str := @parameter0: java.lang.String;

        $stack2 = virtualinvoke str.<java.lang.String: int length()>();

        val = newarray (char)[$stack2];

        $stack3 = lengthof val;

        virtualinvoke str.<java.lang.String: void getChars(int,int,char[],int)>(0, $stack3, val, 0);

        return val;
    }

    public static java.util.List toList(java.lang.String)
    {
        java.util.LinkedList $stack4;
        java.lang.String val, $stack5, $stack10, $stack11, $stack19, $stack20;
        boolean $stack6;
        java.text.StringCharacterIterator $stack7;
        java.lang.StringBuffer $stack8, $stack22, buf#1;
        char $stack9, $stack13, $stack14;

        val := @parameter0: java.lang.String;

        $stack4 = new java.util.LinkedList;

        specialinvoke $stack4.<java.util.LinkedList: void <init>()>();

        $stack5 = "";

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>(val);

        if $stack6 == 0 goto label1;

        return $stack4;

     label1:
        $stack7 = new java.text.StringCharacterIterator;

        specialinvoke $stack7.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(val);

        $stack8 = new java.lang.StringBuffer;

        specialinvoke $stack8.<java.lang.StringBuffer: void <init>(int)>(32);

        buf#1 = $stack8;

     label2:
        $stack9 = interfaceinvoke $stack7.<java.text.CharacterIterator: char current()>();

        if $stack9 == 65535 goto label5;

        $stack13 = interfaceinvoke $stack7.<java.text.CharacterIterator: char current()>();

        if $stack13 != 44 goto label3;

        $stack19 = virtualinvoke buf#1.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack20 = virtualinvoke $stack19.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $stack4.<java.util.LinkedList: boolean add(java.lang.Object)>($stack20);

        $stack22 = new java.lang.StringBuffer;

        specialinvoke $stack22.<java.lang.StringBuffer: void <init>(int)>(32);

        buf#1 = $stack22;

        goto label4;

     label3:
        $stack14 = interfaceinvoke $stack7.<java.text.CharacterIterator: char current()>();

        virtualinvoke buf#1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack14);

     label4:
        interfaceinvoke $stack7.<java.text.CharacterIterator: char next()>();

        goto label2;

     label5:
        $stack10 = virtualinvoke buf#1.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $stack4.<java.util.LinkedList: boolean add(java.lang.Object)>($stack11);

        return $stack4;
    }

    public static java.lang.String getShortName(java.lang.Class)
    {
        java.lang.Class clazz;
        int dollar, dot, $stack7, $stack8, $stack10, $stack11;
        java.lang.String nm#1;

        clazz := @parameter0: java.lang.Class;

        nm#1 = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>();

        dollar = virtualinvoke nm#1.<java.lang.String: int lastIndexOf(int)>(36);

        dot = virtualinvoke nm#1.<java.lang.String: int lastIndexOf(int)>(46);

        if dot > 0 goto label1;

        if dollar <= 0 goto label3;

     label1:
        if dot <= dollar goto label2;

        $stack10 = dot + 1;

        $stack11 = virtualinvoke nm#1.<java.lang.String: int length()>();

        nm#1 = virtualinvoke nm#1.<java.lang.String: java.lang.String substring(int,int)>($stack10, $stack11);

        goto label3;

     label2:
        $stack7 = dollar + 1;

        $stack8 = virtualinvoke nm#1.<java.lang.String: int length()>();

        nm#1 = virtualinvoke nm#1.<java.lang.String: java.lang.String substring(int,int)>($stack7, $stack8);

     label3:
        return nm#1;
    }

    static void <clinit>()
    {
        java.lang.String[] $stack0, $stack1;

        <cck.text.StringUtil: char QUOTE_CHAR> = 34;

        <cck.text.StringUtil: char BACKSLASH> = 92;

        <cck.text.StringUtil: char SQUOTE_CHAR> = 39;

        <cck.text.StringUtil: java.lang.String COMMA_SPACE> = ", ";

        <cck.text.StringUtil: java.lang.String COMMA> = ",";

        <cck.text.StringUtil: java.lang.String RPAREN> = ")";

        <cck.text.StringUtil: java.lang.String LPAREN> = "(";

        <cck.text.StringUtil: java.lang.String SQUOTE> = "\'";

        <cck.text.StringUtil: java.lang.String QUOTE> = "\"";

        $stack0 = newarray (java.lang.String)[0];

        <cck.text.StringUtil: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0;

        $stack1 = newarray (java.lang.String)[11];

        $stack1[0] = "";

        $stack1[1] = " ";

        $stack1[2] = "  ";

        $stack1[3] = "   ";

        $stack1[4] = "    ";

        $stack1[5] = "     ";

        $stack1[6] = "      ";

        $stack1[7] = "       ";

        $stack1[8] = "        ";

        $stack1[9] = "         ";

        $stack1[10] = "          ";

        <cck.text.StringUtil: java.lang.String[] spacers> = $stack1;

        return;
    }
}
