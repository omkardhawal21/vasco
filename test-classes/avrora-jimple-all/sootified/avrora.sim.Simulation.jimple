public abstract class avrora.sim.Simulation extends cck.help.HelpCategory
{
    public final cck.util.Option$Str PLATFORM;
    public final cck.util.Option$Long CLOCKSPEED;
    public final cck.util.Option$Long EXTCLOCKSPEED;
    public final cck.util.Option$Str MCU;
    public final cck.util.Option$Long RANDOMSEED;
    public final cck.util.Option$Double SECONDS;
    public final cck.util.Option$List MONITORS;
    public final cck.util.Option$Str SCHEDULE;
    public final cck.util.Option$Str EELOADIMAGE;
    protected int num_nodes;
    protected avrora.sim.Simulation$Node[] nodes;
    protected boolean running;
    protected boolean paused;
    protected java.util.Random random;
    protected java.util.LinkedList monitorFactoryList;
    protected avrora.sim.energy.EnergyControl energyControl;
    protected avrora.sim.clock.Synchronizer synchronizer;

    protected void <init>(java.lang.String, java.lang.String, avrora.sim.clock.Synchronizer)
    {
        avrora.sim.Simulation this;
        java.lang.String str, h;
        cck.util.Option$Str $stack4, $stack7, $stack11, $stack12;
        cck.util.Option$Long $stack5, $stack6, $stack8;
        cck.util.Option$Double $stack9;
        cck.util.Option$List $stack10;
        avrora.sim.energy.EnergyControl $stack13;
        avrora.sim.Simulation$Node[] $stack14;
        avrora.sim.clock.Synchronizer s;
        java.util.LinkedList $stack15;

        this := @this: avrora.sim.Simulation;

        str := @parameter0: java.lang.String;

        h := @parameter1: java.lang.String;

        s := @parameter2: avrora.sim.clock.Synchronizer;

        specialinvoke this.<cck.help.HelpCategory: void <init>(java.lang.String,java.lang.String)>(str, h);

        $stack4 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("platform", "", "This option selects the platform on which the microcontroller is built, including the external devices such as LEDs and radio. If the platform option is not set, the default platform is the microcontroller specified in the \"mcu\" option, with no external devices.");

        this.<avrora.sim.Simulation: cck.util.Option$Str PLATFORM> = $stack4;

        $stack5 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Long newOption(java.lang.String,long,java.lang.String)>("clockspeed", 8000000L, "This option specifies the clockspeed of the microcontroller when the platform is not specified. The speed is given in cycles per second, i.e. hertz.");

        this.<avrora.sim.Simulation: cck.util.Option$Long CLOCKSPEED> = $stack5;

        $stack6 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Long newOption(java.lang.String,long,java.lang.String)>("external-clockspeed", 0L, "This option specifies the clockspeed of the external clock supplied to the microcontroller when the platform is not specified. The speed is given in cycles per second, i.e. hertz. When this option is set to zero, the external clock is the same speed as the main clock.");

        this.<avrora.sim.Simulation: cck.util.Option$Long EXTCLOCKSPEED> = $stack6;

        $stack7 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("mcu", "atmega128", "This option selects the microcontroller from a library of supported microcontroller models.");

        this.<avrora.sim.Simulation: cck.util.Option$Str MCU> = $stack7;

        $stack8 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Long newOption(java.lang.String,long,java.lang.String)>("random-seed", 0L, "This option is used to seed a pseudo-random number generator used in the simulation. If this option is set to non-zero, then its value is used as the seed for reproducible simulation results. If this option is not set, those parts of simulation that rely on random numbers will have seeds chosen based on system parameters that vary from run to run.");

        this.<avrora.sim.Simulation: cck.util.Option$Long RANDOMSEED> = $stack8;

        $stack9 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Double newOption(java.lang.String,double,java.lang.String)>("seconds", 0.0, "This option is used to terminate the simulation after the specified number of simulated seconds have passed.");

        this.<avrora.sim.Simulation: cck.util.Option$Double SECONDS> = $stack9;

        $stack10 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("monitors", "", "This option specifies a list of monitors to be attached to the program. Monitors collect information about the execution of the program while it is running such as profiling data or timing information.");

        this.<avrora.sim.Simulation: cck.util.Option$List MONITORS> = $stack10;

        $stack11 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("interrupt-schedule", "", "This option, when specified, contains the name of a file that contains an interrupt schedule that describes when to post interrupts (especially external interrupts) to the program. This is useful for testing programs under different interrupt loads. For multi-node simulations, the interrupt schedule is only applied to node 0.");

        this.<avrora.sim.Simulation: cck.util.Option$Str SCHEDULE> = $stack11;

        $stack12 = virtualinvoke this.<avrora.sim.Simulation: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("eeprom-load-image", "", "This option specifies a (binary) image file to load into EEPROM before starting the simulation.");

        this.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE> = $stack12;

        $stack13 = new avrora.sim.energy.EnergyControl;

        specialinvoke $stack13.<avrora.sim.energy.EnergyControl: void <init>()>();

        this.<avrora.sim.Simulation: avrora.sim.energy.EnergyControl energyControl> = $stack13;

        $stack14 = newarray (avrora.sim.Simulation$Node)[16];

        this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes> = $stack14;

        this.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer> = s;

        $stack15 = new java.util.LinkedList;

        specialinvoke $stack15.<java.util.LinkedList: void <init>()>();

        this.<avrora.sim.Simulation: java.util.LinkedList monitorFactoryList> = $stack15;

        return;
    }

    public abstract void process(cck.util.Options, java.lang.String[]) throws java.lang.Exception;

    public avrora.sim.Simulator createSimulator(int, avrora.sim.InterpreterFactory, avrora.sim.mcu.Microcontroller, avrora.core.Program)
    {
        avrora.sim.Simulator $stack5;
        int id;
        avrora.sim.Simulation this;
        avrora.sim.InterpreterFactory f;
        avrora.sim.mcu.Microcontroller mcu;
        avrora.core.Program p;

        this := @this: avrora.sim.Simulation;

        id := @parameter0: int;

        f := @parameter1: avrora.sim.InterpreterFactory;

        mcu := @parameter2: avrora.sim.mcu.Microcontroller;

        p := @parameter3: avrora.core.Program;

        $stack5 = new avrora.sim.Simulator;

        specialinvoke $stack5.<avrora.sim.Simulator: void <init>(int,avrora.sim.Simulation,avrora.sim.InterpreterFactory,avrora.sim.mcu.Microcontroller,avrora.core.Program)>(id, this, f, mcu, p);

        return $stack5;
    }

    public avrora.sim.output.SimPrinter getPrinter(avrora.sim.Simulator, java.lang.String)
    {
        java.lang.String category;
        boolean $stack3;
        avrora.sim.output.SimPrinter $stack4;
        avrora.sim.Simulator s;
        avrora.sim.Simulation this;

        this := @this: avrora.sim.Simulation;

        s := @parameter0: avrora.sim.Simulator;

        category := @parameter1: java.lang.String;

        $stack3 = staticinvoke <cck.text.Verbose: boolean isVerbose(java.lang.String)>(category);

        if $stack3 == 0 goto label1;

        $stack4 = new avrora.sim.output.SimPrinter;

        specialinvoke $stack4.<avrora.sim.output.SimPrinter: void <init>(avrora.sim.Simulator,java.lang.String)>(s, category);

        return $stack4;

     label1:
        return null;
    }

    public avrora.sim.output.SimPrinter getPrinter(avrora.sim.Simulator)
    {
        avrora.sim.output.SimPrinter $stack2;
        avrora.sim.Simulator s;
        avrora.sim.Simulation this;

        this := @this: avrora.sim.Simulation;

        s := @parameter0: avrora.sim.Simulator;

        $stack2 = new avrora.sim.output.SimPrinter;

        specialinvoke $stack2.<avrora.sim.output.SimPrinter: void <init>(avrora.sim.Simulator,java.lang.String)>(s, "");

        return $stack2;
    }

    public avrora.sim.energy.EnergyControl getEnergyControl()
    {
        avrora.sim.Simulation this;
        avrora.sim.energy.EnergyControl $stack1;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: avrora.sim.energy.EnergyControl energyControl>;

        return $stack1;
    }

    public synchronized avrora.sim.Simulation$Node createNode(avrora.sim.platform.PlatformFactory, avrora.core.LoadableProgram)
    {
        avrora.sim.Simulation this;
        boolean $stack5;
        int $stack6, $stack7, $stack10;
        avrora.sim.platform.PlatformFactory pf;
        avrora.core.LoadableProgram pp;
        avrora.sim.Simulation$Node n;
        avrora.sim.Simulation$Node[] $stack9, $stack11;

        this := @this: avrora.sim.Simulation;

        pf := @parameter0: avrora.sim.platform.PlatformFactory;

        pp := @parameter1: avrora.core.LoadableProgram;

        $stack5 = this.<avrora.sim.Simulation: boolean running>;

        if $stack5 == 0 goto label1;

        return null;

     label1:
        $stack6 = this.<avrora.sim.Simulation: int num_nodes>;

        $stack7 = $stack6 + 1;

        this.<avrora.sim.Simulation: int num_nodes> = $stack7;

        n = virtualinvoke this.<avrora.sim.Simulation: avrora.sim.Simulation$Node newNode(int,avrora.sim.platform.PlatformFactory,avrora.core.LoadableProgram)>($stack6, pf, pp);

        $stack9 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack10 = lengthof $stack9;

        if $stack6 < $stack10 goto label2;

        specialinvoke this.<avrora.sim.Simulation: void grow()>();

     label2:
        $stack11 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack11[$stack6] = n;

        return n;
    }

    protected avrora.sim.Simulation$Node newNode(int, avrora.sim.platform.PlatformFactory, avrora.core.LoadableProgram)
    {
        avrora.sim.Simulation$Node $stack4;
        avrora.sim.Simulation this;
        int id;
        avrora.sim.platform.PlatformFactory pf;
        avrora.core.LoadableProgram pp;

        this := @this: avrora.sim.Simulation;

        id := @parameter0: int;

        pf := @parameter1: avrora.sim.platform.PlatformFactory;

        pp := @parameter2: avrora.core.LoadableProgram;

        $stack4 = new avrora.sim.Simulation$Node;

        specialinvoke $stack4.<avrora.sim.Simulation$Node: void <init>(avrora.sim.Simulation,int,avrora.sim.platform.PlatformFactory,avrora.core.LoadableProgram)>(this, id, pf, pp);

        return $stack4;
    }

    public int getNumberOfNodes()
    {
        avrora.sim.Simulation this;
        int $stack1;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: int num_nodes>;

        return $stack1;
    }

    public java.util.Random getRandom()
    {
        avrora.sim.Simulation this;
        java.util.Random $stack3, $stack8, $stack10, $stack4#4;
        cck.util.Option$Long $stack5;
        long seed;
        byte $stack7;

        this := @this: avrora.sim.Simulation;

        $stack3 = this.<avrora.sim.Simulation: java.util.Random random>;

        if $stack3 != null goto label2;

        $stack5 = this.<avrora.sim.Simulation: cck.util.Option$Long RANDOMSEED>;

        seed = virtualinvoke $stack5.<cck.util.Option$Long: long get()>();

        $stack7 = seed cmp 0L;

        if $stack7 == 0 goto label1;

        $stack10 = new java.util.Random;

        specialinvoke $stack10.<java.util.Random: void <init>(long)>(seed);

        this.<avrora.sim.Simulation: java.util.Random random> = $stack10;

        goto label2;

     label1:
        $stack8 = new java.util.Random;

        specialinvoke $stack8.<java.util.Random: void <init>()>();

        this.<avrora.sim.Simulation: java.util.Random random> = $stack8;

     label2:
        $stack4#4 = this.<avrora.sim.Simulation: java.util.Random random>;

        return $stack4#4;
    }

    private void grow()
    {
        avrora.sim.Simulation this;
        avrora.sim.Simulation$Node[] $stack2, nnodes, $stack5, $stack7;
        int $stack3, $stack4, $stack6;

        this := @this: avrora.sim.Simulation;

        $stack2 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack3 = lengthof $stack2;

        $stack4 = $stack3 * 2;

        nnodes = newarray (avrora.sim.Simulation$Node)[$stack4];

        $stack7 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack5 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack6 = lengthof $stack5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack7, 0, nnodes, 0, $stack6);

        this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes> = nnodes;

        return;
    }

    public synchronized avrora.sim.Simulation$Node getNode(int)
    {
        int node_id, $stack3;
        avrora.sim.Simulation this;
        avrora.sim.Simulation$Node[] $stack2, $stack4;
        avrora.sim.Simulation$Node $stack5;

        this := @this: avrora.sim.Simulation;

        node_id := @parameter0: int;

        $stack2 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack3 = lengthof $stack2;

        if node_id < $stack3 goto label1;

        return null;

     label1:
        $stack4 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack5 = $stack4[node_id];

        return $stack5;
    }

    public synchronized void removeNode(int)
    {
        avrora.sim.Simulation this;
        boolean $stack3;
        int node_id, $stack8, $stack9;
        avrora.sim.Simulation$Node[] $stack4, $stack6, $stack7;
        avrora.sim.Simulation$Node $stack5, node;
        avrora.sim.clock.Synchronizer $stack10;

        this := @this: avrora.sim.Simulation;

        node_id := @parameter0: int;

        $stack3 = this.<avrora.sim.Simulation: boolean running>;

        if $stack3 == 0 goto label1;

        return;

     label1:
        $stack4 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack5 = $stack4[node_id];

        if $stack5 == null goto label2;

        $stack6 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        node = $stack6[node_id];

        $stack7 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack7[node_id] = null;

        $stack8 = this.<avrora.sim.Simulation: int num_nodes>;

        $stack9 = $stack8 - 1;

        this.<avrora.sim.Simulation: int num_nodes> = $stack9;

        $stack10 = this.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $stack10.<avrora.sim.clock.Synchronizer: void removeNode(avrora.sim.Simulation$Node)>(node);

        virtualinvoke node.<avrora.sim.Simulation$Node: void remove()>();

     label2:
        return;
    }

    public synchronized void start()
    {
        avrora.sim.Simulation this;
        boolean $stack1;
        avrora.sim.clock.Synchronizer $stack2;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: boolean running>;

        if $stack1 == 0 goto label1;

        return;

     label1:
        virtualinvoke this.<avrora.sim.Simulation: void instantiateNodes()>();

        $stack2 = this.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $stack2.<avrora.sim.clock.Synchronizer: void start()>();

        this.<avrora.sim.Simulation: boolean running> = 1;

        return;
    }

    protected void instantiateNodes()
    {
        avrora.sim.Simulation this;
        avrora.sim.Simulation$Node[] $stack3, $stack5;
        int $stack4, cntr#1;
        avrora.sim.Simulation$Node n;

        this := @this: avrora.sim.Simulation;

        cntr#1 = 0;

     label1:
        $stack3 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        $stack4 = lengthof $stack3;

        if cntr#1 >= $stack4 goto label4;

        $stack5 = this.<avrora.sim.Simulation: avrora.sim.Simulation$Node[] nodes>;

        n = $stack5[cntr#1];

        if n != null goto label2;

        goto label3;

     label2:
        virtualinvoke n.<avrora.sim.Simulation$Node: void instantiate()>();

        virtualinvoke n.<avrora.sim.Simulation$Node: void addMonitors()>();

     label3:
        cntr#1 = cntr#1 + 1;

        goto label1;

     label4:
        return;
    }

    public synchronized void pause()
    {
        avrora.sim.Simulation this;
        boolean $stack1;
        avrora.sim.clock.Synchronizer $stack2;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: boolean running>;

        if $stack1 != 0 goto label1;

        return;

     label1:
        $stack2 = this.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $stack2.<avrora.sim.clock.Synchronizer: void pause()>();

        this.<avrora.sim.Simulation: boolean paused> = 1;

        return;
    }

    public synchronized void resume()
    {
        avrora.sim.Simulation this;
        boolean $stack1;
        cck.util.Util$InternalError $stack2;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: boolean running>;

        if $stack1 != 0 goto label1;

        return;

     label1:
        $stack2 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unimplemented()>();

        throw $stack2;
    }

    public synchronized void stop()
    {
        avrora.sim.Simulation this;
        boolean $stack1;
        avrora.sim.clock.Synchronizer $stack2;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: boolean running>;

        if $stack1 != 0 goto label1;

        return;

     label1:
        $stack2 = this.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $stack2.<avrora.sim.clock.Synchronizer: void stop()>();

        this.<avrora.sim.Simulation: boolean paused> = 0;

        this.<avrora.sim.Simulation: boolean running> = 0;

        return;
    }

    public synchronized void join() throws java.lang.InterruptedException
    {
        avrora.sim.Simulation this;
        avrora.sim.clock.Synchronizer $stack1;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $stack1.<avrora.sim.clock.Synchronizer: void join()>();

        return;
    }

    public synchronized void stopNode(int)
    {
        avrora.sim.Simulation this;
        boolean $stack2;
        cck.util.Util$InternalError $stack3;
        int id;

        this := @this: avrora.sim.Simulation;

        id := @parameter0: int;

        $stack2 = this.<avrora.sim.Simulation: boolean running>;

        if $stack2 != 0 goto label1;

        return;

     label1:
        $stack3 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unimplemented()>();

        throw $stack3;
    }

    public boolean isPaused()
    {
        avrora.sim.Simulation this;
        boolean $stack1;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: boolean paused>;

        return $stack1;
    }

    public boolean isRunning()
    {
        avrora.sim.Simulation this;
        boolean $stack1;

        this := @this: avrora.sim.Simulation;

        $stack1 = this.<avrora.sim.Simulation: boolean running>;

        return $stack1;
    }

    public java.util.Iterator getNodeIterator()
    {
        avrora.sim.Simulation$Iter $stack1;
        avrora.sim.Simulation this;

        this := @this: avrora.sim.Simulation;

        $stack1 = new avrora.sim.Simulation$Iter;

        specialinvoke $stack1.<avrora.sim.Simulation$Iter: void <init>(avrora.sim.Simulation)>(this);

        return $stack1;
    }

    protected avrora.sim.platform.PlatformFactory getPlatform()
    {
        avrora.sim.Simulation this;
        cck.util.Option$Str $stack6, $stack8, $stack17;
        boolean $stack7;
        avrora.sim.platform.PlatformFactory $stack10, $r0;
        cck.util.Option$Long $stack11, $stack13;
        byte $stack15, $stack16;
        java.lang.String $stack18, $stack25, hz#3;
        avrora.sim.mcu.MicrocontrollerFactory mcf;
        java.lang.StringBuilder $stack23, $stack24, $u0;
        long hz#1, exthz#2;
        avrora.sim.platform.DefaultPlatform$Factory $u1;

        this := @this: avrora.sim.Simulation;

        $stack6 = this.<avrora.sim.Simulation: cck.util.Option$Str PLATFORM>;

        $stack7 = virtualinvoke $stack6.<cck.util.Option$Str: boolean isBlank()>();

        if $stack7 == 0 goto label3;

        $stack11 = this.<avrora.sim.Simulation: cck.util.Option$Long CLOCKSPEED>;

        hz#1 = virtualinvoke $stack11.<cck.util.Option$Long: long get()>();

        $stack13 = this.<avrora.sim.Simulation: cck.util.Option$Long EXTCLOCKSPEED>;

        exthz#2 = virtualinvoke $stack13.<cck.util.Option$Long: long get()>();

        $stack15 = exthz#2 cmp 0L;

        if $stack15 != 0 goto label1;

        exthz#2 = hz#1;

     label1:
        $stack16 = exthz#2 cmp hz#1;

        if $stack16 <= 0 goto label2;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(exthz#2);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hz");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("External clock is greater than main clock speed", $stack25);

     label2:
        $stack17 = this.<avrora.sim.Simulation: cck.util.Option$Str MCU>;

        $stack18 = virtualinvoke $stack17.<cck.util.Option$Str: java.lang.String get()>();

        mcf = staticinvoke <avrora.Defaults: avrora.sim.mcu.MicrocontrollerFactory getMicrocontroller(java.lang.String)>($stack18);

        $u1 = new avrora.sim.platform.DefaultPlatform$Factory;

        specialinvoke $u1.<avrora.sim.platform.DefaultPlatform$Factory: void <init>(long,long,avrora.sim.mcu.MicrocontrollerFactory)>(hz#1, exthz#2, mcf);

        $r0 = (avrora.sim.platform.PlatformFactory) $u1;

        return $r0;

     label3:
        $stack8 = this.<avrora.sim.Simulation: cck.util.Option$Str PLATFORM>;

        hz#3 = virtualinvoke $stack8.<cck.util.Option$Str: java.lang.String get()>();

        $stack10 = staticinvoke <avrora.Defaults: avrora.sim.platform.PlatformFactory getPlatform(java.lang.String)>(hz#3);

        return $stack10;
    }

    protected void processMonitorList()
    {
        avrora.sim.Simulation this;
        cck.util.Option$List $stack5;
        java.util.List l;
        java.util.Iterator i;
        boolean $stack8;
        java.lang.Object $stack9;
        java.lang.String clname;
        avrora.monitors.MonitorFactory mf;
        cck.util.Options $stack11;
        java.util.LinkedList $stack12;

        this := @this: avrora.sim.Simulation;

        $stack5 = this.<avrora.sim.Simulation: cck.util.Option$List MONITORS>;

        l = virtualinvoke $stack5.<cck.util.Option$List: java.util.List get()>();

        i = interfaceinvoke l.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label2;

        $stack9 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        clname = (java.lang.String) $stack9;

        mf = staticinvoke <avrora.Defaults: avrora.monitors.MonitorFactory getMonitor(java.lang.String)>(clname);

        $stack11 = this.<avrora.sim.Simulation: cck.util.Options options>;

        virtualinvoke mf.<avrora.monitors.MonitorFactory: void processOptions(cck.util.Options)>($stack11);

        $stack12 = this.<avrora.sim.Simulation: java.util.LinkedList monitorFactoryList>;

        virtualinvoke $stack12.<java.util.LinkedList: void addLast(java.lang.Object)>(mf);

        goto label1;

     label2:
        return;
    }
}
