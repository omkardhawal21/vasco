public class avrora.Defaults$AutoProgramReader extends avrora.core.ProgramReader
{

    public void <init>()
    {
        avrora.Defaults$AutoProgramReader this;

        this := @this: avrora.Defaults$AutoProgramReader;

        specialinvoke this.<avrora.core.ProgramReader: void <init>(java.lang.String)>("The \"auto\" input format reads a program from a single file at a time. It uses the extension of the filename as a clue to decide what input reader to use for that file. For example, an extension of \".asm\" is considered to be a program in Atmel assembly syntax.");

        return;
    }

    public avrora.core.Program read(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] args;
        int $stack6, $stack7, offset;
        java.lang.String n, $stack9, extension, $stack11, $stack13, $stack15, $stack17, $stack21, $stack24, $stack30, $stack33, $stack41, $stack44;
        boolean $stack12, $stack14, $stack16, $stack18;
        avrora.Defaults$AutoProgramReader this;
        cck.util.Option$List $stack19, $stack20;
        cck.util.Option$Str $stack22, $stack23;
        cck.util.Options $stack25, $stack26;
        avrora.core.Program $stack27;
        java.lang.StringBuilder $stack28, $stack29, $stack31, $stack32, $stack39, $stack40, $stack42, $stack43;
        avrora.syntax.elf.ELFParser $stack34;
        avrora.syntax.objdump.ObjDump2ProgramReader $stack36;
        avrora.syntax.objdump.ObjDumpProgramReader $stack37;
        avrora.syntax.atmel.AtmelProgramReader $stack38;
        avrora.core.ProgramReader reader#1;

        this := @this: avrora.Defaults$AutoProgramReader;

        args := @parameter0: java.lang.String[];

        $stack6 = lengthof args;

        if $stack6 != 0 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("no input files");

     label1:
        $stack7 = lengthof args;

        if $stack7 == 1 goto label2;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type \"auto\" accepts only one file at a time.");

     label2:
        n = args[0];

        offset = virtualinvoke n.<java.lang.String: int lastIndexOf(int)>(46);

        if offset >= 0 goto label3;

        $stack39 = new java.lang.StringBuilder;

        specialinvoke $stack39.<java.lang.StringBuilder: void <init>()>();

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file ");

        $stack41 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(n);

        $stack42 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack41);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have an extension");

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String)>($stack44);

     label3:
        $stack9 = virtualinvoke n.<java.lang.String: java.lang.String substring(int)>(offset);

        extension = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>();

        reader#1 = null;

        $stack11 = ".asm";

        $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(extension);

        if $stack12 == 0 goto label4;

        $stack38 = new avrora.syntax.atmel.AtmelProgramReader;

        specialinvoke $stack38.<avrora.syntax.atmel.AtmelProgramReader: void <init>()>();

        reader#1 = $stack38;

        goto label7;

     label4:
        $stack13 = ".od";

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean equals(java.lang.Object)>(extension);

        if $stack14 == 0 goto label5;

        $stack37 = new avrora.syntax.objdump.ObjDumpProgramReader;

        specialinvoke $stack37.<avrora.syntax.objdump.ObjDumpProgramReader: void <init>()>();

        reader#1 = $stack37;

        goto label7;

     label5:
        $stack15 = ".odpp";

        $stack16 = virtualinvoke $stack15.<java.lang.String: boolean equals(java.lang.Object)>(extension);

        if $stack16 == 0 goto label6;

        $stack36 = new avrora.syntax.objdump.ObjDump2ProgramReader;

        specialinvoke $stack36.<avrora.syntax.objdump.ObjDump2ProgramReader: void <init>()>();

        reader#1 = $stack36;

        goto label7;

     label6:
        $stack17 = ".elf";

        $stack18 = virtualinvoke $stack17.<java.lang.String: boolean equals(java.lang.Object)>(extension);

        if $stack18 == 0 goto label7;

        $stack34 = new avrora.syntax.elf.ELFParser;

        specialinvoke $stack34.<avrora.syntax.elf.ELFParser: void <init>()>();

        reader#1 = $stack34;

     label7:
        if reader#1 != null goto label8;

        $stack28 = new java.lang.StringBuilder;

        specialinvoke $stack28.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file extension ");

        $stack30 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(extension);

        $stack31 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack30);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String)>($stack33);

        return null;

     label8:
        $stack20 = reader#1.<avrora.core.ProgramReader: cck.util.Option$List INDIRECT_EDGES>;

        $stack19 = this.<avrora.Defaults$AutoProgramReader: cck.util.Option$List INDIRECT_EDGES>;

        $stack21 = virtualinvoke $stack19.<cck.util.Option$List: java.lang.String stringValue()>();

        virtualinvoke $stack20.<cck.util.Option$List: void set(java.lang.String)>($stack21);

        $stack23 = reader#1.<avrora.core.ProgramReader: cck.util.Option$Str ARCH>;

        $stack22 = this.<avrora.Defaults$AutoProgramReader: cck.util.Option$Str ARCH>;

        $stack24 = virtualinvoke $stack22.<cck.util.Option$Str: java.lang.String stringValue()>();

        virtualinvoke $stack23.<cck.util.Option$Str: void set(java.lang.String)>($stack24);

        $stack26 = reader#1.<avrora.core.ProgramReader: cck.util.Options options>;

        $stack25 = this.<avrora.Defaults$AutoProgramReader: cck.util.Options options>;

        virtualinvoke $stack26.<cck.util.Options: void process(cck.util.Options)>($stack25);

        $stack27 = virtualinvoke reader#1.<avrora.core.ProgramReader: avrora.core.Program read(java.lang.String[])>(args);

        return $stack27;
    }
}
