public class cck.elf.ELFSectionHeaderTable extends java.lang.Object
{
    public static final int SHT_NULL;
    public static final int SHT_PROGBITS;
    public static final int SHT_SYMTAB;
    public static final int SHT_STRTAB;
    public static final int SHT_RELA;
    public static final int SHT_HASH;
    public static final int SHT_DYNAMIC;
    public static final int SHT_NOTE;
    public static final int SHT_NOBITS;
    public static final int SHT_REL;
    public static final int SHT_SHLIB;
    public static final int SHT_DYNSYM;
    public static final int SHT_LOPROC;
    public static final int SHT_HIPROC;
    public static final int SHT_LOUSER;
    public static final int SHT_HIUSER;
    public static final int SHF_WRITE;
    public static final int SHF_ALLOC;
    public static final int SHF_EXECINSTR;
    public static final int SHF_MASKPROC;
    public final cck.elf.ELFHeader header;
    public final cck.elf.ELFSectionHeaderTable$Entry32[] entries;
    protected cck.elf.ELFStringTable strtab;

    public void <init>(cck.elf.ELFHeader)
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFHeader header;
        short $stack2;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack3;

        this := @this: cck.elf.ELFSectionHeaderTable;

        header := @parameter0: cck.elf.ELFHeader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header> = header;

        $stack2 = header.<cck.elf.ELFHeader: short e_shnum>;

        $stack3 = newarray (cck.elf.ELFSectionHeaderTable$Entry32)[$stack2];

        this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries> = $stack3;

        return;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack6, $stack13, $stack26;
        int $stack7, $stack9, $stack14, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, cntr#1, pad#2;
        java.io.RandomAccessFile fis;
        cck.elf.ELFHeader $stack8, $stack12, $stack27;
        long $stack10;
        cck.elf.ELFDataInputStream $stack11;
        cck.elf.ELFSectionHeaderTable$Entry32 $stack15;
        short $stack28;

        this := @this: cck.elf.ELFSectionHeaderTable;

        fis := @parameter0: java.io.RandomAccessFile;

        $stack6 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack7 = lengthof $stack6;

        if $stack7 != 0 goto label1;

        return;

     label1:
        $stack8 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;

        $stack9 = $stack8.<cck.elf.ELFHeader: int e_shoff>;

        $stack10 = (long) $stack9;

        virtualinvoke fis.<java.io.RandomAccessFile: void seek(long)>($stack10);

        $stack11 = new cck.elf.ELFDataInputStream;

        $stack12 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;

        specialinvoke $stack11.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>($stack12, fis);

        cntr#1 = 0;

     label2:
        $stack13 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack14 = lengthof $stack13;

        if cntr#1 >= $stack14 goto label5;

        $stack15 = new cck.elf.ELFSectionHeaderTable$Entry32;

        specialinvoke $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: void <init>(cck.elf.ELFSectionHeaderTable)>(this);

        $stack16 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_name> = $stack16;

        $stack17 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_type> = $stack17;

        $stack18 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_flags> = $stack18;

        $stack19 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addr> = $stack19;

        $stack20 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_offset> = $stack20;

        $stack21 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_size> = $stack21;

        $stack22 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_link> = $stack22;

        $stack23 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_info> = $stack23;

        $stack24 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addralign> = $stack24;

        $stack25 = virtualinvoke $stack11.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        $stack15.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_entsize> = $stack25;

        $stack26 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack26[cntr#1] = $stack15;

        pad#2 = 40;

     label3:
        $stack27 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;

        $stack28 = $stack27.<cck.elf.ELFHeader: short e_shentsize>;

        if pad#2 >= $stack28 goto label4;

        virtualinvoke fis.<java.io.RandomAccessFile: int read()>();

        pad#2 = pad#2 + 1;

        goto label3;

     label4:
        cntr#1 = cntr#1 + 1;

        goto label2;

     label5:
        return;
    }

    public void setStringTable(cck.elf.ELFStringTable)
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFStringTable str;

        this := @this: cck.elf.ELFSectionHeaderTable;

        str := @parameter0: cck.elf.ELFStringTable;

        this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab> = str;

        return;
    }

    public cck.elf.ELFStringTable getStringTable()
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFStringTable $stack1;

        this := @this: cck.elf.ELFSectionHeaderTable;

        $stack1 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab>;

        return $stack1;
    }

    public java.lang.String getSectionName(int)
    {
        int ind, $stack4;
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack3, $stack5;
        cck.elf.ELFSectionHeaderTable$Entry32 e;
        java.lang.String $stack6;

        this := @this: cck.elf.ELFSectionHeaderTable;

        ind := @parameter0: int;

        if ind < 0 goto label1;

        $stack3 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack4 = lengthof $stack3;

        if ind < $stack4 goto label2;

     label1:
        return "";

     label2:
        $stack5 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        e = $stack5[ind];

        $stack6 = virtualinvoke e.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getName()>();

        return $stack6;
    }

    public static void <clinit>()
    {
        <cck.elf.ELFSectionHeaderTable: int SHF_MASKPROC> = -268435456;

        <cck.elf.ELFSectionHeaderTable: int SHF_EXECINSTR> = 4;

        <cck.elf.ELFSectionHeaderTable: int SHF_ALLOC> = 2;

        <cck.elf.ELFSectionHeaderTable: int SHF_WRITE> = 1;

        <cck.elf.ELFSectionHeaderTable: int SHT_HIUSER> = -1879048193;

        <cck.elf.ELFSectionHeaderTable: int SHT_LOUSER> = -2147483648;

        <cck.elf.ELFSectionHeaderTable: int SHT_HIPROC> = 2147483647;

        <cck.elf.ELFSectionHeaderTable: int SHT_LOPROC> = 1879048192;

        <cck.elf.ELFSectionHeaderTable: int SHT_DYNSYM> = 11;

        <cck.elf.ELFSectionHeaderTable: int SHT_SHLIB> = 10;

        <cck.elf.ELFSectionHeaderTable: int SHT_REL> = 9;

        <cck.elf.ELFSectionHeaderTable: int SHT_NOBITS> = 8;

        <cck.elf.ELFSectionHeaderTable: int SHT_NOTE> = 7;

        <cck.elf.ELFSectionHeaderTable: int SHT_DYNAMIC> = 6;

        <cck.elf.ELFSectionHeaderTable: int SHT_HASH> = 5;

        <cck.elf.ELFSectionHeaderTable: int SHT_RELA> = 4;

        <cck.elf.ELFSectionHeaderTable: int SHT_STRTAB> = 3;

        <cck.elf.ELFSectionHeaderTable: int SHT_SYMTAB> = 2;

        <cck.elf.ELFSectionHeaderTable: int SHT_PROGBITS> = 1;

        <cck.elf.ELFSectionHeaderTable: int SHT_NULL> = 0;

        return;
    }
}
