public class jdk.internal.org.objectweb.asm.TypePath extends java.lang.Object
{
    public static final int ARRAY_ELEMENT;
    public static final int INNER_TYPE;
    public static final int WILDCARD_BOUND;
    public static final int TYPE_ARGUMENT;
    byte[] b;
    int offset;

    void <init>(byte[], int)
    {
        jdk.internal.org.objectweb.asm.TypePath l0;
        byte[] l1;
        int l2;

        l0 := @this: jdk.internal.org.objectweb.asm.TypePath;

        l1 := @parameter0: byte[];

        l2 := @parameter1: int;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<jdk.internal.org.objectweb.asm.TypePath: byte[] b> = l1;

        l0.<jdk.internal.org.objectweb.asm.TypePath: int offset> = l2;

        return;
    }

    public int getLength()
    {
        jdk.internal.org.objectweb.asm.TypePath l0;
        int $stack1;
        byte[] $stack2;
        byte $stack3;

        l0 := @this: jdk.internal.org.objectweb.asm.TypePath;

        $stack2 = l0.<jdk.internal.org.objectweb.asm.TypePath: byte[] b>;

        $stack1 = l0.<jdk.internal.org.objectweb.asm.TypePath: int offset>;

        $stack3 = $stack2[$stack1];

        return $stack3;
    }

    public int getStep(int)
    {
        jdk.internal.org.objectweb.asm.TypePath l0;
        int l1, $stack2, $stack3, $stack4, $stack5;
        byte[] $stack6;
        byte $stack7;

        l0 := @this: jdk.internal.org.objectweb.asm.TypePath;

        l1 := @parameter0: int;

        $stack6 = l0.<jdk.internal.org.objectweb.asm.TypePath: byte[] b>;

        $stack3 = l0.<jdk.internal.org.objectweb.asm.TypePath: int offset>;

        $stack2 = 2 * l1;

        $stack4 = $stack3 + $stack2;

        $stack5 = $stack4 + 1;

        $stack7 = $stack6[$stack5];

        return $stack7;
    }

    public int getStepArgument(int)
    {
        jdk.internal.org.objectweb.asm.TypePath l0;
        int l1, $stack2, $stack3, $stack4, $stack5;
        byte[] $stack6;
        byte $stack7;

        l0 := @this: jdk.internal.org.objectweb.asm.TypePath;

        l1 := @parameter0: int;

        $stack6 = l0.<jdk.internal.org.objectweb.asm.TypePath: byte[] b>;

        $stack3 = l0.<jdk.internal.org.objectweb.asm.TypePath: int offset>;

        $stack2 = 2 * l1;

        $stack4 = $stack3 + $stack2;

        $stack5 = $stack4 + 2;

        $stack7 = $stack6[$stack5];

        return $stack7;
    }

    public static jdk.internal.org.objectweb.asm.TypePath fromString(java.lang.String)
    {
        java.lang.String l0;
        int $stack6, l1, $stack10, $stack11, $stack16, $stack28, $stack29, l3#1, l5#3;
        jdk.internal.org.objectweb.asm.ByteVector $stack8;
        byte $stack12;
        byte[] $stack13, $stack15;
        jdk.internal.org.objectweb.asm.TypePath $stack14;
        char $stack21, $stack25, l4#2;

        l0 := @parameter0: java.lang.String;

        if l0 == null goto label01;

        $stack6 = virtualinvoke l0.<java.lang.String: int length()>();

        if $stack6 != 0 goto label02;

     label01:
        return null;

     label02:
        l1 = virtualinvoke l0.<java.lang.String: int length()>();

        $stack8 = new jdk.internal.org.objectweb.asm.ByteVector;

        specialinvoke $stack8.<jdk.internal.org.objectweb.asm.ByteVector: void <init>(int)>(l1);

        virtualinvoke $stack8.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putByte(int)>(0);

        l3#1 = 0;

     label03:
        if l3#1 >= l1 goto label11;

        $stack16 = l3#1;

        l3#1 = l3#1 + 1;

        l4#2 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack16);

        if l4#2 != 91 goto label04;

        virtualinvoke $stack8.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(0, 0);

        goto label10;

     label04:
        if l4#2 != 46 goto label05;

        virtualinvoke $stack8.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(1, 0);

        goto label10;

     label05:
        if l4#2 != 42 goto label06;

        virtualinvoke $stack8.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(2, 0);

        goto label10;

     label06:
        if l4#2 < 48 goto label10;

        if l4#2 > 57 goto label10;

        l5#3 = l4#2 - 48;

     label07:
        if l3#1 >= l1 goto label08;

        $stack25 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3#1);

        if $stack25 < 48 goto label08;

        if $stack25 > 57 goto label08;

        $stack28 = l5#3 * 10;

        $stack29 = $stack28 + $stack25;

        l5#3 = $stack29 - 48;

        l3#1 = l3#1 + 1;

        goto label07;

     label08:
        if l3#1 >= l1 goto label09;

        $stack21 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3#1);

        if $stack21 != 59 goto label09;

        l3#1 = l3#1 + 1;

     label09:
        virtualinvoke $stack8.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(3, l5#3);

     label10:
        goto label03;

     label11:
        $stack13 = $stack8.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack10 = $stack8.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack11 = $stack10 / 2;

        $stack12 = (byte) $stack11;

        $stack13[0] = $stack12;

        $stack14 = new jdk.internal.org.objectweb.asm.TypePath;

        $stack15 = $stack8.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        specialinvoke $stack14.<jdk.internal.org.objectweb.asm.TypePath: void <init>(byte[],int)>($stack15, 0);

        return $stack14;
    }

    public java.lang.String toString()
    {
        jdk.internal.org.objectweb.asm.TypePath l0;
        int l1, $stack6, $stack8, $stack9, l3#1;
        java.lang.StringBuilder $stack5, $stack10;
        java.lang.String $stack7;

        l0 := @this: jdk.internal.org.objectweb.asm.TypePath;

        l1 = virtualinvoke l0.<jdk.internal.org.objectweb.asm.TypePath: int getLength()>();

        $stack5 = new java.lang.StringBuilder;

        $stack6 = l1 * 2;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>(int)>($stack6);

        l3#1 = 0;

     label1:
        if l3#1 >= l1 goto label8;

        $stack8 = virtualinvoke l0.<jdk.internal.org.objectweb.asm.TypePath: int getStep(int)>(l3#1);

        tableswitch($stack8)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        goto label7;

     label3:
        virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        goto label7;

     label4:
        virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(42);

        goto label7;

     label5:
        $stack9 = virtualinvoke l0.<jdk.internal.org.objectweb.asm.TypePath: int getStepArgument(int)>(l3#1);

        $stack10 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack9);

        virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label7;

     label6:
        virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label7:
        l3#1 = l3#1 + 1;

        goto label1;

     label8:
        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    public static void <clinit>()
    {
        <jdk.internal.org.objectweb.asm.TypePath: int TYPE_ARGUMENT> = 3;

        <jdk.internal.org.objectweb.asm.TypePath: int WILDCARD_BOUND> = 2;

        <jdk.internal.org.objectweb.asm.TypePath: int INNER_TYPE> = 1;

        <jdk.internal.org.objectweb.asm.TypePath: int ARRAY_ELEMENT> = 0;

        return;
    }
}
