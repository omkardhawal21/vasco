public class avrora.sim.mcu.ReprogrammableCodeSegment extends avrora.sim.CodeSegment
{
    private static final double ERASE_MS_MIN;
    private static final double WRITE_MS_MIN;
    private static final double ERASE_MS_MAX;
    private static final double WRITE_MS_MAX;
    private static final int SPM_TIMEOUT;
    private static final int STATE_NONE;
    private static final int STATE_PGERASE;
    private static final int STATE_RWWSRE;
    private static final int STATE_BLBSET;
    private static final int STATE_FILL;
    private static final int STATE_PGWRITE;
    private static final int SPM_READY;
    private static final int SPMCSR_LOWERBITS;
    private static final byte DEFAULT_VALUE;
    final avrora.sim.output.SimPrinter flashPrinter;
    avrora.arch.legacy.LegacyDisassembler disassembler;
    byte[] buffer;
    final avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR;
    final int ERASE_CYCLES;
    final int WRITE_CYCLES;
    final int pagesize;
    final int addressMask;
    final avrora.sim.clock.MainClock mainClock;

    public void <init>(java.lang.String, int, avrora.sim.AtmelInterpreter, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        java.lang.String name;
        int size, pagesize, $stack9, $stack10, $stack14, $stack21, $stack27;
        avrora.sim.AtmelInterpreter bi;
        avrora.arch.legacy.LegacyDisassembler $stack6;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack7, $stack15;
        avrora.sim.clock.MainClock $stack8, $stack16, $stack22;
        avrora.sim.Simulator $stack11, $stack28;
        avrora.sim.mcu.Microcontroller $stack12;
        avrora.sim.mcu.MCUProperties props;
        long $stack17, $stack23;
        double $stack18, $stack19, $stack20, $stack24, $stack25, $stack26;
        avrora.sim.output.SimPrinter $stack29;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        name := @parameter0: java.lang.String;

        size := @parameter1: int;

        bi := @parameter2: avrora.sim.AtmelInterpreter;

        pagesize := @parameter3: int;

        specialinvoke this.<avrora.sim.CodeSegment: void <init>(java.lang.String,int,avrora.sim.AtmelInterpreter)>(name, size, bi);

        $stack6 = new avrora.arch.legacy.LegacyDisassembler;

        specialinvoke $stack6.<avrora.arch.legacy.LegacyDisassembler: void <init>()>();

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.arch.legacy.LegacyDisassembler disassembler> = $stack6;

        $stack7 = new avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        specialinvoke $stack7.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,avrora.sim.mcu.ReprogrammableCodeSegment$1)>(this, null);

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR> = $stack7;

        $stack8 = virtualinvoke bi.<avrora.sim.AtmelInterpreter: avrora.sim.clock.MainClock getMainClock()>();

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock> = $stack8;

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize> = pagesize;

        $stack9 = pagesize + 1;

        $stack10 = staticinvoke <cck.util.Arithmetic: int getBitRangeMask(int,int)>(1, $stack9);

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: int addressMask> = $stack10;

        virtualinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        $stack11 = virtualinvoke bi.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator getSimulator()>();

        $stack12 = virtualinvoke $stack11.<avrora.sim.Simulator: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        props = interfaceinvoke $stack12.<avrora.sim.mcu.Microcontroller: avrora.sim.mcu.MCUProperties getProperties()>();

        $stack14 = virtualinvoke props.<avrora.sim.mcu.MCUProperties: int getIOReg(java.lang.String)>("SPMCSR");

        $stack15 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke bi.<avrora.sim.AtmelInterpreter: void installIOReg(int,avrora.sim.ActiveRegister)>($stack14, $stack15);

        $stack16 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack17 = virtualinvoke $stack16.<avrora.sim.clock.MainClock: long getHZ()>();

        $stack18 = (double) $stack17;

        $stack19 = $stack18 * 4.5;

        $stack20 = $stack19 / 1000.0;

        $stack21 = (int) $stack20;

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: int ERASE_CYCLES> = $stack21;

        $stack22 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack23 = virtualinvoke $stack22.<avrora.sim.clock.MainClock: long getHZ()>();

        $stack24 = (double) $stack23;

        $stack25 = $stack24 * 4.5;

        $stack26 = $stack25 / 1000.0;

        $stack27 = (int) $stack26;

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: int WRITE_CYCLES> = $stack27;

        $stack28 = virtualinvoke bi.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator getSimulator()>();

        $stack29 = virtualinvoke $stack28.<avrora.sim.Simulator: avrora.sim.output.SimPrinter getPrinter(java.lang.String)>("atmel.flash");

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter> = $stack29;

        return;
    }

    public void update()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        avrora.arch.legacy.LegacyRegister $stack5;
        avrora.sim.AtmelInterpreter $stack6, $stack11, $stack52, $stack54;
        int Z, $stack8, pageoffset, $stack9, $stack10, $stack12, state, $stack53, $stack56, $stack57, $stack58, $stack59, pagenum#1;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack13, $stack19;
        avrora.sim.output.SimPrinter $stack15, $stack16, $stack18, $stack22, $stack25, $stack27, $stack34, $stack36, $stack43, $stack45;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack20;
        avrora.sim.clock.MainClock $stack21;
        java.lang.StringBuilder $stack26, $stack28, $stack29, $stack35, $stack37, $stack38, $stack44, $stack46, $stack47;
        java.lang.String $stack30, $stack39, $stack48;
        byte $stack55;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack6 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack5 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister Z>;

        Z = virtualinvoke $stack6.<avrora.sim.AtmelInterpreter: int getRegisterWord(avrora.arch.legacy.LegacyRegister)>($stack5);

        $stack8 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: int addressMask>;

        pageoffset = Z & $stack8;

        $stack9 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $stack10 = $stack9 + 1;

        pagenum#1 = Z >> $stack10;

        $stack11 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack12 = $stack11.<avrora.sim.AtmelInterpreter: int RAMPZ>;

        if $stack12 <= 0 goto label01;

        $stack54 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack52 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack53 = $stack52.<avrora.sim.AtmelInterpreter: int RAMPZ>;

        $stack55 = virtualinvoke $stack54.<avrora.sim.AtmelInterpreter: byte getIORegisterByte(int)>($stack53);

        $stack56 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $stack57 = 16 - $stack56;

        $stack58 = $stack57 - 1;

        $stack59 = $stack55 << $stack58;

        pagenum#1 = pagenum#1 + $stack59;

     label01:
        $stack13 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        state = virtualinvoke $stack13.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: int getState()>();

        lookupswitch(state)
        {
            case 1: goto label08;
            case 3: goto label02;
            case 5: goto label10;
            case 9: goto label06;
            case 17: goto label04;
            default: goto label12;
        };

     label02:
        $stack34 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack34 == null goto label03;

        $stack36 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $stack35 = new java.lang.StringBuilder;

        specialinvoke $stack35.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: page erase of page ");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pagenum#1);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack36.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($stack39);

     label03:
        specialinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void pageErase(int,int)>(pagenum#1, pageoffset);

        goto label12;

     label04:
        $stack15 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack15 == null goto label05;

        $stack16 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        virtualinvoke $stack16.<avrora.sim.output.SimPrinter: void println(java.lang.String)>("FLASH: reset RWW section ");

     label05:
        specialinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetRWW()>();

        goto label12;

     label06:
        $stack18 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack18 == null goto label07;

        $stack22 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        virtualinvoke $stack22.<avrora.sim.output.SimPrinter: void println(java.lang.String)>("FLASH: boot lock bits set");

     label07:
        $stack21 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack19 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack20 = $stack19.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack21.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack20);

        goto label12;

     label08:
        $stack43 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack43 == null goto label09;

        $stack45 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $stack44 = new java.lang.StringBuilder;

        specialinvoke $stack44.<java.lang.StringBuilder: void <init>()>();

        $stack46 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: fill buffer @ ");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pageoffset);

        $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack45.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($stack48);

     label09:
        specialinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void fillBuffer(int,int)>(pagenum#1, pageoffset);

        goto label12;

     label10:
        $stack25 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack25 == null goto label11;

        $stack27 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $stack26 = new java.lang.StringBuilder;

        specialinvoke $stack26.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: page write to page ");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pagenum#1);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack27.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($stack30);

     label11:
        specialinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void pageWrite(int,int)>(pagenum#1, pageoffset);

        goto label12;

     label12:
        return;
    }

    private void pageErase(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack3, $stack6;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack4;
        avrora.sim.clock.MainClock $stack5, $stack8;
        int pagenum, $stack9, pageoffset;
        long $stack10;
        avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent $u0;
        avrora.sim.Simulator$Event $r0;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        pagenum := @parameter0: int;

        pageoffset := @parameter1: int;

        $stack5 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack3 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack4 = $stack3.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack5.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack4);

        $stack6 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void setBusy()>();

        $stack8 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $u0 = new avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent;

        specialinvoke $u0.<avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,int)>(this, pagenum);

        $stack9 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: int ERASE_CYCLES>;

        $stack10 = (long) $stack9;

        $r0 = (avrora.sim.Simulator$Event) $u0;

        virtualinvoke $stack8.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($r0, $stack10);

        return;
    }

    private void pageWrite(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack3, $stack6;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack4;
        avrora.sim.clock.MainClock $stack5, $stack9;
        int pagenum, $stack10, pageoffset;
        byte[] $stack8;
        long $stack11;
        avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent $u0;
        avrora.sim.Simulator$Event $r0;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        pagenum := @parameter0: int;

        pageoffset := @parameter1: int;

        $stack5 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack3 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack4 = $stack3.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack5.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack4);

        $stack6 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void setBusy()>();

        $stack9 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $u0 = new avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent;

        $stack8 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        specialinvoke $u0.<avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,int,byte[])>(this, pagenum, $stack8);

        $stack10 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: int WRITE_CYCLES>;

        $stack11 = (long) $stack10;

        $r0 = (avrora.sim.Simulator$Event) $u0;

        virtualinvoke $stack9.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($r0, $stack11);

        virtualinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        return;
    }

    private void resetRWW()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack1, $stack4, $stack6, $stack7;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack2;
        avrora.sim.clock.MainClock $stack3;
        boolean $stack5;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack3 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack1 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack2 = $stack1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack3.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack2);

        $stack4 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack5 = virtualinvoke $stack4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: boolean isBusy()>();

        if $stack5 != 0 goto label1;

        $stack6 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void clearBusy()>();

        $stack7 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack7.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void reset()>();

     label1:
        virtualinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        return;
    }

    private void fillBuffer(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        avrora.arch.legacy.LegacyRegister $stack5, $stack8;
        avrora.sim.AtmelInterpreter $stack6, $stack9;
        byte r0, r1;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack11, $stack15;
        int pageoffset, $stack13, pagenum;
        byte[] $stack12, $stack14;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack16;
        avrora.sim.clock.MainClock $stack17;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        pagenum := @parameter0: int;

        pageoffset := @parameter1: int;

        $stack6 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack5 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister R0>;

        r0 = virtualinvoke $stack6.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($stack5);

        $stack9 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack8 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister R1>;

        r1 = virtualinvoke $stack9.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($stack8);

        $stack11 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack11.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void reset()>();

        $stack12 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack12[pageoffset] = r0;

        $stack14 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack13 = pageoffset + 1;

        $stack14[$stack13] = r1;

        $stack17 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack15 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack16 = $stack15.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack17.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack16);

        return;
    }

    protected void resetBuffer()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        int $stack2, $stack5, cntr#1;
        byte[] $stack3, $stack4, $stack6;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack2 = specialinvoke this.<avrora.sim.mcu.ReprogrammableCodeSegment: int bufferSize()>();

        $stack3 = newarray (byte)[$stack2];

        this.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer> = $stack3;

        cntr#1 = 0;

     label1:
        $stack4 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack5 = lengthof $stack4;

        if cntr#1 >= $stack5 goto label2;

        $stack6 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack6[cntr#1] = -1;

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        return;
    }

    private int bufferSize()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment this;
        int $stack1, $stack2;

        this := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = this.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $stack2 = 2 << $stack1;

        return $stack2;
    }

    static avrora.sim.AtmelInterpreter access$000(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        avrora.sim.AtmelInterpreter $stack1;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = x0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        return $stack1;
    }

    static avrora.sim.AtmelInterpreter access$100(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        avrora.sim.AtmelInterpreter $stack1;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = x0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        return $stack1;
    }

    static int access$300(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        int $stack1;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = specialinvoke x0.<avrora.sim.mcu.ReprogrammableCodeSegment: int bufferSize()>();

        return $stack1;
    }

    static void access$400(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        int x1;
        avrora.arch.legacy.LegacyInstr x2;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        x1 := @parameter1: int;

        x2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke x0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(x1, x2);

        return;
    }

    static void access$500(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        int x1;
        avrora.arch.legacy.LegacyInstr x2;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        x1 := @parameter1: int;

        x2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke x0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(x1, x2);

        return;
    }

    static byte[] access$600(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        byte[] $stack1;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = x0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] segment_data>;

        return $stack1;
    }

    static void access$700(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        int x1;
        avrora.arch.legacy.LegacyInstr x2;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        x1 := @parameter1: int;

        x2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke x0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(x1, x2);

        return;
    }

    static byte[] access$800(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        byte[] $stack1;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = x0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] segment_data>;

        return $stack1;
    }

    static void access$900(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment x0;
        int x1;
        avrora.arch.legacy.LegacyInstr x2;

        x0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        x1 := @parameter1: int;

        x2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke x0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(x1, x2);

        return;
    }

    public static void <clinit>()
    {
        <avrora.sim.mcu.ReprogrammableCodeSegment: byte DEFAULT_VALUE> = -1;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPMCSR_LOWERBITS> = 31;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPM_READY> = 35;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_PGWRITE> = 5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_FILL> = 1;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_BLBSET> = 9;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_RWWSRE> = 17;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_PGERASE> = 3;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_NONE> = 0;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPM_TIMEOUT> = 4;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double WRITE_MS_MAX> = 4.5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double ERASE_MS_MAX> = 4.5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double WRITE_MS_MIN> = 3.7;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double ERASE_MS_MIN> = 3.7;

        return;
    }
}
