public class avrora.Main extends java.lang.Object
{
    static final cck.util.Options mainOptions;
    public static final cck.util.Option$Str INPUT;
    public static final cck.util.Option$Str ACTION;
    public static final cck.util.Option$Bool COLORS;
    public static final cck.util.Option$Bool BANNER;
    public static final cck.util.Option$Bool STATUS;
    public static final cck.util.Option$Bool STATUS_TIMING;
    public static final cck.util.Option$List VERBOSE;
    public static final cck.util.Option$Bool HELP;
    public static final cck.util.Option$Bool LICENSE;
    public static final cck.util.Option$Bool HTML;
    public static final cck.util.Option$Str CONFIGFILE;

    public void <init>()
    {
        avrora.Main this;

        this := @this: avrora.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args, $stack6;
        cck.util.Option$Str $stack2, $stack9;
        boolean $stack3, $stack8;
        int $stack4;
        cck.util.Options $stack5;
        cck.util.Option$Bool $stack7;
        java.lang.String $stack10;
        java.lang.Exception $stack12;
        cck.util.Util$Error $stack13;

        args := @parameter0: java.lang.String[];

     label1:
        staticinvoke <avrora.Main: void loadUserDefaults()>();

        staticinvoke <avrora.Main: void parseOptions(java.lang.String[])>(args);

        $stack2 = <avrora.Main: cck.util.Option$Str CONFIGFILE>;

        $stack3 = virtualinvoke $stack2.<cck.util.Option$Str: boolean isBlank()>();

        if $stack3 != 0 goto label2;

        $stack9 = <avrora.Main: cck.util.Option$Str CONFIGFILE>;

        $stack10 = virtualinvoke $stack9.<cck.util.Option$Str: java.lang.String get()>();

        staticinvoke <avrora.Main: void loadFile(java.lang.String)>($stack10);

        staticinvoke <avrora.Main: void parseOptions(java.lang.String[])>(args);

     label2:
        $stack4 = lengthof args;

        if $stack4 == 0 goto label3;

        $stack7 = <avrora.Main: cck.util.Option$Bool HELP>;

        $stack8 = virtualinvoke $stack7.<cck.util.Option$Bool: boolean get()>();

        if $stack8 == 0 goto label4;

     label3:
        $stack5 = <avrora.Main: cck.util.Options mainOptions>;

        $stack6 = virtualinvoke $stack5.<cck.util.Options: java.lang.String[] getArguments()>();

        staticinvoke <avrora.Main: void printHelp(java.lang.String[])>($stack6);

        goto label5;

     label4:
        staticinvoke <avrora.Main: void runAction()>();

     label5:
        goto label8;

     label6:
        $stack13 := @caughtexception;

        virtualinvoke $stack13.<cck.util.Util$Error: void report()>();

        goto label8;

     label7:
        $stack12 := @caughtexception;

        virtualinvoke $stack12.<java.lang.Exception: void printStackTrace()>();

     label8:
        return;

        catch cck.util.Util$Error from label1 to label5 with label6;
        catch java.lang.Exception from label1 to label5 with label7;
    }

    private static void runAction() throws java.lang.Exception
    {
        cck.util.Option$Str $stack1, $stack8;
        java.lang.String $stack2, $stack10, $stack11;
        avrora.actions.Action a;
        cck.util.Options $stack4, $stack5, $stack6;
        java.lang.String[] $stack7;

        staticinvoke <avrora.Main: void banner()>();

        $stack1 = <avrora.Main: cck.util.Option$Str ACTION>;

        $stack2 = virtualinvoke $stack1.<cck.util.Option$Str: java.lang.String get()>();

        a = staticinvoke <avrora.Defaults: avrora.actions.Action getAction(java.lang.String)>($stack2);

        if a != null goto label1;

        $stack8 = <avrora.Main: cck.util.Option$Str ACTION>;

        $stack10 = virtualinvoke $stack8.<cck.util.Option$Str: java.lang.String get()>();

        $stack11 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>($stack10);

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("Unknown Action", $stack11);

     label1:
        $stack5 = a.<avrora.actions.Action: cck.util.Options options>;

        $stack4 = <avrora.Main: cck.util.Options mainOptions>;

        virtualinvoke $stack5.<cck.util.Options: void process(cck.util.Options)>($stack4);

        $stack6 = <avrora.Main: cck.util.Options mainOptions>;

        $stack7 = virtualinvoke $stack6.<cck.util.Options: java.lang.String[] getArguments()>();

        virtualinvoke a.<avrora.actions.Action: void run(java.lang.String[])>($stack7);

        return;
    }

    private static void loadUserDefaults() throws java.io.IOException
    {
        java.lang.String hdir, $stack4, $stack10;
        boolean $stack5, $stack11;
        java.io.File $stack6;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.util.Properties $stack12;
        java.io.FileInputStream $stack13;
        cck.util.Options $stack14;

        hdir = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        if hdir == null goto label1;

        $stack4 = "";

        $stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>(hdir);

        if $stack5 == 0 goto label2;

     label1:
        return;

     label2:
        $stack6 = new java.io.File;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(hdir);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.avrora");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.io.File: void <init>(java.lang.String)>($stack10);

        $stack11 = virtualinvoke $stack6.<java.io.File: boolean exists()>();

        if $stack11 == 0 goto label3;

        $stack12 = new java.util.Properties;

        specialinvoke $stack12.<java.util.Properties: void <init>()>();

        $stack13 = new java.io.FileInputStream;

        specialinvoke $stack13.<java.io.FileInputStream: void <init>(java.io.File)>($stack6);

        virtualinvoke $stack12.<java.util.Properties: void load(java.io.InputStream)>($stack13);

        $stack14 = <avrora.Main: cck.util.Options mainOptions>;

        virtualinvoke $stack14.<cck.util.Options: void process(java.util.Properties)>($stack12);

     label3:
        return;
    }

    private static void loadFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String fname;
        java.io.File $stack3;
        java.util.Properties $stack4;
        java.io.FileInputStream $stack5;
        cck.util.Options $stack6;

        fname := @parameter0: java.lang.String;

        staticinvoke <avrora.Main: void checkFileExists(java.lang.String)>(fname);

        $stack3 = new java.io.File;

        specialinvoke $stack3.<java.io.File: void <init>(java.lang.String)>(fname);

        $stack4 = new java.util.Properties;

        specialinvoke $stack4.<java.util.Properties: void <init>()>();

        $stack5 = new java.io.FileInputStream;

        specialinvoke $stack5.<java.io.FileInputStream: void <init>(java.io.File)>($stack3);

        virtualinvoke $stack4.<java.util.Properties: void load(java.io.InputStream)>($stack5);

        $stack6 = <avrora.Main: cck.util.Options mainOptions>;

        virtualinvoke $stack6.<cck.util.Options: void process(java.util.Properties)>($stack4);

        return;
    }

    static cck.help.HelpCategory buildHelpCategory()
    {
        cck.help.HelpCategory $stack1;
        cck.util.Options $stack2;
        java.util.List $stack5;

        $stack1 = new cck.help.HelpCategory;

        specialinvoke $stack1.<cck.help.HelpCategory: void <init>(java.lang.String,java.lang.String)>("main", "");

        virtualinvoke $stack1.<cck.help.HelpCategory: void addSection(java.lang.String,java.lang.String)>("OVERVIEW", "Avrora is a tool for working with assembly language programs for the AVR architecture microcontrollers and building simulations of hardward devices based on this microcontroller.It contains tools to read AVR programs in multiple formats, perform actions on them, and generate output in multiple formats.\nTypical usage is to specify a list of files that contain a program in some format supported by Avrora and then specifying the action to perform on that program. For example, giving the name of a file that contains a program written in assembly language and a simulate action might look like: \n\navrora -action=simulate -input=atmel program.asm \n\nOther actions that are available include generating a control flow graph of the program or running one of the analysis tools on the program. See the actions section for more information.");

        $stack2 = <avrora.Main: cck.util.Options mainOptions>;

        virtualinvoke $stack1.<cck.help.HelpCategory: void addOptionSection(java.lang.String,cck.util.Options)>("The main options to Avrora specify the action to be performed as well as the input format and any general configuration parameters for Avrora. The available main options are listed below along with their types and default values. Each action also has its own set of options. To access help for the options related to an action, specify the name of the action along with the \"help\" option.", $stack2);

        $stack5 = staticinvoke <avrora.Defaults: java.util.List getMainCategories()>();

        virtualinvoke $stack1.<cck.help.HelpCategory: void addSubcategorySection(java.lang.String,java.lang.String,java.util.List)>("ADDITIONAL HELP CATEGORIES", "Additional help is available on a category by category basis. Below is a list of the additional categories available to provide help with actions, input formats, monitors, and more. To access help for a specific category, specify the \"-help\" option followed by the name of category.", $stack5);

        return $stack1;
    }

    static void printHelp(java.lang.String[])
    {
        java.lang.String[] args;
        int $stack1, $stack2;
        java.lang.String $stack3;
        cck.help.HelpCategory $stack4;

        args := @parameter0: java.lang.String[];

        staticinvoke <avrora.Main: void title()>();

        staticinvoke <avrora.Main: void printUsage()>();

        staticinvoke <avrora.Main: void buildAllCategories()>();

        $stack1 = lengthof args;

        if $stack1 != 0 goto label1;

        $stack4 = staticinvoke <avrora.Main: cck.help.HelpCategory buildHelpCategory()>();

        virtualinvoke $stack4.<cck.help.HelpCategory: void printHelp()>();

        goto label3;

     label1:
        $stack2 = lengthof args;

        if $stack2 != 1 goto label2;

        $stack3 = args[0];

        staticinvoke <avrora.Main: void printHelp(java.lang.String)>($stack3);

        goto label3;

     label2:
        staticinvoke <cck.util.Util: void userError(java.lang.String)>("help available for only one category at a time.");

     label3:
        staticinvoke <avrora.Main: void printFooter()>();

        return;
    }

    private static void buildAllCategories()
    {
        cck.help.HelpCategory $stack1;
        java.util.List $stack4;

        $stack1 = new cck.help.HelpCategory;

        specialinvoke $stack1.<cck.help.HelpCategory: void <init>(java.lang.String,java.lang.String)>("all", "Print a list of all categories for which help is available.");

        virtualinvoke $stack1.<cck.help.HelpCategory: void addSection(java.lang.String,java.lang.String)>("OVERVIEW", "Avrora provides help in many categories that are all accessible from the command line.");

        $stack4 = staticinvoke <avrora.Defaults: java.util.List getAllCategories()>();

        virtualinvoke $stack1.<cck.help.HelpCategory: void addSubcategorySection(java.lang.String,java.lang.String,java.util.List)>("ALL HELP CATEGORIES", "Below is a listing of all the help categories available.", $stack4);

        staticinvoke <avrora.Defaults: void addMainCategory(cck.help.HelpCategory)>($stack1);

        return;
    }

    private static void printUsage()
    {
        int[] $stack4, $stack6;
        java.lang.String[] $stack5, $stack7;

        $stack4 = newarray (int)[12];

        $stack4[0] = 1;

        $stack4[1] = -1;

        $stack4[2] = 2;

        $stack4[3] = -1;

        $stack4[4] = 2;

        $stack4[5] = -1;

        $stack4[6] = 11;

        $stack4[7] = -1;

        $stack4[8] = 11;

        $stack4[9] = -1;

        $stack4[10] = 11;

        $stack4[11] = -1;

        $stack5 = newarray (java.lang.String)[11];

        $stack5[0] = "Usage";

        $stack5[1] = ": ";

        $stack5[2] = "avrora";

        $stack5[3] = " [";

        $stack5[4] = "-action";

        $stack5[5] = "=";

        $stack5[6] = "action";

        $stack5[7] = "] [";

        $stack5[8] = "options";

        $stack5[9] = "] ";

        $stack5[10] = "<files>";

        staticinvoke <cck.text.Terminal: void print(int[],java.lang.String[])>($stack4, $stack5);

        staticinvoke <cck.text.Terminal: void nextln()>();

        $stack6 = newarray (int)[6];

        $stack6[0] = 1;

        $stack6[1] = -1;

        $stack6[2] = 2;

        $stack6[3] = -1;

        $stack6[4] = 11;

        $stack6[5] = -1;

        $stack7 = newarray (java.lang.String)[6];

        $stack7[0] = "Usage";

        $stack7[1] = ": ";

        $stack7[2] = "avrora -help";

        $stack7[3] = " [";

        $stack7[4] = "category";

        $stack7[5] = "]";

        staticinvoke <cck.text.Terminal: void print(int[],java.lang.String[])>($stack6, $stack7);

        staticinvoke <cck.text.Terminal: void println(java.lang.String)>("\n");

        return;
    }

    private static void printFooter()
    {
        cck.util.VersionTag $stack0;
        java.lang.String $stack1;

        staticinvoke <cck.text.Terminal: void println(java.lang.String)>("For more information, see the online documentation at ");

        staticinvoke <cck.text.Terminal: void printCyan(java.lang.String)>("http://compilers.cs.ucla.edu/avrora");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.Terminal: void println(java.lang.String)>("To report bugs or seek help, consult the Avrora mailing list: ");

        staticinvoke <cck.text.Terminal: void printCyan(java.lang.String)>("http://lists.ucla.edu/cgi-bin/mailman/listinfo/avrora");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>("Please include the version number [");

        $stack0 = <avrora.Version: cck.util.VersionTag TAG>;

        $stack1 = virtualinvoke $stack0.<cck.util.VersionTag: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void printBrightBlue(java.lang.String)>($stack1);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>("] when posting to the list.");

        staticinvoke <cck.text.Terminal: void nextln()>();

        return;
    }

    private static void printHelp(java.lang.String)
    {
        java.lang.String a;
        cck.help.HelpCategory hc;

        a := @parameter0: java.lang.String;

        hc = staticinvoke <avrora.Defaults: cck.help.HelpCategory getHelpCategory(java.lang.String)>(a);

        virtualinvoke hc.<cck.help.HelpCategory: void printHelp()>();

        return;
    }

    static void banner()
    {
        cck.util.Option$Bool $stack1, $stack3;
        boolean $stack2, $stack4;
        java.lang.String $stack5;

        $stack1 = <avrora.Main: cck.util.Option$Bool BANNER>;

        $stack2 = virtualinvoke $stack1.<cck.util.Option$Bool: boolean get()>();

        if $stack2 != 0 goto label1;

        return;

     label1:
        staticinvoke <avrora.Main: void title()>();

        $stack3 = <avrora.Main: cck.util.Option$Bool LICENSE>;

        $stack4 = virtualinvoke $stack3.<cck.util.Option$Bool: boolean get()>();

        if $stack4 == 0 goto label2;

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String formatParagraphs(java.lang.String,int,int,int)>("Copyright (c) 2003-2007, Regents of the University of California \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nNeither the name of the University of California, Los Angeles nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n", 0, 0, 78);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack5);

     label2:
        return;
    }

    static void title()
    {
        cck.util.VersionTag $stack0;
        java.lang.String $stack1;

        staticinvoke <cck.text.Terminal: void printBrightBlue(java.lang.String)>("Avrora ");

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>("[");

        $stack0 = <avrora.Version: cck.util.VersionTag TAG>;

        $stack1 = virtualinvoke $stack0.<cck.util.VersionTag: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void printBrightBlue(java.lang.String)>($stack1);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>("]");

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(" - (c) 2003-2007 UCLA Compilers Group\n\n");

        return;
    }

    public static void parseOptions(java.lang.String[])
    {
        java.lang.String[] args;
        cck.util.Options $stack3;
        cck.util.Option$Bool $stack4, $stack6, $stack8, $stack10;
        boolean $stack5, $stack7, $stack9, $stack11, $stack15;
        cck.util.Option$List $stack12;
        java.util.List verbose;
        java.util.Iterator i;
        java.lang.Object $stack16;
        java.lang.String $stack17;

        args := @parameter0: java.lang.String[];

        $stack3 = <avrora.Main: cck.util.Options mainOptions>;

        virtualinvoke $stack3.<cck.util.Options: void parseCommandLine(java.lang.String[])>(args);

        $stack4 = <avrora.Main: cck.util.Option$Bool COLORS>;

        $stack5 = virtualinvoke $stack4.<cck.util.Option$Bool: boolean get()>();

        <cck.text.Terminal: boolean useColors> = $stack5;

        $stack6 = <avrora.Main: cck.util.Option$Bool HTML>;

        $stack7 = virtualinvoke $stack6.<cck.util.Option$Bool: boolean get()>();

        <cck.text.Terminal: boolean htmlColors> = $stack7;

        $stack8 = <avrora.Main: cck.util.Option$Bool STATUS>;

        $stack9 = virtualinvoke $stack8.<cck.util.Option$Bool: boolean get()>();

        <cck.text.Status: boolean ENABLED> = $stack9;

        $stack10 = <avrora.Main: cck.util.Option$Bool STATUS_TIMING>;

        $stack11 = virtualinvoke $stack10.<cck.util.Option$Bool: boolean get()>();

        <cck.text.Status: boolean TIMING> = $stack11;

        $stack12 = <avrora.Main: cck.util.Option$List VERBOSE>;

        verbose = virtualinvoke $stack12.<cck.util.Option$List: java.util.List get()>();

        i = interfaceinvoke verbose.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack15 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label2;

        $stack16 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $stack17 = (java.lang.String) $stack16;

        staticinvoke <cck.text.Verbose: void setVerbose(java.lang.String,boolean)>($stack17, 1);

        goto label1;

     label2:
        return;
    }

    public static avrora.core.Program loadProgram(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.StringBuilder $stack3, $stack4, $stack6;
        java.lang.String[] args;
        java.lang.String $stack5, $stack7, $stack9;
        cck.util.Option$Str $stack8;
        avrora.core.ProgramReader reader;
        cck.util.Options $stack11, $stack12;
        avrora.core.Program program;

        args := @parameter0: java.lang.String[];

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading ");

        $stack5 = args[0];

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Status: void begin(java.lang.String)>($stack7);

        $stack8 = <avrora.Main: cck.util.Option$Str INPUT>;

        $stack9 = virtualinvoke $stack8.<cck.util.Option$Str: java.lang.String get()>();

        reader = staticinvoke <avrora.Defaults: avrora.core.ProgramReader getProgramReader(java.lang.String)>($stack9);

        $stack12 = reader.<avrora.core.ProgramReader: cck.util.Options options>;

        $stack11 = <avrora.Main: cck.util.Options mainOptions>;

        virtualinvoke $stack12.<cck.util.Options: void process(cck.util.Options)>($stack11);

        program = virtualinvoke reader.<avrora.core.ProgramReader: avrora.core.Program read(java.lang.String[])>(args);

        staticinvoke <cck.text.Status: void success()>();

        return program;
    }

    public static void checkFilesExist(java.lang.String[])
    {
        java.lang.String[] files;
        int $stack2, cntr#1;
        java.lang.String $stack3;

        files := @parameter0: java.lang.String[];

        cntr#1 = 0;

     label1:
        $stack2 = lengthof files;

        if cntr#1 >= $stack2 goto label2;

        $stack3 = files[cntr#1];

        staticinvoke <avrora.Main: void checkFileExists(java.lang.String)>($stack3);

        cntr#1 = cntr#1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void checkFileExists(java.lang.String)
    {
        java.io.File $stack2;
        java.lang.String fstr;
        boolean $stack3;

        fstr := @parameter0: java.lang.String;

        $stack2 = new java.io.File;

        specialinvoke $stack2.<java.io.File: void <init>(java.lang.String)>(fstr);

        $stack3 = virtualinvoke $stack2.<java.io.File: boolean exists()>();

        if $stack3 != 0 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("File not found", fstr);

     label1:
        return;
    }

    static void <clinit>()
    {
        cck.util.Options $stack0, $stack1, $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21;
        cck.util.Option$Str $stack2, $stack4, $stack22;
        cck.util.Option$Bool $stack6, $stack8, $stack10, $stack12, $stack16, $stack18, $stack20;
        cck.util.Option$List $stack14;

        $stack0 = new cck.util.Options;

        specialinvoke $stack0.<cck.util.Options: void <init>()>();

        <avrora.Main: cck.util.Options mainOptions> = $stack0;

        $stack1 = <avrora.Main: cck.util.Options mainOptions>;

        $stack2 = virtualinvoke $stack1.<cck.util.Options: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("input", "auto", "This option selects among the available program formats as input to Avrora. For example, the default input format, \"atmel\" selects the assembly language format supported by Atmel\'s assembler.");

        <avrora.Main: cck.util.Option$Str INPUT> = $stack2;

        $stack3 = <avrora.Main: cck.util.Options mainOptions>;

        $stack4 = virtualinvoke $stack3.<cck.util.Options: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("action", "simulate", "This option selects the action to perform. For example, an action might be to load a program into the simulator and run it. For more information, see the section on actions.");

        <avrora.Main: cck.util.Option$Str ACTION> = $stack4;

        $stack5 = <avrora.Main: cck.util.Options mainOptions>;

        $stack6 = virtualinvoke $stack5.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("colors", 1, "This option is used to enable or disable the terminal colors.");

        <avrora.Main: cck.util.Option$Bool COLORS> = $stack6;

        $stack7 = <avrora.Main: cck.util.Options mainOptions>;

        $stack8 = virtualinvoke $stack7.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("banner", 1, "This option is used to enable or disable the printing of the banner.");

        <avrora.Main: cck.util.Option$Bool BANNER> = $stack8;

        $stack9 = <avrora.Main: cck.util.Options mainOptions>;

        $stack10 = virtualinvoke $stack9.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("status", 1, "This option enables and disables printing of status information, for example when the simulator is loading a program.");

        <avrora.Main: cck.util.Option$Bool STATUS> = $stack10;

        $stack11 = <avrora.Main: cck.util.Options mainOptions>;

        $stack12 = virtualinvoke $stack11.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("status-timing", 0, "This option enables and disables printing of timing with status information, for example when the simulator is loading a program.");

        <avrora.Main: cck.util.Option$Bool STATUS_TIMING> = $stack12;

        $stack13 = <avrora.Main: cck.util.Options mainOptions>;

        $stack14 = virtualinvoke $stack13.<cck.util.Options: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("verbose", "", "This option allows users to enable verbose printing of individual subsystems within Avrora. A list can be given with individual items separated by commas. For example: -verbose=loader,atmel.flash");

        <avrora.Main: cck.util.Option$List VERBOSE> = $stack14;

        $stack15 = <avrora.Main: cck.util.Options mainOptions>;

        $stack16 = virtualinvoke $stack15.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("help", 0, "Displays this help message.");

        <avrora.Main: cck.util.Option$Bool HELP> = $stack16;

        $stack17 = <avrora.Main: cck.util.Options mainOptions>;

        $stack18 = virtualinvoke $stack17.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("license", 0, "Display the detailed copyright and license text.");

        <avrora.Main: cck.util.Option$Bool LICENSE> = $stack18;

        $stack19 = <avrora.Main: cck.util.Options mainOptions>;

        $stack20 = virtualinvoke $stack19.<cck.util.Options: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("html", 0, "For terminal colors. Display terminal colors as HTML tags for easier inclusion in webpages.");

        <avrora.Main: cck.util.Option$Bool HTML> = $stack20;

        $stack21 = <avrora.Main: cck.util.Options mainOptions>;

        $stack22 = virtualinvoke $stack21.<cck.util.Options: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("config-file", "", "This option can be used to specify a file that contains additional command line options to Avrora. Any command-line option can be specified in this file. For repeated runs with similar options, the common options can be stored in this file for use over multiple runs. Options are processed in the following order: \n   1) The .avrora file in your home directory \n   2) A configuration file specified on the command line \n   3) Command line options to Avrora");

        <avrora.Main: cck.util.Option$Str CONFIGFILE> = $stack22;

        return;
    }
}
