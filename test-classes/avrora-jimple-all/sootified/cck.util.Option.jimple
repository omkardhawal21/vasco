public abstract class cck.util.Option extends java.lang.Object
{
    protected final java.lang.String name;
    protected final java.lang.String description;
    public static final java.util.Comparator COMPARATOR;

    public void <init>(java.lang.String, java.lang.String)
    {
        cck.util.Option this;
        java.lang.String n, d;

        this := @this: cck.util.Option;

        n := @parameter0: java.lang.String;

        d := @parameter1: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<cck.util.Option: java.lang.String name> = n;

        this.<cck.util.Option: java.lang.String description> = d;

        return;
    }

    public java.lang.String getName()
    {
        cck.util.Option this;
        java.lang.String $stack1;

        this := @this: cck.util.Option;

        $stack1 = this.<cck.util.Option: java.lang.String name>;

        return $stack1;
    }

    public abstract void set(java.lang.String);

    public abstract java.lang.String stringValue();

    public abstract void printHelp();

    public void printDescription()
    {
        cck.util.Option this;
        java.lang.String $stack1, $stack2;

        this := @this: cck.util.Option;

        $stack1 = this.<cck.util.Option: java.lang.String description>;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String formatParagraphs(java.lang.String,int,int,int)>($stack1, 8, 0, 78);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack2);

        staticinvoke <cck.text.Terminal: void nextln()>();

        return;
    }

    public void printHeader(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack6;
        cck.util.Option this;
        java.lang.String $stack5, $stack7, type, defvalue;

        this := @this: cck.util.Option;

        type := @parameter0: java.lang.String;

        defvalue := @parameter1: java.lang.String;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    -");

        $stack5 = this.<cck.util.Option: java.lang.String name>;

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>($stack7);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(": ");

        staticinvoke <cck.text.Terminal: void printBrightCyan(java.lang.String)>(type);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(" = ");

        staticinvoke <cck.text.Terminal: void printYellow(java.lang.String)>(defvalue);

        staticinvoke <cck.text.Terminal: void nextln()>();

        return;
    }

    protected void parseError(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack4, $stack6, $stack7, $stack8, $stack10, $stack11, $stack13;
        java.lang.String type, name, $stack9, val, $stack12, $stack14;
        cck.util.Option this;

        this := @this: cck.util.Option;

        name := @parameter0: java.lang.String;

        type := @parameter1: java.lang.String;

        val := @parameter2: java.lang.String;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid value for ");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(type);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" option ");

        $stack9 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(name);

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $stack12 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(val);

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("Option Error", $stack14);

        return;
    }

    static void <clinit>()
    {
        cck.util.Option$1 $stack0;

        $stack0 = new cck.util.Option$1;

        specialinvoke $stack0.<cck.util.Option$1: void <init>()>();

        <cck.util.Option: java.util.Comparator COMPARATOR> = $stack0;

        return;
    }
}
