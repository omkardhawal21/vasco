class avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg extends avrora.sim.RWRegister
{
    avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset;
    final avrora.sim.mcu.ReprogrammableCodeSegment this$0;

    private void <init>(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        avrora.sim.mcu.ReprogrammableCodeSegment l1;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        l1 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0> = l1;

        specialinvoke l0.<avrora.sim.RWRegister: void <init>()>();

        $stack2 = new avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent;

        specialinvoke $stack2.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg)>(l0);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset> = $stack2;

        return;
    }

    void <init>(avrora.sim.mcu.ReprogrammableCodeSegment, avrora.sim.mcu.ReprogrammableCodeSegment$1)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        avrora.sim.mcu.ReprogrammableCodeSegment l1;
        avrora.sim.mcu.ReprogrammableCodeSegment$1 l2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        l1 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l2 := @parameter1: avrora.sim.mcu.ReprogrammableCodeSegment$1;

        specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment)>(l1);

        return;
    }

    void clearBusy()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1, $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = staticinvoke <cck.util.Arithmetic: byte clearBit(byte,int)>($stack1, 6);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value> = $stack2;

        return;
    }

    int getState()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1;
        int $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = $stack1 & 31;

        return $stack2;
    }

    boolean isBusy()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1;
        boolean $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($stack1, 6);

        return $stack2;
    }

    void reset()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1, $stack3;
        int $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = $stack1 & -32;

        $stack3 = (byte) $stack2;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void write(byte)>($stack3);

        return;
    }

    void setBusy()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1, $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = staticinvoke <cck.util.Arithmetic: byte setBit(byte,int)>($stack1, 6);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value> = $stack2;

        return;
    }

    public void write(byte)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment $stack3, $stack6, $stack12, $stack17;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack4, $stack7;
        avrora.sim.clock.MainClock $stack5, $stack8;
        int $stack9, $stack10, l2#3;
        byte $stack11, $stack14, $stack19, l1#2;
        avrora.sim.AtmelInterpreter $stack13, $stack18;
        boolean $stack16, $stack20, l0#5;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0#1;

        l0#1 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        l1#2 := @parameter0: byte;

        l2#3 = l1#2 & 31;

        lookupswitch(l2#3)
        {
            case 1: goto label1;
            case 3: goto label1;
            case 5: goto label1;
            case 9: goto label1;
            case 17: goto label1;
            default: goto label2;
        };

     label1:
        $stack3 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack5 = $stack3.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack4 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack5.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack4);

        $stack6 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack8 = $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack7 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack8.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($stack7, 6L);

        goto label3;

     label2:
        l2#3 = 0;

     label3:
        $stack9 = l1#2 & -32;

        $stack10 = $stack9 | l2#3;

        $stack11 = (byte) $stack10;

        l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value> = $stack11;

        $stack12 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack13 = staticinvoke <avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter access$000(avrora.sim.mcu.ReprogrammableCodeSegment)>($stack12);

        $stack14 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack16 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($stack14, 7);

        virtualinvoke $stack13.<avrora.sim.AtmelInterpreter: void setEnabled(int,boolean)>(35, $stack16);

        $stack17 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack18 = staticinvoke <avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter access$100(avrora.sim.mcu.ReprogrammableCodeSegment)>($stack17);

        $stack19 = l0#1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack20 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($stack19, 0);

        if $stack20 != 0 goto label4;

        l0#5 = 1;

        goto label5;

     label4:
        l0#5 = 0;

     label5:
        virtualinvoke $stack18.<avrora.sim.AtmelInterpreter: void setPosted(int,boolean)>(35, l0#5);

        return;
    }
}
