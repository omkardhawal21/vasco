public class org.apache.commons.cli.PosixParser extends org.apache.commons.cli.Parser
{
    private java.util.List tokens;
    private boolean eatTheRest;
    private org.apache.commons.cli.Option currentOption;
    private org.apache.commons.cli.Options options;

    public void <init>()
    {
        org.apache.commons.cli.PosixParser l0;
        java.util.ArrayList $stack1;

        l0 := @this: org.apache.commons.cli.PosixParser;

        specialinvoke l0.<org.apache.commons.cli.Parser: void <init>()>();

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>()>();

        l0.<org.apache.commons.cli.PosixParser: java.util.List tokens> = $stack1;

        return;
    }

    protected void burstToken(java.lang.String, boolean)
    {
        java.lang.String l1, $stack7, $stack12, $stack17, $stack29;
        int $stack5, $stack25, $stack26, $stack27, l4#1;
        char $stack6;
        org.apache.commons.cli.PosixParser l0;
        org.apache.commons.cli.Options $stack8, $stack19;
        boolean $stack9, l2, $stack22;
        java.util.List $stack10, $stack14, $stack28;
        java.lang.StringBuffer $stack13, $stack15, $stack16;
        org.apache.commons.cli.Option $stack20, $stack21;

        l0 := @this: org.apache.commons.cli.PosixParser;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: boolean;

        l4#1 = 1;

     label1:
        $stack5 = virtualinvoke l1.<java.lang.String: int length()>();

        if l4#1 >= $stack5 goto label5;

        $stack6 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l4#1);

        $stack7 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack6);

        $stack8 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $stack9 = virtualinvoke $stack8.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>($stack7);

        if $stack9 == 0 goto label2;

        $stack14 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $stack13 = new java.lang.StringBuffer;

        specialinvoke $stack13.<java.lang.StringBuffer: void <init>()>();

        $stack15 = virtualinvoke $stack13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack7);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $stack14.<java.util.List: boolean add(java.lang.Object)>($stack17);

        $stack19 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $stack20 = virtualinvoke $stack19.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>($stack7);

        l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption> = $stack20;

        $stack21 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption>;

        $stack22 = virtualinvoke $stack21.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $stack22 == 0 goto label4;

        $stack25 = virtualinvoke l1.<java.lang.String: int length()>();

        $stack26 = l4#1 + 1;

        if $stack25 == $stack26 goto label4;

        $stack28 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $stack27 = l4#1 + 1;

        $stack29 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack27);

        interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>($stack29);

        goto label5;

     label2:
        if l2 == 0 goto label3;

        $stack12 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>(l4#1);

        specialinvoke l0.<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>($stack12, 1);

        goto label5;

     label3:
        $stack10 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack10.<java.util.List: boolean add(java.lang.Object)>(l1);

        goto label5;

     label4:
        l4#1 = l4#1 + 1;

        goto label1;

     label5:
        return;
    }

    protected java.lang.String[] flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)
    {
        org.apache.commons.cli.PosixParser l0;
        org.apache.commons.cli.Options l1;
        java.util.List $stack7, $stack10, $stack11, $stack30, $stack36, $stack39;
        java.util.Iterator $stack8;
        boolean $stack9, $stack18, $stack20, $stack21, l3, $stack26, $stack34;
        int $stack12, $stack23, $stack32, $stack38;
        java.lang.String[] $stack13, $stack15, $stack16, l2#1;
        java.lang.Object[] $stack14;
        java.lang.Object $stack17;
        java.lang.String l4, $stack19, $stack33, $stack40, l6#3;
        org.apache.commons.cli.Option $stack35;

        l0 := @this: org.apache.commons.cli.PosixParser;

        l1 := @parameter0: org.apache.commons.cli.Options;

        l2#1 := @parameter1: java.lang.String[];

        l3 := @parameter2: boolean;

        specialinvoke l0.<org.apache.commons.cli.PosixParser: void init()>();

        l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options> = l1;

        $stack7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2#1);

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack9 = interfaceinvoke $stack8.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label12;

        $stack17 = interfaceinvoke $stack8.<java.util.Iterator: java.lang.Object next()>();

        l4 = (java.lang.String) $stack17;

        $stack18 = virtualinvoke l4.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $stack18 == 0 goto label06;

        $stack32 = virtualinvoke l4.<java.lang.String: int indexOf(int)>(61);

        if $stack32 != -1 goto label02;

        l6#3 = l4;

        goto label03;

     label02:
        $stack33 = virtualinvoke l4.<java.lang.String: java.lang.String substring(int,int)>(0, $stack32);

        l6#3 = $stack33;

     label03:
        $stack34 = virtualinvoke l1.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(l6#3);

        if $stack34 != 0 goto label04;

        specialinvoke l0.<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>(l4, l3);

        goto label05;

     label04:
        $stack35 = virtualinvoke l1.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>(l6#3);

        l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption> = $stack35;

        $stack36 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack36.<java.util.List: boolean add(java.lang.Object)>(l6#3);

        if $stack32 == -1 goto label05;

        $stack39 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $stack38 = $stack32 + 1;

        $stack40 = virtualinvoke l4.<java.lang.String: java.lang.String substring(int)>($stack38);

        interfaceinvoke $stack39.<java.util.List: boolean add(java.lang.Object)>($stack40);

     label05:
        goto label11;

     label06:
        $stack19 = "-";

        $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(l4);

        if $stack20 == 0 goto label07;

        $stack30 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack30.<java.util.List: boolean add(java.lang.Object)>(l4);

        goto label11;

     label07:
        $stack21 = virtualinvoke l4.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $stack21 == 0 goto label10;

        $stack23 = virtualinvoke l4.<java.lang.String: int length()>();

        if $stack23 == 2 goto label08;

        $stack26 = virtualinvoke l1.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(l4);

        if $stack26 == 0 goto label09;

     label08:
        specialinvoke l0.<org.apache.commons.cli.PosixParser: void processOptionToken(java.lang.String,boolean)>(l4, l3);

        goto label11;

     label09:
        virtualinvoke l0.<org.apache.commons.cli.PosixParser: void burstToken(java.lang.String,boolean)>(l4, l3);

        goto label11;

     label10:
        specialinvoke l0.<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>(l4, l3);

     label11:
        specialinvoke l0.<org.apache.commons.cli.PosixParser: void gobble(java.util.Iterator)>($stack8);

        goto label01;

     label12:
        $stack11 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $stack10 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $stack12 = interfaceinvoke $stack10.<java.util.List: int size()>();

        $stack13 = newarray (java.lang.String)[$stack12];

        $stack14 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack13);

        $stack15 = (java.lang.String[]) $stack14;

        $stack16 = (java.lang.String[]) $stack15;

        return $stack16;
    }

    private void gobble(java.util.Iterator)
    {
        org.apache.commons.cli.PosixParser l0;
        boolean $stack2, $stack3;
        java.util.Iterator l1;
        java.util.List $stack4;
        java.lang.Object $stack5;

        l0 := @this: org.apache.commons.cli.PosixParser;

        l1 := @parameter0: java.util.Iterator;

        $stack2 = l0.<org.apache.commons.cli.PosixParser: boolean eatTheRest>;

        if $stack2 == 0 goto label2;

     label1:
        $stack3 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack3 == 0 goto label2;

        $stack4 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $stack5 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack5);

        goto label1;

     label2:
        return;
    }

    private void init()
    {
        org.apache.commons.cli.PosixParser l0;
        java.util.List $stack1;

        l0 := @this: org.apache.commons.cli.PosixParser;

        l0.<org.apache.commons.cli.PosixParser: boolean eatTheRest> = 0;

        $stack1 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack1.<java.util.List: void clear()>();

        return;
    }

    private void processNonOptionToken(java.lang.String, boolean)
    {
        boolean l2, $stack11;
        org.apache.commons.cli.PosixParser l0;
        java.lang.String l1;
        org.apache.commons.cli.Option $stack5, $stack10;
        java.util.List $stack6, $stack3#4;

        l0 := @this: org.apache.commons.cli.PosixParser;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: boolean;

        if l2 == 0 goto label2;

        $stack5 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption>;

        if $stack5 == null goto label1;

        $stack10 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption>;

        $stack11 = virtualinvoke $stack10.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $stack11 != 0 goto label2;

     label1:
        l0.<org.apache.commons.cli.PosixParser: boolean eatTheRest> = 1;

        $stack6 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack6.<java.util.List: boolean add(java.lang.Object)>("--");

     label2:
        $stack3#4 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack3#4.<java.util.List: boolean add(java.lang.Object)>(l1);

        return;
    }

    private void processOptionToken(java.lang.String, boolean)
    {
        boolean l2, $stack12, $stack4#7;
        org.apache.commons.cli.PosixParser l0;
        java.lang.String l1;
        java.util.List $stack5;
        org.apache.commons.cli.Options $stack7, $stack11, $stack3#3;
        org.apache.commons.cli.Option $stack8;

        l0 := @this: org.apache.commons.cli.PosixParser;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: boolean;

        if l2 == 0 goto label1;

        $stack11 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $stack12 = virtualinvoke $stack11.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(l1);

        if $stack12 != 0 goto label1;

        l0.<org.apache.commons.cli.PosixParser: boolean eatTheRest> = 1;

     label1:
        $stack3#3 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $stack4#7 = virtualinvoke $stack3#3.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(l1);

        if $stack4#7 == 0 goto label2;

        $stack7 = l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $stack8 = virtualinvoke $stack7.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>(l1);

        l0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption> = $stack8;

     label2:
        $stack5 = l0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(l1);

        return;
    }
}
