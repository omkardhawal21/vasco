public class avrora.actions.ELFDumpAction extends avrora.actions.Action
{
    public static final java.lang.String HELP;

    public void <init>()
    {
        avrora.actions.ELFDumpAction l0;

        l0 := @this: avrora.actions.ELFDumpAction;

        specialinvoke l0.<avrora.actions.Action: void <init>(java.lang.String)>("The \"elf-dump\" action loads an ELF executable and produces a listing of many important pieces of information, including the architecture, sections, symbol tables and sizes of various structures.");

        return;
    }

    public static java.lang.String getName(cck.elf.ELFStringTable, int)
    {
        cck.elf.ELFStringTable l0;
        int l1;
        java.lang.String $stack2;

        l0 := @parameter0: cck.elf.ELFStringTable;

        l1 := @parameter1: int;

        if l0 != null goto label1;

        return "";

     label1:
        $stack2 = virtualinvoke l0.<cck.elf.ELFStringTable: java.lang.String getString(int)>(l1);

        return $stack2;
    }

    public static void printHeader(cck.elf.ELFHeader)
    {
        int $stack2;
        long $stack3, $stack6;
        java.lang.String $stack4, $stack7, $stack8, $stack9, $stack11, l1#2, l0#3;
        short $stack5;
        boolean $stack10, $stack12;
        cck.elf.ELFHeader l0#1;

        l0#1 := @parameter0: cck.elf.ELFHeader;

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ver Machine     Arch     Size  Endian");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();

        $stack2 = l0#1.<cck.elf.ELFHeader: int e_version>;

        $stack3 = (long) $stack2;

        $stack4 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack3, 3);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack4);

        $stack5 = l0#1.<cck.elf.ELFHeader: short e_machine>;

        $stack6 = (long) $stack5;

        $stack7 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack6, 8);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack7);

        $stack8 = virtualinvoke l0#1.<cck.elf.ELFHeader: java.lang.String getArchitecture()>();

        $stack9 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($stack8, 9);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack9);

        $stack10 = virtualinvoke l0#1.<cck.elf.ELFHeader: boolean is64Bit()>();

        if $stack10 == 0 goto label1;

        l1#2 = "64 bits";

        goto label2;

     label1:
        l1#2 = "32 bits";

     label2:
        $stack11 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>(l1#2, 9);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack11);

        $stack12 = virtualinvoke l0#1.<cck.elf.ELFHeader: boolean isLittleEndian()>();

        if $stack12 == 0 goto label3;

        l0#3 = "  little";

        goto label4;

     label3:
        l0#3 = "  big";

     label4:
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(l0#3);

        staticinvoke <cck.text.Terminal: void nextln()>();

        return;
    }

    public static void printPHT(cck.elf.ELFProgramHeaderTable)
    {
        cck.elf.ELFProgramHeaderTable l0;
        cck.elf.ELFProgramHeaderTable$Entry32[] $stack3, $stack5;
        int $stack4, $stack12, $stack19, $stack24, $stack27, $stack30, l2#1;
        cck.elf.ELFProgramHeaderTable$Entry32 l1;
        long $stack6, $stack13, $stack20, $stack25, $stack28, $stack31;
        java.lang.String $stack7, $stack8, $stack9, $stack14, $stack16, $stack21, $stack23, $stack26, $stack29, $stack32, $stack35, $stack37;
        java.lang.StringBuilder $stack10, $stack11, $stack15, $stack17, $stack18, $stack22, $stack33, $stack34, $stack36;

        l0 := @parameter0: cck.elf.ELFProgramHeaderTable;

        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Program Header Table");

        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ent     Type  Virtual   Physical  Offset  Filesize  Memsize  Flags");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();

        l2#1 = 0;

     label1:
        $stack3 = l0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;

        $stack4 = lengthof $stack3;

        if l2#1 >= $stack4 goto label2;

        $stack5 = l0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;

        l1 = $stack5[l2#1];

        $stack6 = (long) l2#1;

        $stack7 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack6, 3);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack7);

        $stack8 = staticinvoke <cck.elf.ELFProgramHeaderTable: java.lang.String getType(cck.elf.ELFProgramHeaderTable$Entry32)>(l1);

        $stack9 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($stack8, 9);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack12 = l1.<cck.elf.ELFProgramHeaderTable$Entry32: int p_vaddr>;

        $stack13 = (long) $stack12;

        $stack14 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($stack13, 8);

        $stack15 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack16);

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack19 = l1.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;

        $stack20 = (long) $stack19;

        $stack21 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($stack20, 8);

        $stack22 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack23);

        $stack24 = l1.<cck.elf.ELFProgramHeaderTable$Entry32: int p_offset>;

        $stack25 = (long) $stack24;

        $stack26 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack25, 8);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack26);

        $stack27 = l1.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz>;

        $stack28 = (long) $stack27;

        $stack29 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack28, 10);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack29);

        $stack30 = l1.<cck.elf.ELFProgramHeaderTable$Entry32: int p_memsz>;

        $stack31 = (long) $stack30;

        $stack32 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack31, 9);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack32);

        $stack33 = new java.lang.StringBuilder;

        specialinvoke $stack33.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack35 = virtualinvoke l1.<cck.elf.ELFProgramHeaderTable$Entry32: java.lang.String getFlags()>();

        $stack36 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack37);

        staticinvoke <cck.text.Terminal: void nextln()>();

        l2#1 = l2#1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void printSHT(cck.elf.ELFSectionHeaderTable)
    {
        cck.elf.ELFSectionHeaderTable l0;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack3, $stack5;
        int $stack4, $stack18, $stack23, $stack26, l2#1;
        cck.elf.ELFSectionHeaderTable$Entry32 l1;
        long $stack6, $stack19, $stack24, $stack27;
        java.lang.String $stack7, $stack10, $stack11, $stack13, $stack14, $stack15, $stack20, $stack22, $stack25, $stack28, $stack31, $stack33;
        java.lang.StringBuilder $stack8, $stack9, $stack12, $stack16, $stack17, $stack21, $stack29, $stack30, $stack32;

        l0 := @parameter0: cck.elf.ELFSectionHeaderTable;

        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Section Header Table");

        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ent  Name                        Type   Address  Offset    Size  Flags");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();

        l2#1 = 0;

     label1:
        $stack3 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack4 = lengthof $stack3;

        if l2#1 >= $stack4 goto label2;

        $stack5 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        l1 = $stack5[l2#1];

        $stack6 = (long) l2#1;

        $stack7 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack6, 3);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack7);

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack10 = virtualinvoke l1.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getName()>();

        $stack11 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($stack10, 24);

        $stack12 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack13);

        $stack14 = virtualinvoke l1.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getType()>();

        $stack15 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($stack14, 8);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack15);

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack18 = l1.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addr>;

        $stack19 = (long) $stack18;

        $stack20 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($stack19, 8);

        $stack21 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack22);

        $stack23 = l1.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_offset>;

        $stack24 = (long) $stack23;

        $stack25 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack24, 8);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack25);

        $stack26 = l1.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_size>;

        $stack27 = (long) $stack26;

        $stack28 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack27, 8);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack28);

        $stack29 = new java.lang.StringBuilder;

        specialinvoke $stack29.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack31 = virtualinvoke l1.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getFlags()>();

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack33);

        staticinvoke <cck.text.Terminal: void nextln()>();

        l2#1 = l2#1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void printSymbolTable(cck.elf.ELFSymbolTable, cck.elf.ELFSectionHeaderTable)
    {
        cck.elf.ELFSymbolTable l0;
        cck.elf.ELFStringTable $stack5;
        cck.elf.ELFSymbolTable$Entry[] $stack6, $stack8;
        int $stack7, $stack26, $stack31, $stack38, l4#1;
        cck.elf.ELFSymbolTable$Entry l3;
        long $stack9, $stack32, $stack39;
        java.lang.String $stack10, $stack13, $stack14, $stack16, $stack20, $stack21, $stack23, $stack24, $stack25, $stack27, $stack28, $stack33, $stack35, $stack40, $stack42;
        java.lang.StringBuilder $stack11, $stack12, $stack15, $stack17, $stack18, $stack22, $stack29, $stack30, $stack34, $stack36, $stack37, $stack41;
        cck.elf.ELFSectionHeaderTable l1;
        short $stack19;

        l0 := @parameter0: cck.elf.ELFSymbolTable;

        l1 := @parameter1: cck.elf.ELFSectionHeaderTable;

        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Symbol Table");

        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ent  Type     Section     Bind    Name                     Address      Size");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();

        $stack5 = virtualinvoke l0.<cck.elf.ELFSymbolTable: cck.elf.ELFStringTable getStringTable()>();

        l4#1 = 0;

     label1:
        $stack6 = l0.<cck.elf.ELFSymbolTable: cck.elf.ELFSymbolTable$Entry[] entries>;

        $stack7 = lengthof $stack6;

        if l4#1 >= $stack7 goto label2;

        $stack8 = l0.<cck.elf.ELFSymbolTable: cck.elf.ELFSymbolTable$Entry[] entries>;

        l3 = $stack8[l4#1];

        $stack9 = (long) l4#1;

        $stack10 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack9, 3);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack10);

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack13 = virtualinvoke l3.<cck.elf.ELFSymbolTable$Entry: java.lang.String getType()>();

        $stack14 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($stack13, 7);

        $stack15 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack16);

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack19 = l3.<cck.elf.ELFSymbolTable$Entry: short st_shndx>;

        $stack20 = virtualinvoke l1.<cck.elf.ELFSectionHeaderTable: java.lang.String getSectionName(int)>($stack19);

        $stack21 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($stack20, 12);

        $stack22 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack23);

        $stack24 = virtualinvoke l3.<cck.elf.ELFSymbolTable$Entry: java.lang.String getBinding()>();

        $stack25 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($stack24, 8);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack25);

        $stack26 = l3.<cck.elf.ELFSymbolTable$Entry: int st_name>;

        $stack27 = staticinvoke <avrora.actions.ELFDumpAction: java.lang.String getName(cck.elf.ELFStringTable,int)>($stack5, $stack26);

        $stack28 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($stack27, 22);

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack28);

        $stack29 = new java.lang.StringBuilder;

        specialinvoke $stack29.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack31 = l3.<cck.elf.ELFSymbolTable$Entry: int st_value>;

        $stack32 = (long) $stack31;

        $stack33 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($stack32, 8);

        $stack34 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack35);

        $stack36 = new java.lang.StringBuilder;

        specialinvoke $stack36.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack38 = l3.<cck.elf.ELFSymbolTable$Entry: int st_size>;

        $stack39 = (long) $stack38;

        $stack40 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($stack39, 8);

        $stack41 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($stack42);

        staticinvoke <cck.text.Terminal: void nextln()>();

        l4#1 = l4#1 + 1;

        goto label1;

     label2:
        return;
    }

    public void run(java.lang.String[]) throws java.lang.Exception
    {
        cck.elf.ELFHeader $stack4;
        cck.elf.ELFProgramHeaderTable $stack5;
        cck.elf.ELFSectionHeaderTable $stack6;
        java.util.List $stack7;
        java.util.Iterator $stack8;
        boolean $stack9;
        java.lang.Object $stack10;
        cck.elf.ELFSymbolTable $stack11;
        cck.elf.ELFHeader$FormatError $stack13;
        avrora.actions.ELFDumpAction l0#1;
        java.lang.String[] l1#2;
        java.lang.String l0#3;
        java.io.RandomAccessFile l2#4;

        l0#1 := @this: avrora.actions.ELFDumpAction;

        l1#2 := @parameter0: java.lang.String[];

        l0#3 = l1#2[0];

        staticinvoke <avrora.Main: void checkFileExists(java.lang.String)>(l0#3);

        l2#4 = new java.io.RandomAccessFile;

        specialinvoke l2#4.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(l0#3, "r");

     label1:
        $stack4 = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFHeader readELFHeader(java.io.RandomAccessFile)>(l2#4);

        staticinvoke <avrora.actions.ELFDumpAction: void printHeader(cck.elf.ELFHeader)>($stack4);

        $stack5 = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFProgramHeaderTable readPHT(java.io.RandomAccessFile,cck.elf.ELFHeader)>(l2#4, $stack4);

        staticinvoke <avrora.actions.ELFDumpAction: void printPHT(cck.elf.ELFProgramHeaderTable)>($stack5);

        $stack6 = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFSectionHeaderTable readSHT(java.io.RandomAccessFile,cck.elf.ELFHeader)>(l2#4, $stack4);

        staticinvoke <avrora.actions.ELFDumpAction: void printSHT(cck.elf.ELFSectionHeaderTable)>($stack6);

        $stack7 = staticinvoke <cck.elf.ELFLoader: java.util.List readSymbolTables(java.io.RandomAccessFile,cck.elf.ELFHeader,cck.elf.ELFSectionHeaderTable)>(l2#4, $stack4, $stack6);

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack9 = interfaceinvoke $stack8.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack10 = interfaceinvoke $stack8.<java.util.Iterator: java.lang.Object next()>();

        $stack11 = (cck.elf.ELFSymbolTable) $stack10;

        staticinvoke <avrora.actions.ELFDumpAction: void printSymbolTable(cck.elf.ELFSymbolTable,cck.elf.ELFSectionHeaderTable)>($stack11, $stack6);

        goto label2;

     label3:
        goto label5;

     label4:
        $stack13 := @caughtexception;

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>(l0#3, "invalid ELF header");

     label5:
        return;

        catch cck.elf.ELFHeader$FormatError from label1 to label3 with label4;
    }

    public static void <clinit>()
    {
        <avrora.actions.ELFDumpAction: java.lang.String HELP> = "The \"elf-dump\" action loads an ELF executable and produces a listing of many important pieces of information, including the architecture, sections, symbol tables and sizes of various structures.";

        return;
    }
}
