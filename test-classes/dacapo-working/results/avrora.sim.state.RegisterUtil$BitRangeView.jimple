public class avrora.sim.state.RegisterUtil$BitRangeView extends avrora.sim.state.AbstractRegisterView implements avrora.sim.state.RegisterView, avrora.sim.state.RegisterView$RegisterValueSetListener
{
    protected final avrora.sim.state.RegisterView reg;
    protected final byte low;
    protected final byte width;
    protected final int mask;

    public void <init>(avrora.sim.state.RegisterView, byte, byte)
    {
        avrora.sim.state.RegisterUtil$BitRangeView l0;
        byte l2, l3, $stack7;
        int $stack4, $stack5, $stack6;
        avrora.sim.state.RegisterView l1;

        l0 := @this: avrora.sim.state.RegisterUtil$BitRangeView;

        l1 := @parameter0: avrora.sim.state.RegisterView;

        l2 := @parameter1: byte;

        l3 := @parameter2: byte;

        specialinvoke l0.<avrora.sim.state.AbstractRegisterView: void <init>()>();

        l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte low> = l2;

        $stack4 = staticinvoke <cck.util.Arithmetic: int getBitRangeMask(int,int)>(l2, l3);

        l0.<avrora.sim.state.RegisterUtil$BitRangeView: int mask> = $stack4;

        $stack5 = l3 - l2;

        $stack6 = $stack5 + 1;

        $stack7 = (byte) $stack6;

        l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte width> = $stack7;

        l0.<avrora.sim.state.RegisterUtil$BitRangeView: avrora.sim.state.RegisterView reg> = l1;

        interfaceinvoke l1.<avrora.sim.state.RegisterView: void registerValueSetListener(avrora.sim.state.RegisterView$RegisterValueSetListener)>(l0);

        return;
    }

    public int getValue()
    {
        avrora.sim.state.RegisterUtil$BitRangeView l0;
        avrora.sim.state.RegisterView $stack1;
        int $stack2, $stack3, $stack5, $stack6;
        byte $stack4;

        l0 := @this: avrora.sim.state.RegisterUtil$BitRangeView;

        $stack1 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: avrora.sim.state.RegisterView reg>;

        $stack2 = interfaceinvoke $stack1.<avrora.sim.state.RegisterView: int getValue()>();

        $stack3 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: int mask>;

        $stack5 = $stack2 & $stack3;

        $stack4 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte low>;

        $stack6 = $stack5 >> $stack4;

        return $stack6;
    }

    public int getWidth()
    {
        avrora.sim.state.RegisterUtil$BitRangeView l0;
        byte $stack1;

        l0 := @this: avrora.sim.state.RegisterUtil$BitRangeView;

        $stack1 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte width>;

        return $stack1;
    }

    public void onValueSet(avrora.sim.state.RegisterView, int, int)
    {
        avrora.sim.state.RegisterUtil$BitRangeView l0;
        int $stack4, l3, $stack5, $stack8, $stack9, l2#2, l1#3, l2#4;
        byte $stack6, $stack7;
        avrora.sim.state.RegisterView l1#1;

        l0 := @this: avrora.sim.state.RegisterUtil$BitRangeView;

        l1#1 := @parameter0: avrora.sim.state.RegisterView;

        l2#2 := @parameter1: int;

        l3 := @parameter2: int;

        $stack4 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: int mask>;

        l1#3 = l2#2 & $stack4;

        $stack5 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: int mask>;

        l2#4 = l3 & $stack5;

        if l1#3 == l2#4 goto label1;

        $stack6 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte low>;

        $stack9 = l1#3 >> $stack6;

        $stack7 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte low>;

        $stack8 = l2#4 >> $stack7;

        virtualinvoke l0.<avrora.sim.state.RegisterUtil$BitRangeView: void notify(int,int)>($stack9, $stack8);

     label1:
        return;
    }

    public void setValue(int)
    {
        avrora.sim.state.RegisterUtil$BitRangeView l0;
        avrora.sim.state.RegisterView $stack2, $stack3;
        int $stack4, $stack5, $stack6, l1, $stack8, $stack9, $stack10, $stack11, $stack12;
        byte $stack7;

        l0 := @this: avrora.sim.state.RegisterUtil$BitRangeView;

        l1 := @parameter0: int;

        $stack3 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: avrora.sim.state.RegisterView reg>;

        $stack2 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: avrora.sim.state.RegisterView reg>;

        $stack4 = interfaceinvoke $stack2.<avrora.sim.state.RegisterView: int getValue()>();

        $stack5 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: int mask>;

        $stack6 = $stack5 ^ -1;

        $stack11 = $stack4 & $stack6;

        $stack7 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: byte low>;

        $stack9 = l1 << $stack7;

        $stack8 = l0.<avrora.sim.state.RegisterUtil$BitRangeView: int mask>;

        $stack10 = $stack9 & $stack8;

        $stack12 = $stack11 | $stack10;

        interfaceinvoke $stack3.<avrora.sim.state.RegisterView: void setValue(int)>($stack12);

        return;
    }
}
