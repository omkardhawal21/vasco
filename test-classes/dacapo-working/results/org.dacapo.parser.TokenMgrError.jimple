public class org.dacapo.parser.TokenMgrError extends java.lang.Error
{
    private static final long serialVersionUID;
    static final int LEXICAL_ERROR;
    static final int STATIC_LEXER_ERROR;
    static final int INVALID_LEXICAL_STATE;
    static final int LOOP_DETECTED;
    int errorCode;

    public void <init>()
    {
        org.dacapo.parser.TokenMgrError l0;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        specialinvoke l0.<java.lang.Error: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.dacapo.parser.TokenMgrError l0;
        java.lang.String l1;
        int l2;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke l0.<java.lang.Error: void <init>(java.lang.String)>(l1);

        l0.<org.dacapo.parser.TokenMgrError: int errorCode> = l2;

        return;
    }

    public void <init>(boolean, int, int, int, java.lang.String, char, int)
    {
        org.dacapo.parser.TokenMgrError l0;
        boolean l1;
        int l2, l3, l4, l7;
        java.lang.String l5, $stack8;
        char l6;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        l1 := @parameter0: boolean;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        l4 := @parameter3: int;

        l5 := @parameter4: java.lang.String;

        l6 := @parameter5: char;

        l7 := @parameter6: int;

        $stack8 = staticinvoke <org.dacapo.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>(l1, l2, l3, l4, l5, l6);

        specialinvoke l0.<org.dacapo.parser.TokenMgrError: void <init>(java.lang.String,int)>($stack8, l7);

        return;
    }

    protected static java.lang.String LexicalError(boolean, int, int, int, java.lang.String, char)
    {
        java.lang.StringBuilder $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack16, $stack17, $stack18, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26;
        int l2, l3, l1#2;
        char l5;
        java.lang.String $stack14, $stack15, $stack21, l4, $stack24, $stack27, l0#4;
        boolean l0#1;

        l0#1 := @parameter0: boolean;

        l1#2 := @parameter1: int;

        l2 := @parameter2: int;

        l3 := @parameter3: int;

        l4 := @parameter4: java.lang.String;

        l5 := @parameter5: char;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l3);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ");

        if l0#1 == 0 goto label1;

        l0#4 = "<EOF> ";

        goto label2;

     label1:
        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack14 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l5);

        $stack15 = staticinvoke <org.dacapo.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l5);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        l0#4 = $stack21;

     label2:
        $stack22 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l0#4);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"");

        $stack24 = staticinvoke <org.dacapo.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>(l4);

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack27;
    }

    protected static final java.lang.String addEscapes(java.lang.String)
    {
        java.lang.StringBuffer l1;
        java.lang.String l0, $stack5, $stack20, $stack22, $stack28, $stack30;
        int $stack4, $stack25, $stack26, $stack27, l3#1;
        char $stack6, $stack17;
        java.lang.StringBuilder $stack18, $stack19, $stack21, $stack23, $stack24, $stack29;

        l0 := @parameter0: java.lang.String;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

        l3#1 = 0;

     label01:
        $stack4 = virtualinvoke l0.<java.lang.String: int length()>();

        if l3#1 >= $stack4 goto label15;

        $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3#1);

        lookupswitch($stack6)
        {
            case 0: goto label02;
            case 8: goto label03;
            case 9: goto label04;
            case 10: goto label05;
            case 12: goto label06;
            case 13: goto label07;
            case 34: goto label08;
            case 39: goto label09;
            case 92: goto label10;
            default: goto label11;
        };

     label02:
        goto label14;

     label03:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label14;

     label04:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label14;

     label05:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label14;

     label06:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label14;

     label07:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label14;

     label08:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

        goto label14;

     label09:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\'");

        goto label14;

     label10:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label14;

     label11:
        $stack17 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3#1);

        if $stack17 < 32 goto label12;

        if $stack17 <= 126 goto label13;

     label12:
        $stack18 = new java.lang.StringBuilder;

        specialinvoke $stack18.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0000");

        $stack20 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($stack17, 16);

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

        $stack25 = virtualinvoke $stack22.<java.lang.String: int length()>();

        $stack26 = $stack25 - 4;

        $stack27 = virtualinvoke $stack22.<java.lang.String: int length()>();

        $stack28 = virtualinvoke $stack22.<java.lang.String: java.lang.String substring(int,int)>($stack26, $stack27);

        $stack29 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack28);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack30);

        goto label14;

     label13:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack17);

     label14:
        l3#1 = l3#1 + 1;

        goto label01;

     label15:
        $stack5 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack5;
    }

    public java.lang.String getMessage()
    {
        org.dacapo.parser.TokenMgrError l0;
        java.lang.String $stack1;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        $stack1 = specialinvoke l0.<java.lang.Error: java.lang.String getMessage()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.dacapo.parser.TokenMgrError: int LOOP_DETECTED> = 3;

        <org.dacapo.parser.TokenMgrError: int INVALID_LEXICAL_STATE> = 2;

        <org.dacapo.parser.TokenMgrError: int STATIC_LEXER_ERROR> = 1;

        <org.dacapo.parser.TokenMgrError: int LEXICAL_ERROR> = 0;

        <org.dacapo.parser.TokenMgrError: long serialVersionUID> = 1L;

        return;
    }
}
