public class avrora.sim.mcu.AtmelMicrocontroller$INTPin extends avrora.sim.mcu.DefaultMCU$Pin implements avrora.sim.mcu.Microcontroller$Pin$InputListener
{
    private boolean oldValue;
    private avrora.sim.mcu.ATMegaFamily$FlagRegister EIFR_reg;
    private int intNum;
    private avrora.sim.state.RegisterUtil$BitRangeView EICRx_bits;
    private avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification notification;
    final avrora.sim.mcu.AtmelMicrocontroller this$0;

    protected void <init>(avrora.sim.mcu.AtmelMicrocontroller, int, avrora.sim.mcu.ATMegaFamily$FlagRegister, int, avrora.sim.state.RegisterUtil$BitRangeView)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        avrora.sim.mcu.AtmelMicrocontroller l1;
        int l2, l4;
        avrora.sim.mcu.ATMegaFamily$FlagRegister l3;
        avrora.sim.state.RegisterUtil$BitRangeView l5;
        boolean $stack6;

        l0 := @this: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        l1 := @parameter0: avrora.sim.mcu.AtmelMicrocontroller;

        l2 := @parameter1: int;

        l3 := @parameter2: avrora.sim.mcu.ATMegaFamily$FlagRegister;

        l4 := @parameter3: int;

        l5 := @parameter4: avrora.sim.state.RegisterUtil$BitRangeView;

        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.AtmelMicrocontroller this$0> = l1;

        specialinvoke l0.<avrora.sim.mcu.DefaultMCU$Pin: void <init>(avrora.sim.mcu.DefaultMCU,int)>(l1, l2);

        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.ATMegaFamily$FlagRegister EIFR_reg> = l3;

        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: int intNum> = l4;

        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.state.RegisterUtil$BitRangeView EICRx_bits> = l5;

        $stack6 = virtualinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean read()>();

        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean oldValue> = $stack6;

        return;
    }

    static avrora.sim.state.RegisterUtil$BitRangeView access$000(avrora.sim.mcu.AtmelMicrocontroller$INTPin)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        avrora.sim.state.RegisterUtil$BitRangeView $stack1;

        l0 := @parameter0: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        $stack1 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.state.RegisterUtil$BitRangeView EICRx_bits>;

        return $stack1;
    }

    static int access$100(avrora.sim.mcu.AtmelMicrocontroller$INTPin)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        int $stack1;

        l0 := @parameter0: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        $stack1 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: int intNum>;

        return $stack1;
    }

    static avrora.sim.mcu.ATMegaFamily$FlagRegister access$200(avrora.sim.mcu.AtmelMicrocontroller$INTPin)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        avrora.sim.mcu.ATMegaFamily$FlagRegister $stack1;

        l0 := @parameter0: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        $stack1 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.ATMegaFamily$FlagRegister EIFR_reg>;

        return $stack1;
    }

    public void connectInput(avrora.sim.mcu.Microcontroller$Pin$Input)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        avrora.sim.mcu.Microcontroller$Pin$Input $stack3, l1, $stack5;
        boolean $stack4;
        java.lang.UnsupportedOperationException $stack9;
        java.lang.StringBuilder $stack10, $stack12, $stack13, $stack14, $stack16, $stack17;
        cck.text.Printer $stack11;
        int $stack15;
        java.lang.String $stack18;

        l0 := @this: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        l1 := @parameter0: avrora.sim.mcu.Microcontroller$Pin$Input;

        $stack3 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.Microcontroller$Pin$Input input>;

        if $stack3 == null goto label1;

        $stack5 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.Microcontroller$Pin$Input input>;

        interfaceinvoke $stack5.<avrora.sim.mcu.Microcontroller$Pin$Input: void unregisterListener(avrora.sim.mcu.Microcontroller$Pin$InputListener)>(l0);

     label1:
        specialinvoke l0.<avrora.sim.mcu.DefaultMCU$Pin: void connectInput(avrora.sim.mcu.Microcontroller$Pin$Input)>(l1);

        if l1 == null goto label6;

     label2:
        interfaceinvoke l1.<avrora.sim.mcu.Microcontroller$Pin$Input: void registerListener(avrora.sim.mcu.Microcontroller$Pin$InputListener)>(l0);

     label3:
        goto label5;

     label4:
        $stack9 := @caughtexception;

        $stack11 = <cck.text.Printer: cck.text.Printer STDERR>;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[WARN] Input target ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support Listeners. EIFR #");

        $stack15 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: int intNum>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" won\'t trigger.");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack11.<cck.text.Printer: void println(java.lang.String)>($stack18);

     label5:
        $stack4 = virtualinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean read()>();

        specialinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: void updateSensedLevel(boolean)>($stack4);

     label6:
        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    public void onInputChanged(avrora.sim.mcu.Microcontroller$Pin$Input, boolean)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        boolean l2;
        avrora.sim.mcu.Microcontroller$Pin$Input l1;

        l0 := @this: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        l1 := @parameter0: avrora.sim.mcu.Microcontroller$Pin$Input;

        l2 := @parameter1: boolean;

        specialinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: void updateSensedLevel(boolean)>(l2);

        return;
    }

    private boolean triggersInterrupt(boolean, boolean)
    {
        avrora.sim.state.RegisterUtil$BitRangeView $stack3;
        int $stack4, $stack6, $stack8, $stack10, $stack12;
        avrora.sim.mcu.AtmelMicrocontroller$InterruptType $stack5, $stack7, $stack9, $stack11;
        boolean l1, l2;
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0#1;

        l0#1 := @this: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        l1 := @parameter0: boolean;

        l2 := @parameter1: boolean;

        $stack3 = l0#1.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.state.RegisterUtil$BitRangeView EICRx_bits>;

        $stack4 = virtualinvoke $stack3.<avrora.sim.state.RegisterUtil$BitRangeView: int getValue()>();

        $stack5 = <avrora.sim.mcu.AtmelMicrocontroller$InterruptType: avrora.sim.mcu.AtmelMicrocontroller$InterruptType LowLevel>;

        $stack6 = virtualinvoke $stack5.<avrora.sim.mcu.AtmelMicrocontroller$InterruptType: int getBitValue()>();

        if $stack4 != $stack6 goto label1;

        if l2 != 0 goto label1;

        return 1;

     label1:
        if l1 != l2 goto label2;

        return 0;

     label2:
        $stack7 = <avrora.sim.mcu.AtmelMicrocontroller$InterruptType: avrora.sim.mcu.AtmelMicrocontroller$InterruptType AnyLevel>;

        $stack8 = virtualinvoke $stack7.<avrora.sim.mcu.AtmelMicrocontroller$InterruptType: int getBitValue()>();

        if $stack4 != $stack8 goto label3;

        return 1;

     label3:
        $stack9 = <avrora.sim.mcu.AtmelMicrocontroller$InterruptType: avrora.sim.mcu.AtmelMicrocontroller$InterruptType FallingEdge>;

        $stack10 = virtualinvoke $stack9.<avrora.sim.mcu.AtmelMicrocontroller$InterruptType: int getBitValue()>();

        if $stack4 != $stack10 goto label4;

        if l1 == 0 goto label5;

        if l2 != 0 goto label5;

        return 1;

     label4:
        $stack11 = <avrora.sim.mcu.AtmelMicrocontroller$InterruptType: avrora.sim.mcu.AtmelMicrocontroller$InterruptType RisingEdge>;

        $stack12 = virtualinvoke $stack11.<avrora.sim.mcu.AtmelMicrocontroller$InterruptType: int getBitValue()>();

        if $stack4 != $stack12 goto label5;

        if l1 != 0 goto label5;

        if l2 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private void updateSensedLevel(boolean)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        boolean l1, $stack4, $stack5;
        avrora.sim.state.RegisterUtil$BitRangeView $stack6;
        int $stack7, $stack9, $stack17, $stack23, $stack10#7;
        avrora.sim.mcu.AtmelMicrocontroller$InterruptType $stack8;
        avrora.sim.mcu.ATMegaFamily$FlagRegister $stack14, $stack11#3;
        avrora.sim.AtmelInterpreter $stack15;
        avrora.sim.InterruptTable $stack16;
        avrora.sim.InterruptTable$Notification $stack18;
        avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification $stack19, $stack22, $stack24;

        l0 := @this: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        l1 := @parameter0: boolean;

        $stack4 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean oldValue>;

        $stack5 = specialinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean triggersInterrupt(boolean,boolean)>($stack4, l1);

        if $stack5 == 0 goto label2;

        $stack6 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.state.RegisterUtil$BitRangeView EICRx_bits>;

        $stack7 = virtualinvoke $stack6.<avrora.sim.state.RegisterUtil$BitRangeView: int getValue()>();

        $stack8 = <avrora.sim.mcu.AtmelMicrocontroller$InterruptType: avrora.sim.mcu.AtmelMicrocontroller$InterruptType LowLevel>;

        $stack9 = virtualinvoke $stack8.<avrora.sim.mcu.AtmelMicrocontroller$InterruptType: int getBitValue()>();

        if $stack7 != $stack9 goto label1;

        $stack14 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.ATMegaFamily$FlagRegister EIFR_reg>;

        $stack15 = $stack14.<avrora.sim.mcu.ATMegaFamily$FlagRegister: avrora.sim.AtmelInterpreter interpreter>;

        $stack16 = virtualinvoke $stack15.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable getInterruptTable()>();

        $stack17 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: int intNum>;

        $stack18 = virtualinvoke $stack16.<avrora.sim.InterruptTable: avrora.sim.InterruptTable$Notification getInternalNotification(int)>($stack17);

        $stack19 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification notification>;

        if $stack18 == $stack19 goto label1;

        $stack22 = new avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification;

        specialinvoke $stack22.<avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification: void <init>(avrora.sim.mcu.AtmelMicrocontroller$INTPin,avrora.sim.InterruptTable$Notification)>(l0, $stack18);

        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification notification> = $stack22;

        $stack24 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.AtmelMicrocontroller$INTPin$InterruptTableNotification notification>;

        $stack23 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: int intNum>;

        virtualinvoke $stack16.<avrora.sim.InterruptTable: void registerInternalNotification(avrora.sim.InterruptTable$Notification,int)>($stack24, $stack23);

     label1:
        $stack11#3 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: avrora.sim.mcu.ATMegaFamily$FlagRegister EIFR_reg>;

        $stack10#7 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: int intNum>;

        virtualinvoke $stack11#3.<avrora.sim.mcu.ATMegaFamily$FlagRegister: void flagBit(int)>($stack10#7);

     label2:
        l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean oldValue> = l1;

        return;
    }

    protected void write(boolean)
    {
        avrora.sim.mcu.AtmelMicrocontroller$INTPin l0;
        boolean l1, $stack2, $stack3;

        l0 := @this: avrora.sim.mcu.AtmelMicrocontroller$INTPin;

        l1 := @parameter0: boolean;

        specialinvoke l0.<avrora.sim.mcu.DefaultMCU$Pin: void write(boolean)>(l1);

        $stack2 = l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean outputDir>;

        if $stack2 == 0 goto label1;

        $stack3 = virtualinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: boolean read()>();

        specialinvoke l0.<avrora.sim.mcu.AtmelMicrocontroller$INTPin: void updateSensedLevel(boolean)>($stack3);

     label1:
        return;
    }
}
