public class org.dacapo.harness.TestHarness extends java.lang.Object
{
    public static final java.lang.String BUILD_NICKNAME;
    public static final java.lang.String BUILD_VERSION;
    private static java.lang.String BuildNickName;
    private static java.lang.String BuildVersion;
    private final org.dacapo.parser.Config config;
    private static org.dacapo.harness.CommandLineArgs commandLineArgs;

    private void <init>(java.io.InputStream)
    {
        org.dacapo.harness.TestHarness l0;
        java.io.InputStream l1;
        org.dacapo.parser.Config $stack2, $stack3;

        l0 := @this: org.dacapo.harness.TestHarness;

        l1 := @parameter0: java.io.InputStream;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $stack2 = staticinvoke <org.dacapo.parser.Config: org.dacapo.parser.Config parse(java.io.InputStream)>(l1);

        l0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config> = $stack2;

        $stack3 = l0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        if $stack3 != null goto label1;

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label1:
        return;
    }

    private void bmInfo(java.lang.String)
    {
        org.dacapo.harness.TestHarness l0;
        java.lang.String l1;
        java.io.PrintStream $stack2;
        org.dacapo.parser.Config $stack3;

        l0 := @this: org.dacapo.harness.TestHarness;

        l1 := @parameter0: java.lang.String;

        $stack3 = l0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack3.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String)>($stack2, l1);

        return;
    }

    private void bmSizes()
    {
        org.dacapo.harness.TestHarness l0;
        java.io.PrintStream $stack1;
        org.dacapo.parser.Config $stack2;

        l0 := @this: org.dacapo.harness.TestHarness;

        $stack2 = l0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack2.<org.dacapo.parser.Config: void describeSizes(java.io.PrintStream)>($stack1);

        return;
    }

    public static double coeff_of_var(long[])
    {
        long[] l0;
        int $stack10, $stack11, l9#3;
        double l1, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack19, l5#1, l7#2, l3#4, l3#5;
        long $stack18;

        l0 := @parameter0: long[];

        $stack10 = lengthof l0;

        l1 = (double) $stack10;

        l5#1 = 0.0;

        l7#2 = 0.0;

        l9#3 = 0;

     label1:
        $stack11 = lengthof l0;

        if l9#3 >= $stack11 goto label2;

        $stack18 = l0[l9#3];

        l3#4 = (double) $stack18;

        l5#1 = l5#1 + l3#4;

        $stack19 = l3#4 * l3#4;

        l7#2 = l7#2 + $stack19;

        l9#3 = l9#3 + 1;

        goto label1;

     label2:
        l3#5 = l5#1 / l1;

        $stack12 = 1.0 / l1;

        $stack14 = $stack12 * l7#2;

        $stack13 = l3#5 * l3#5;

        $stack15 = $stack14 - $stack13;

        $stack16 = staticinvoke <java.lang.Math: double sqrt(double)>($stack15);

        $stack17 = $stack16 / l3#5;

        return $stack17;
    }

    private void dump(boolean)
    {
        boolean l1;
        java.lang.StringBuilder $stack2, $stack4, $stack7;
        java.io.PrintStream $stack3, $stack9, $stack12;
        org.dacapo.harness.TestHarness l0;
        org.dacapo.parser.Config $stack5, $stack11;
        java.lang.String $stack6, $stack8, $stack13;
        org.dacapo.harness.CommandLineArgs $stack10;

        l0 := @this: org.dacapo.harness.TestHarness;

        l1 := @parameter0: boolean;

        if l1 == 0 goto label1;

        $stack3 = <java.lang.System: java.io.PrintStream err>;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class name: ");

        $stack5 = l0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack6 = $stack5.<org.dacapo.parser.Config: java.lang.String className>;

        $stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack3.<java.io.PrintStream: void println(java.lang.String)>($stack8);

        $stack9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.String)>("Configurations:");

        $stack11 = l0.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack12 = <java.lang.System: java.io.PrintStream err>;

        $stack10 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack13 = virtualinvoke $stack10.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        virtualinvoke $stack11.<org.dacapo.parser.Config: void describe(java.io.PrintStream,java.lang.String)>($stack12, $stack13);

     label1:
        return;
    }

    private java.lang.Class findClass()
    {
        org.dacapo.parser.Config $stack1;
        boolean $stack2;
        java.lang.Class $stack3, $stack4, l0#3;
        java.lang.ClassNotFoundException $stack6;
        java.io.PrintStream $stack7;
        org.dacapo.harness.TestHarness l0#1;
        java.lang.String l0#2;

        l0#1 := @this: org.dacapo.harness.TestHarness;

     label1:
        $stack1 = l0#1.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        l0#2 = $stack1.<org.dacapo.parser.Config: java.lang.String className>;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(2, l0#2);

        $stack2 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack2 == 0 goto label2;

        $stack4 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall2()>();

        l0#3 = $stack4;

        goto label3;

     label2:
        $stack3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(l0#2);

        l0#3 = $stack3;

     label3:
        return l0#3;

     label4:
        $stack6 := @caughtexception;

        $stack7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>($stack6);

        virtualinvoke $stack6.<java.lang.ClassNotFoundException: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(-1);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
    }

    public static java.lang.String getBuildNickName()
    {
        java.lang.String $stack0;

        $stack0 = <org.dacapo.harness.TestHarness: java.lang.String BuildNickName>;

        return $stack0;
    }

    public static java.lang.String getBuildVersion()
    {
        java.lang.String $stack0;

        $stack0 = <org.dacapo.harness.TestHarness: java.lang.String BuildVersion>;

        return $stack0;
    }

    private boolean isValidSize(java.lang.String)
    {
        java.lang.String l1;
        org.dacapo.parser.Config $stack2;
        java.util.Collection $stack3;
        boolean $stack4, l0#2;
        org.dacapo.harness.TestHarness l0#1;

        l0#1 := @this: org.dacapo.harness.TestHarness;

        l1 := @parameter0: java.lang.String;

        if l1 == null goto label1;

        $stack2 = l0#1.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack3 = virtualinvoke $stack2.<org.dacapo.parser.Config: java.util.Collection getSizes()>();

        $stack4 = interfaceinvoke $stack3.<java.util.Collection: boolean contains(java.lang.Object)>(l1);

        if $stack4 == 0 goto label1;

        l0#2 = 1;

        goto label2;

     label1:
        l0#2 = 0;

     label2:
        return l0#2;
    }

    private boolean isValidThreadCount(java.lang.String)
    {
        java.lang.String l1;
        org.dacapo.parser.Config $stack2, $stack4, $stack6;
        int $stack3, $stack5, $stack7;
        org.dacapo.harness.TestHarness l0#1;
        boolean l0#2;

        l0#1 := @this: org.dacapo.harness.TestHarness;

        l1 := @parameter0: java.lang.String;

        $stack2 = l0#1.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack3 = virtualinvoke $stack2.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(l1);

        if $stack3 == 0 goto label1;

        $stack4 = l0#1.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack5 = virtualinvoke $stack4.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>(l1);

        $stack6 = l0#1.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack7 = virtualinvoke $stack6.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>(l1);

        if $stack5 > $stack7 goto label2;

     label1:
        l0#2 = 1;

        goto label3;

     label2:
        l0#2 = 0;

     label3:
        return l0#2;
    }

    public static void main(java.lang.String[])
    {
        java.util.Locale $stack8;
        org.dacapo.harness.CommandLineArgs $stack10, $stack11, $stack13, $stack14, $stack17, $stack22, $stack24, $stack36, $stack38, $stack27#21, $stack31#38, $stack41#57;
        java.lang.String $stack12, $stack15, $stack23, $stack25, $stack53, $stack56, $stack81, $stack84, $stack108, $stack117, $stack132, $stack144, l1#9, $stack28#23, $stack32#40, l7#50, l2#53;
        int $stack16, $stack47, $stack58, $stack71, $stack75, l3#28, $stack30#35, $stack33#42;
        java.lang.Iterable $stack18;
        java.util.Iterator $stack19;
        java.lang.Object $stack21;
        java.io.FileInputStream $stack26;
        boolean $stack34, $stack35, $stack37, $stack39, $stack40, $stack20#7, $stack42#59;
        java.lang.StringBuilder $stack44, $stack45, $stack48, $stack49, $stack50, $stack51, $stack52, $stack54, $stack55, $stack72, $stack73, $stack76, $stack77, $stack78, $stack79, $stack80, $stack82, $stack83, $stack101, $stack103, $stack104, $stack105, $stack106, $stack107, $stack113, $stack114, $stack115, $stack116, $stack128, $stack130, $stack131, $stack139, $stack141, $stack142, $stack143;
        org.dacapo.parser.Config $stack46, $stack57, $stack68, $stack74, $stack95, $stack109, $stack112, $stack29#31, l4#47;
        java.io.PrintStream $stack89, $stack100, $stack102, $stack129, $stack134, $stack140, l3#51;
        org.dacapo.parser.Config$ThreadModel $stack96, $stack97, $stack110, $stack111;
        java.lang.Class $stack118;
        java.lang.ClassLoader $stack119;
        java.io.InputStream $stack120, l7#10;
        java.lang.Exception $stack133;
        java.lang.RuntimeException $stack135, $stack145;
        java.io.FileNotFoundException $stack138;
        java.lang.String[] l0#1;
        java.io.File l0#2;
        org.dacapo.harness.TestHarness $stack121#14;

        l0#1 := @parameter0: java.lang.String[];

        $stack8 = new java.util.Locale;

        specialinvoke $stack8.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("en", "AU");

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack8);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.awt.headless", "true");

        staticinvoke <org.dacapo.harness.TestHarness: void setBuildInfo()>();

     label01:
        $stack10 = new org.dacapo.harness.CommandLineArgs;

        specialinvoke $stack10.<org.dacapo.harness.CommandLineArgs: void <init>(java.lang.String[])>(l0#1);

        <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs> = $stack10;

        l0#2 = new java.io.File;

        $stack11 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack12 = virtualinvoke $stack11.<org.dacapo.harness.CommandLineArgs: java.lang.String getScratchDir()>();

        specialinvoke l0#2.<java.io.File: void <init>(java.lang.String)>($stack12);

        staticinvoke <org.dacapo.harness.TestHarness: void makeCleanScratch(java.io.File)>(l0#2);

        $stack13 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        staticinvoke <org.dacapo.harness.Benchmark: void setCommandLineOptions(org.dacapo.harness.CommandLineArgs)>($stack13);

     label02:
        $stack14 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack15 = virtualinvoke $stack14.<org.dacapo.harness.CommandLineArgs: java.lang.String getThreadCount()>();

        $stack16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack15);

        staticinvoke <org.dacapo.parser.Config: void setThreadCountOverride(int)>($stack16);

     label03:
        goto label05;

     label04:
        $stack145 := @caughtexception;

     label05:
        $stack17 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack18 = virtualinvoke $stack17.<org.dacapo.harness.CommandLineArgs: java.lang.Iterable benchmarks()>();

        $stack19 = interfaceinvoke $stack18.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $stack20#7 = interfaceinvoke $stack19.<java.util.Iterator: boolean hasNext()>();

        if $stack20#7 == 0 goto label29;

        $stack21 = interfaceinvoke $stack19.<java.util.Iterator: java.lang.Object next()>();

        l1#9 = (java.lang.String) $stack21;

        l7#10 = null;

        $stack22 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack23 = virtualinvoke $stack22.<org.dacapo.harness.CommandLineArgs: java.lang.String getCnfOverride()>();

        if $stack23 != null goto label08;

        $stack113 = new java.lang.StringBuilder;

        specialinvoke $stack113.<java.lang.StringBuilder: void <init>()>();

        $stack114 = virtualinvoke $stack113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cnf/");

        $stack115 = virtualinvoke $stack114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1#9);

        $stack116 = virtualinvoke $stack115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".cnf");

        $stack117 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack118 = class "Lorg/dacapo/harness/TestHarness;";

        $stack119 = virtualinvoke $stack118.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $stack120 = virtualinvoke $stack119.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack117);

        l7#10 = $stack120;

        if $stack120 != null goto label07;

        $stack129 = <java.lang.System: java.io.PrintStream err>;

        $stack128 = new java.lang.StringBuilder;

        specialinvoke $stack128.<java.lang.StringBuilder: void <init>()>();

        $stack130 = virtualinvoke $stack128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown benchmark: ");

        $stack131 = virtualinvoke $stack130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1#9);

        $stack132 = virtualinvoke $stack131.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack129.<java.io.PrintStream: void println(java.lang.String)>($stack132);

        staticinvoke <java.lang.System: void exit(int)>(20);

     label07:
        goto label12;

     label08:
        $stack24 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack25 = virtualinvoke $stack24.<org.dacapo.harness.CommandLineArgs: java.lang.String getCnfOverride()>();

     label09:
        $stack26 = new java.io.FileInputStream;

        specialinvoke $stack26.<java.io.FileInputStream: void <init>(java.lang.String)>($stack25);

        l7#10 = $stack26;

     label10:
        goto label12;

     label11:
        $stack138 := @caughtexception;

        $stack140 = <java.lang.System: java.io.PrintStream err>;

        $stack139 = new java.lang.StringBuilder;

        specialinvoke $stack139.<java.lang.StringBuilder: void <init>()>();

        $stack141 = virtualinvoke $stack139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count not find cnf file: \'");

        $stack142 = virtualinvoke $stack141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack143 = virtualinvoke $stack142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack144 = virtualinvoke $stack143.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack140.<java.io.PrintStream: void println(java.lang.String)>($stack144);

        staticinvoke <java.lang.System: void exit(int)>(20);

     label12:
        $stack121#14 = new org.dacapo.harness.TestHarness;

        specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: void <init>(java.io.InputStream)>(l7#10);

        $stack27#21 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack28#23 = virtualinvoke $stack27#21.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        l3#28 = 0;

        $stack29#31 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack30#35 = virtualinvoke $stack29#31.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>($stack28#23);

     label13:
        $stack31#38 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack32#40 = virtualinvoke $stack31#38.<org.dacapo.harness.CommandLineArgs: java.lang.String getThreadFactor()>();

        $stack33#42 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack32#40);

        l3#28 = $stack33#42;

        if $stack33#42 <= 0 goto label14;

        $stack109 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack110 = virtualinvoke $stack109.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $stack111 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $stack110 != $stack111 goto label14;

        $stack112 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        virtualinvoke $stack112.<org.dacapo.parser.Config: void setThreadFactor(java.lang.String,int)>($stack28#23, $stack33#42);

     label14:
        goto label16;

     label15:
        $stack135 := @caughtexception;

     label16:
        $stack34 = specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: boolean isValidSize(java.lang.String)>($stack28#23);

        if $stack34 != 0 goto label17;

        $stack102 = <java.lang.System: java.io.PrintStream err>;

        $stack101 = new java.lang.StringBuilder;

        specialinvoke $stack101.<java.lang.StringBuilder: void <init>()>();

        $stack103 = virtualinvoke $stack101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No configuration size, ");

        $stack104 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack28#23);

        $stack105 = virtualinvoke $stack104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for benchmark ");

        $stack106 = virtualinvoke $stack105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1#9);

        $stack107 = virtualinvoke $stack106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack108 = virtualinvoke $stack107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack102.<java.io.PrintStream: void println(java.lang.String)>($stack108);

        goto label28;

     label17:
        if l3#28 == 0 goto label18;

        $stack95 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack96 = virtualinvoke $stack95.<org.dacapo.parser.Config: org.dacapo.parser.Config$ThreadModel getThreadModel()>();

        $stack97 = <org.dacapo.parser.Config$ThreadModel: org.dacapo.parser.Config$ThreadModel PER_CPU>;

        if $stack96 == $stack97 goto label18;

        $stack100 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack100.<java.io.PrintStream: void println(java.lang.String)>("Can only set the thread factor for per_cpu configurable benchmarks");

        goto label28;

     label18:
        $stack35 = specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>($stack28#23);

        if $stack35 != 0 goto label22;

        l4#47 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack71 = staticinvoke <org.dacapo.parser.Config: int getThreadCountOverride()>();

        if $stack71 > 0 goto label19;

        if l3#28 <= 0 goto label22;

     label19:
        $stack89 = <java.lang.System: java.io.PrintStream err>;

        $stack72 = new java.lang.StringBuilder;

        specialinvoke $stack72.<java.lang.StringBuilder: void <init>()>();

        $stack73 = virtualinvoke $stack72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified number of threads (");

        $stack74 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack75 = virtualinvoke $stack74.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>($stack28#23);

        $stack76 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack75);

        $stack77 = virtualinvoke $stack76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the range [1,");

        if $stack30#35 != 0 goto label20;

        l7#50 = "unlimited";

        goto label21;

     label20:
        $stack78 = new java.lang.StringBuilder;

        specialinvoke $stack78.<java.lang.StringBuilder: void <init>()>();

        $stack79 = virtualinvoke $stack78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack30#35);

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.String toString()>();

        l7#50 = $stack81;

     label21:
        $stack82 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l7#50);

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack89.<java.io.PrintStream: void println(java.lang.String)>($stack84);

        goto label28;

     label22:
        $stack36 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack37 = virtualinvoke $stack36.<org.dacapo.harness.CommandLineArgs: boolean getInformation()>();

        if $stack37 == 0 goto label23;

        specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: void bmInfo(java.lang.String)>($stack28#23);

        goto label28;

     label23:
        $stack38 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack39 = virtualinvoke $stack38.<org.dacapo.harness.CommandLineArgs: boolean getSizes()>();

        if $stack39 == 0 goto label24;

        specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: void bmSizes()>();

        goto label28;

     label24:
        $stack40 = specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>($stack28#23);

        if $stack40 != 0 goto label27;

        l3#51 = <java.lang.System: java.io.PrintStream err>;

        $stack44 = new java.lang.StringBuilder;

        specialinvoke $stack44.<java.lang.StringBuilder: void <init>()>();

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The derived number of threads (");

        $stack46 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack47 = virtualinvoke $stack46.<org.dacapo.parser.Config: int getThreadCount(java.lang.String)>($stack28#23);

        $stack48 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack47);

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the range [1,");

        if $stack30#35 != 0 goto label25;

        l2#53 = "unlimited";

        goto label26;

     label25:
        $stack50 = new java.lang.StringBuilder;

        specialinvoke $stack50.<java.lang.StringBuilder: void <init>()>();

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack30#35);

        $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.String toString()>();

        l2#53 = $stack53;

     label26:
        $stack54 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l2#53);

        $stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; rescaling to match thread limit.");

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l3#51.<java.io.PrintStream: void println(java.lang.String)>($stack56);

        $stack68 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack57 = $stack121#14.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack58 = virtualinvoke $stack57.<org.dacapo.parser.Config: int getThreadLimit(java.lang.String)>($stack28#23);

        staticinvoke <org.dacapo.parser.Config: void setThreadCountOverride(int)>($stack58);

     label27:
        $stack41#57 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack42#59 = virtualinvoke $stack41#57.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        specialinvoke $stack121#14.<org.dacapo.harness.TestHarness: void dump(boolean)>($stack42#59);

        staticinvoke <org.dacapo.harness.TestHarness: void runBenchmark(java.io.File,java.lang.String,org.dacapo.harness.TestHarness)>(l0#2, l1#9, $stack121#14);

     label28:
        goto label06;

     label29:
        goto label31;

     label30:
        $stack133 := @caughtexception;

        $stack134 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack134.<java.io.PrintStream: void println(java.lang.Object)>($stack133);

        virtualinvoke $stack133.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label31:
        return;

        catch java.lang.RuntimeException from label02 to label03 with label04;
        catch java.io.FileNotFoundException from label09 to label10 with label11;
        catch java.lang.RuntimeException from label13 to label14 with label15;
        catch java.lang.Exception from label01 to label29 with label30;
    }

    public static void makeCleanScratch(java.io.File)
    {
        java.io.File l0;

        l0 := @parameter0: java.io.File;

        staticinvoke <org.dacapo.harness.TestHarness: void rmdir(java.io.File)>(l0);

        virtualinvoke l0.<java.io.File: boolean mkdir()>();

        return;
    }

    private static void rmdir(java.io.File)
    {
        java.io.File l0, l2;
        java.lang.String[] $stack4;
        int $stack5, l3#1;
        java.lang.String $stack6, $stack14, $stack16;
        boolean $stack7, $stack8;
        java.lang.StringBuilder $stack11, $stack13, $stack15;
        java.io.PrintStream $stack12;

        l0 := @parameter0: java.io.File;

        $stack4 = virtualinvoke l0.<java.io.File: java.lang.String[] list()>();

        if $stack4 == null goto label4;

        l3#1 = 0;

     label1:
        $stack5 = lengthof $stack4;

        if l3#1 >= $stack5 goto label4;

        l2 = new java.io.File;

        $stack6 = $stack4[l3#1];

        specialinvoke l2.<java.io.File: void <init>(java.io.File,java.lang.String)>(l0, $stack6);

        $stack7 = virtualinvoke l2.<java.io.File: boolean isDirectory()>();

        if $stack7 == 0 goto label2;

        staticinvoke <org.dacapo.harness.TestHarness: void rmdir(java.io.File)>(l2);

     label2:
        $stack8 = virtualinvoke l2.<java.io.File: boolean delete()>();

        if $stack8 != 0 goto label3;

        $stack12 = <java.lang.System: java.io.PrintStream err>;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete ");

        $stack14 = $stack4[l3#1];

        $stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack12.<java.io.PrintStream: void println(java.lang.String)>($stack16);

     label3:
        l3#1 = l3#1 + 1;

        goto label1;

     label4:
        return;
    }

    private static void runBenchmark(java.io.File, java.lang.String, org.dacapo.harness.TestHarness) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.Exception
    {
        org.dacapo.harness.CommandLineArgs $stack5, $stack9, $stack16, $stack30, $stack34, $stack19#14;
        org.dacapo.parser.Config $stack6, $stack13, $stack18;
        java.io.PrintStream $stack7, $stack26;
        java.lang.String $stack8, l1, $stack31, $stack33, $stack20#16;
        boolean $stack10, $stack14, $stack35, l4#8, $stack21#18, l2#20, $stack22#25;
        java.lang.Class $stack11;
        java.lang.reflect.Constructor $stack12;
        java.lang.Object $stack15, $stack39, l0#6;
        org.dacapo.harness.Callback $stack17;
        java.lang.StringBuilder $stack25, $stack27, $stack28, $stack29, $stack32;
        org.dacapo.harness.Benchmark $stack41;
        java.io.File l0#1;
        org.dacapo.harness.TestHarness l2#2;
        java.lang.Class[] l3#3;
        java.lang.Object[] l4#5;

        l0#1 := @parameter0: java.io.File;

        l1 := @parameter1: java.lang.String;

        l2#2 := @parameter2: org.dacapo.harness.TestHarness;

        $stack6 = l2#2.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        $stack5 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack8 = virtualinvoke $stack5.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $stack9 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack10 = virtualinvoke $stack9.<org.dacapo.harness.CommandLineArgs: boolean getVerbose()>();

        virtualinvoke $stack6.<org.dacapo.parser.Config: void printThreadModel(java.io.PrintStream,java.lang.String,boolean)>($stack7, $stack8, $stack10);

        $stack11 = specialinvoke l2#2.<org.dacapo.harness.TestHarness: java.lang.Class findClass()>();

        l3#3 = newarray (java.lang.Class)[2];

        l3#3[0] = class "Lorg/dacapo/parser/Config;";

        l3#3[1] = class "Ljava/io/File;";

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(l3#3);

        l4#5 = newarray (java.lang.Object)[2];

        $stack13 = l2#2.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        l4#5[0] = $stack13;

        l4#5[1] = l0#1;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownConstructorNewInstance(int,java.lang.reflect.Constructor)>(9, $stack12);

        $stack14 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack14 == 0 goto label1;

        $stack39 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall21(java.lang.Object[])>(l4#5);

        l0#6 = $stack39;

        goto label2;

     label1:
        $stack15 = virtualinvoke $stack12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(l4#5);

        l0#6 = $stack15;

     label2:
        $stack41 = (org.dacapo.harness.Benchmark) l0#6;

        l4#8 = 1;

        $stack16 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack17 = virtualinvoke $stack16.<org.dacapo.harness.CommandLineArgs: org.dacapo.harness.Callback getCallback()>();

        $stack18 = l2#2.<org.dacapo.harness.TestHarness: org.dacapo.parser.Config config>;

        virtualinvoke $stack17.<org.dacapo.harness.Callback: void init(org.dacapo.parser.Config)>($stack18);

     label3:
        $stack19#14 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack20#16 = virtualinvoke $stack19#14.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $stack21#18 = virtualinvoke $stack41.<org.dacapo.harness.Benchmark: boolean run(org.dacapo.harness.Callback,java.lang.String)>($stack17, $stack20#16);

        if $stack21#18 == 0 goto label4;

        if l4#8 == 0 goto label4;

        l2#20 = 1;

        goto label5;

     label4:
        l2#20 = 0;

     label5:
        l4#8 = l2#20;

        $stack22#25 = virtualinvoke $stack17.<org.dacapo.harness.Callback: boolean runAgain()>();

        if $stack22#25 != 0 goto label3;

        virtualinvoke $stack41.<org.dacapo.harness.Benchmark: void cleanup()>();

        if l2#20 != 0 goto label6;

        $stack26 = <java.lang.System: java.io.PrintStream err>;

        $stack25 = new java.lang.StringBuilder;

        specialinvoke $stack25.<java.lang.StringBuilder: void <init>()>();

        $stack27 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation FAILED for ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack30 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack31 = virtualinvoke $stack30.<org.dacapo.harness.CommandLineArgs: java.lang.String getSize()>();

        $stack32 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack26.<java.io.PrintStream: void println(java.lang.String)>($stack33);

        $stack34 = <org.dacapo.harness.TestHarness: org.dacapo.harness.CommandLineArgs commandLineArgs>;

        $stack35 = virtualinvoke $stack34.<org.dacapo.harness.CommandLineArgs: boolean getIgnoreValidation()>();

        if $stack35 != 0 goto label6;

        staticinvoke <java.lang.System: void exit(int)>(-2);

     label6:
        return;
    }

    private static void setBuildInfo()
    {
        java.util.jar.JarFile $stack1;
        java.lang.Class $stack2;
        java.security.ProtectionDomain $stack3;
        java.security.CodeSource $stack4;
        java.net.URL $stack5;
        java.lang.String $stack6, $stack7, $stack8, $stack13, $stack16;
        java.util.jar.Manifest $stack9;
        java.util.jar.Attributes $stack10;
        java.util.jar.Attributes$Name $stack11, $stack14;
        java.lang.Object $stack12, $stack15;
        java.lang.Exception $stack17;

     label1:
        $stack1 = new java.util.jar.JarFile;

        $stack2 = class "Lorg/dacapo/harness/TestHarness;";

        $stack3 = virtualinvoke $stack2.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $stack4 = virtualinvoke $stack3.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        $stack5 = virtualinvoke $stack4.<java.security.CodeSource: java.net.URL getLocation()>();

        $stack6 = virtualinvoke $stack5.<java.net.URL: java.lang.String getFile()>();

        $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("!/harness", "");

        $stack8 = virtualinvoke $stack7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file:", "");

        specialinvoke $stack1.<java.util.jar.JarFile: void <init>(java.lang.String)>($stack8);

        $stack9 = virtualinvoke $stack1.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();

        $stack10 = virtualinvoke $stack9.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        $stack11 = new java.util.jar.Attributes$Name;

        specialinvoke $stack11.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>("Specification-Version");

        $stack12 = virtualinvoke $stack10.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.Object: java.lang.String toString()>();

        $stack14 = new java.util.jar.Attributes$Name;

        specialinvoke $stack14.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>("Implementation-Version");

        $stack15 = virtualinvoke $stack10.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.Object: java.lang.String toString()>();

        <org.dacapo.harness.TestHarness: java.lang.String BuildNickName> = $stack13;

        <org.dacapo.harness.TestHarness: java.lang.String BuildVersion> = $stack16;

     label2:
        goto label4;

     label3:
        $stack17 := @caughtexception;

        <org.dacapo.harness.TestHarness: java.lang.String BuildNickName> = "Unknown";

        <org.dacapo.harness.TestHarness: java.lang.String BuildVersion> = "unknown";

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.dacapo.harness.TestHarness: java.lang.String BUILD_VERSION> = "Implementation-Version";

        <org.dacapo.harness.TestHarness: java.lang.String BUILD_NICKNAME> = "Specification-Version";

        return;
    }
}
