public class avrora.sim.mcu.ReprogrammableCodeSegment extends avrora.sim.CodeSegment
{
    private static final double ERASE_MS_MIN;
    private static final double WRITE_MS_MIN;
    private static final double ERASE_MS_MAX;
    private static final double WRITE_MS_MAX;
    private static final int SPM_TIMEOUT;
    private static final int STATE_NONE;
    private static final int STATE_PGERASE;
    private static final int STATE_RWWSRE;
    private static final int STATE_BLBSET;
    private static final int STATE_FILL;
    private static final int STATE_PGWRITE;
    private static final int SPM_READY;
    private static final int SPMCSR_LOWERBITS;
    private static final byte DEFAULT_VALUE;
    final avrora.sim.output.SimPrinter flashPrinter;
    avrora.arch.legacy.LegacyDisassembler disassembler;
    byte[] buffer;
    final avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR;
    final int ERASE_CYCLES;
    final int WRITE_CYCLES;
    final int pagesize;
    final int addressMask;
    final avrora.sim.clock.MainClock mainClock;

    public void <init>(java.lang.String, int, avrora.sim.AtmelInterpreter, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        java.lang.String l1;
        int l2, l4, $stack8, $stack9, $stack13, $stack20, $stack26;
        avrora.sim.AtmelInterpreter l3;
        avrora.arch.legacy.LegacyDisassembler $stack5;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack6, $stack14;
        avrora.sim.clock.MainClock $stack7, $stack15, $stack21;
        avrora.sim.Simulator $stack10, $stack27;
        avrora.sim.mcu.Microcontroller $stack11;
        avrora.sim.mcu.MCUProperties $stack12;
        long $stack16, $stack22;
        double $stack17, $stack18, $stack19, $stack23, $stack24, $stack25;
        avrora.sim.output.SimPrinter $stack28;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        l3 := @parameter2: avrora.sim.AtmelInterpreter;

        l4 := @parameter3: int;

        specialinvoke l0.<avrora.sim.CodeSegment: void <init>(java.lang.String,int,avrora.sim.AtmelInterpreter)>(l1, l2, l3);

        $stack5 = new avrora.arch.legacy.LegacyDisassembler;

        specialinvoke $stack5.<avrora.arch.legacy.LegacyDisassembler: void <init>()>();

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.arch.legacy.LegacyDisassembler disassembler> = $stack5;

        $stack6 = new avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        specialinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,avrora.sim.mcu.ReprogrammableCodeSegment$1)>(l0, null);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR> = $stack6;

        $stack7 = virtualinvoke l3.<avrora.sim.AtmelInterpreter: avrora.sim.clock.MainClock getMainClock()>();

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock> = $stack7;

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize> = l4;

        $stack8 = l4 + 1;

        $stack9 = staticinvoke <cck.util.Arithmetic: int getBitRangeMask(int,int)>(1, $stack8);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int addressMask> = $stack9;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        $stack10 = virtualinvoke l3.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator getSimulator()>();

        $stack11 = virtualinvoke $stack10.<avrora.sim.Simulator: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        $stack12 = interfaceinvoke $stack11.<avrora.sim.mcu.Microcontroller: avrora.sim.mcu.MCUProperties getProperties()>();

        $stack13 = virtualinvoke $stack12.<avrora.sim.mcu.MCUProperties: int getIOReg(java.lang.String)>("SPMCSR");

        $stack14 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke l3.<avrora.sim.AtmelInterpreter: void installIOReg(int,avrora.sim.ActiveRegister)>($stack13, $stack14);

        $stack15 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack16 = virtualinvoke $stack15.<avrora.sim.clock.MainClock: long getHZ()>();

        $stack17 = (double) $stack16;

        $stack18 = $stack17 * 4.5;

        $stack19 = $stack18 / 1000.0;

        $stack20 = (int) $stack19;

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int ERASE_CYCLES> = $stack20;

        $stack21 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack22 = virtualinvoke $stack21.<avrora.sim.clock.MainClock: long getHZ()>();

        $stack23 = (double) $stack22;

        $stack24 = $stack23 * 4.5;

        $stack25 = $stack24 / 1000.0;

        $stack26 = (int) $stack25;

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int WRITE_CYCLES> = $stack26;

        $stack27 = virtualinvoke l3.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator getSimulator()>();

        $stack28 = virtualinvoke $stack27.<avrora.sim.Simulator: avrora.sim.output.SimPrinter getPrinter(java.lang.String)>("atmel.flash");

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter> = $stack28;

        return;
    }

    static avrora.sim.AtmelInterpreter access$000(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.sim.AtmelInterpreter $stack1;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        return $stack1;
    }

    static avrora.sim.AtmelInterpreter access$100(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.sim.AtmelInterpreter $stack1;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        return $stack1;
    }

    static int access$300(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int $stack1;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int bufferSize()>();

        return $stack1;
    }

    static void access$400(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int l1;
        avrora.arch.legacy.LegacyInstr l2;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter1: int;

        l2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(l1, l2);

        return;
    }

    static void access$500(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int l1;
        avrora.arch.legacy.LegacyInstr l2;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter1: int;

        l2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(l1, l2);

        return;
    }

    static byte[] access$600(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        byte[] $stack1;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] segment_data>;

        return $stack1;
    }

    static void access$700(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int l1;
        avrora.arch.legacy.LegacyInstr l2;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter1: int;

        l2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(l1, l2);

        return;
    }

    static byte[] access$800(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        byte[] $stack1;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] segment_data>;

        return $stack1;
    }

    static void access$900(avrora.sim.mcu.ReprogrammableCodeSegment, int, avrora.arch.legacy.LegacyInstr)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int l1;
        avrora.arch.legacy.LegacyInstr l2;

        l0 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter1: int;

        l2 := @parameter2: avrora.arch.legacy.LegacyInstr;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void replaceInstr(int,avrora.arch.legacy.LegacyInstr)>(l1, l2);

        return;
    }

    private int bufferSize()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int $stack1, $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $stack2 = 2 << $stack1;

        return $stack2;
    }

    private void fillBuffer(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.arch.legacy.LegacyRegister $stack4, $stack7;
        avrora.sim.AtmelInterpreter $stack5, $stack8;
        byte $stack6, $stack9;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack10, $stack14;
        int l2, $stack12, l1#1;
        byte[] $stack11, $stack13;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack15;
        avrora.sim.clock.MainClock $stack16;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1#1 := @parameter0: int;

        l2 := @parameter1: int;

        $stack5 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack4 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister R0>;

        $stack6 = virtualinvoke $stack5.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($stack4);

        $stack8 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack7 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister R1>;

        $stack9 = virtualinvoke $stack8.<avrora.sim.AtmelInterpreter: byte getRegisterByte(avrora.arch.legacy.LegacyRegister)>($stack7);

        $stack10 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack10.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void reset()>();

        $stack11 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack11[l2] = $stack6;

        $stack13 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack12 = l2 + 1;

        $stack13[$stack12] = $stack9;

        $stack16 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack14 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack15 = $stack14.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack16.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack15);

        return;
    }

    private void pageErase(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack3, $stack6;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack4;
        avrora.sim.clock.MainClock $stack5, $stack8;
        avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent $stack7;
        int l1, $stack9, l2;
        long $stack10;
        avrora.sim.Simulator$Event $stack11;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $stack5 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack3 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack4 = $stack3.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack5.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack4);

        $stack6 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void setBusy()>();

        $stack8 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack7 = new avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent;

        specialinvoke $stack7.<avrora.sim.mcu.ReprogrammableCodeSegment$EraseEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,int)>(l0, l1);

        $stack11 = (avrora.sim.Simulator$Event) $stack7;

        $stack9 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int ERASE_CYCLES>;

        $stack10 = (long) $stack9;

        virtualinvoke $stack8.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($stack11, $stack10);

        return;
    }

    private void pageWrite(int, int)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack3, $stack6;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack4;
        avrora.sim.clock.MainClock $stack5, $stack9;
        avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent $stack7;
        int l1, $stack10, l2;
        byte[] $stack8;
        long $stack11;
        avrora.sim.Simulator$Event $stack12;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $stack5 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack3 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack4 = $stack3.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack5.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack4);

        $stack6 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void setBusy()>();

        $stack9 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack7 = new avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent;

        $stack8 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        specialinvoke $stack7.<avrora.sim.mcu.ReprogrammableCodeSegment$WriteEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment,int,byte[])>(l0, l1, $stack8);

        $stack12 = (avrora.sim.Simulator$Event) $stack7;

        $stack10 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int WRITE_CYCLES>;

        $stack11 = (long) $stack10;

        virtualinvoke $stack9.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($stack12, $stack11);

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        return;
    }

    protected void resetBuffer()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        int $stack2, $stack5, l1#1;
        byte[] $stack3, $stack4, $stack6;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack2 = specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int bufferSize()>();

        $stack3 = newarray (byte)[$stack2];

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer> = $stack3;

        l1#1 = 0;

     label1:
        $stack4 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack5 = lengthof $stack4;

        if l1#1 >= $stack5 goto label2;

        $stack6 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: byte[] buffer>;

        $stack6[l1#1] = -1;

        l1#1 = l1#1 + 1;

        goto label1;

     label2:
        return;
    }

    private void resetRWW()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack1, $stack4, $stack6, $stack7;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack2;
        avrora.sim.clock.MainClock $stack3;
        boolean $stack5;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack3 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack2 = $stack1.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack3.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack2);

        $stack4 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack5 = virtualinvoke $stack4.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: boolean isBusy()>();

        if $stack5 != 0 goto label1;

        $stack6 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack6.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void clearBusy()>();

        $stack7 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        virtualinvoke $stack7.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void reset()>();

     label1:
        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetBuffer()>();

        return;
    }

    public void update()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment l0;
        avrora.arch.legacy.LegacyRegister $stack3;
        avrora.sim.AtmelInterpreter $stack4, $stack9, $stack50, $stack52;
        int $stack5, $stack6, l1, $stack7, $stack8, $stack10, $stack12, $stack51, $stack54, $stack55, $stack56, $stack57, l2#1;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg $stack11, $stack17;
        avrora.sim.output.SimPrinter $stack13, $stack14, $stack16, $stack20, $stack23, $stack25, $stack32, $stack34, $stack41, $stack43;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack18;
        avrora.sim.clock.MainClock $stack19;
        java.lang.StringBuilder $stack24, $stack26, $stack27, $stack33, $stack35, $stack36, $stack42, $stack44, $stack45;
        java.lang.String $stack28, $stack37, $stack46;
        byte $stack53;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment;

        $stack4 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack3 = <avrora.arch.legacy.LegacyRegister: avrora.arch.legacy.LegacyRegister Z>;

        $stack5 = virtualinvoke $stack4.<avrora.sim.AtmelInterpreter: int getRegisterWord(avrora.arch.legacy.LegacyRegister)>($stack3);

        $stack6 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int addressMask>;

        l1 = $stack5 & $stack6;

        $stack7 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $stack8 = $stack7 + 1;

        l2#1 = $stack5 >> $stack8;

        $stack9 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack10 = $stack9.<avrora.sim.AtmelInterpreter: int RAMPZ>;

        if $stack10 <= 0 goto label01;

        $stack52 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack50 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter interpreter>;

        $stack51 = $stack50.<avrora.sim.AtmelInterpreter: int RAMPZ>;

        $stack53 = virtualinvoke $stack52.<avrora.sim.AtmelInterpreter: byte getIORegisterByte(int)>($stack51);

        $stack54 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: int pagesize>;

        $stack55 = 16 - $stack54;

        $stack56 = $stack55 - 1;

        $stack57 = $stack53 << $stack56;

        l2#1 = l2#1 + $stack57;

     label01:
        $stack11 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack12 = virtualinvoke $stack11.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: int getState()>();

        lookupswitch($stack12)
        {
            case 1: goto label08;
            case 3: goto label02;
            case 5: goto label10;
            case 9: goto label06;
            case 17: goto label04;
            default: goto label12;
        };

     label02:
        $stack32 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack32 == null goto label03;

        $stack34 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $stack33 = new java.lang.StringBuilder;

        specialinvoke $stack33.<java.lang.StringBuilder: void <init>()>();

        $stack35 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: page erase of page ");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2#1);

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack34.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($stack37);

     label03:
        specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void pageErase(int,int)>(l2#1, l1);

        goto label12;

     label04:
        $stack13 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack13 == null goto label05;

        $stack14 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        virtualinvoke $stack14.<avrora.sim.output.SimPrinter: void println(java.lang.String)>("FLASH: reset RWW section ");

     label05:
        specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void resetRWW()>();

        goto label12;

     label06:
        $stack16 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack16 == null goto label07;

        $stack20 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        virtualinvoke $stack20.<avrora.sim.output.SimPrinter: void println(java.lang.String)>("FLASH: boot lock bits set");

     label07:
        $stack19 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack17 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg SPMCSR>;

        $stack18 = $stack17.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack19.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack18);

        goto label12;

     label08:
        $stack41 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack41 == null goto label09;

        $stack43 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $stack42 = new java.lang.StringBuilder;

        specialinvoke $stack42.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: fill buffer @ ");

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack43.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($stack46);

     label09:
        specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void fillBuffer(int,int)>(l2#1, l1);

        goto label12;

     label10:
        $stack23 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        if $stack23 == null goto label11;

        $stack25 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.output.SimPrinter flashPrinter>;

        $stack24 = new java.lang.StringBuilder;

        specialinvoke $stack24.<java.lang.StringBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLASH: page write to page ");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2#1);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack25.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($stack28);

     label11:
        specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment: void pageWrite(int,int)>(l2#1, l1);

        goto label12;

     label12:
        return;
    }

    public static void <clinit>()
    {
        <avrora.sim.mcu.ReprogrammableCodeSegment: byte DEFAULT_VALUE> = -1;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPMCSR_LOWERBITS> = 31;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPM_READY> = 35;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_PGWRITE> = 5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_FILL> = 1;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_BLBSET> = 9;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_RWWSRE> = 17;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_PGERASE> = 3;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int STATE_NONE> = 0;

        <avrora.sim.mcu.ReprogrammableCodeSegment: int SPM_TIMEOUT> = 4;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double WRITE_MS_MAX> = 4.5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double ERASE_MS_MAX> = 4.5;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double WRITE_MS_MIN> = 3.7;

        <avrora.sim.mcu.ReprogrammableCodeSegment: double ERASE_MS_MIN> = 3.7;

        return;
    }
}
