public class cck.text.StringUtil extends java.lang.Object
{
    public static final java.lang.String QUOTE;
    public static final java.lang.String SQUOTE;
    public static final java.lang.String LPAREN;
    public static final java.lang.String RPAREN;
    public static final java.lang.String COMMA;
    public static final java.lang.String COMMA_SPACE;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final char SQUOTE_CHAR;
    public static final char BACKSLASH;
    public static final char QUOTE_CHAR;
    protected static final java.lang.String[] spacers;

    static void <clinit>()
    {
        java.lang.String[] $stack1, l0;

        <cck.text.StringUtil: char QUOTE_CHAR> = 34;

        <cck.text.StringUtil: char BACKSLASH> = 92;

        <cck.text.StringUtil: char SQUOTE_CHAR> = 39;

        <cck.text.StringUtil: java.lang.String COMMA_SPACE> = ", ";

        <cck.text.StringUtil: java.lang.String COMMA> = ",";

        <cck.text.StringUtil: java.lang.String RPAREN> = ")";

        <cck.text.StringUtil: java.lang.String LPAREN> = "(";

        <cck.text.StringUtil: java.lang.String SQUOTE> = "\'";

        <cck.text.StringUtil: java.lang.String QUOTE> = "\"";

        $stack1 = newarray (java.lang.String)[0];

        <cck.text.StringUtil: java.lang.String[] EMPTY_STRING_ARRAY> = $stack1;

        l0 = newarray (java.lang.String)[11];

        l0[0] = "";

        l0[1] = " ";

        l0[2] = "  ";

        l0[3] = "   ";

        l0[4] = "    ";

        l0[5] = "     ";

        l0[6] = "      ";

        l0[7] = "       ";

        l0[8] = "        ";

        l0[9] = "         ";

        l0[10] = "          ";

        <cck.text.StringUtil: java.lang.String[] spacers> = l0;

        return;
    }

    public void <init>()
    {
        cck.text.StringUtil l0;

        l0 := @this: cck.text.StringUtil;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String addrToString(int)
    {
        int l0;
        long $stack1;
        java.lang.String $stack2;

        l0 := @parameter0: int;

        $stack1 = (long) l0;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String to0xHex(long,int)>($stack1, 4);

        return $stack2;
    }

    public static char alpha(int)
    {
        int l0, $stack1, $stack2;
        char $stack3;

        l0 := @parameter0: int;

        $stack1 = 97 + l0;

        $stack2 = $stack1 - 1;

        $stack3 = (char) $stack2;

        return $stack3;
    }

    private static void appendChar(int, java.lang.StringBuffer)
    {
        int l0;
        java.lang.StringBuffer l1;
        char $stack7;

        l0 := @parameter0: int;

        l1 := @parameter1: java.lang.StringBuffer;

        tableswitch(l0)
        {
            case 8: goto label3;
            case 9: goto label4;
            case 10: goto label1;
            case 11: goto label5;
            case 12: goto label5;
            case 13: goto label2;
            default: goto label5;
        };

     label1:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\n\'");

        goto label6;

     label2:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\r\'");

        goto label6;

     label3:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\b\'");

        goto label6;

     label4:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\t\'");

        goto label6;

     label5:
        if l0 < 32 goto label6;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $stack7 = (char) l0;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack7);

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

     label6:
        return;
    }

    public static void appendFract(java.lang.StringBuffer, double, int)
    {
        int l3, $stack8, $stack9, $stack10, $stack23, l4#1, l5#2;
        java.lang.StringBuffer l0;
        double l1, $stack6, $stack7;
        char $stack11;

        l0 := @parameter0: java.lang.StringBuffer;

        l1 := @parameter1: double;

        l3 := @parameter2: int;

        l4#1 = 0;

        l5#2 = 10;

     label1:
        if l4#1 >= l3 goto label3;

        if l4#1 != 0 goto label2;

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label2:
        $stack6 = (double) l5#2;

        $stack7 = l1 * $stack6;

        $stack8 = (int) $stack7;

        $stack9 = $stack8 % 10;

        $stack10 = $stack9 + 48;

        $stack11 = (char) $stack10;

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack11);

        $stack23 = l5#2 * 10;

        l5#2 = $stack23;

        l4#1 = l4#1 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String baseFileName(java.lang.String)
    {
        int $stack2, $stack3, $stack6;
        java.lang.String $stack4, $stack7, l0#1;

        l0#1 := @parameter0: java.lang.String;

        $stack2 = virtualinvoke l0#1.<java.lang.String: int lastIndexOf(int)>(47);

        if $stack2 < 0 goto label1;

        $stack6 = $stack2 + 1;

        $stack7 = virtualinvoke l0#1.<java.lang.String: java.lang.String substring(int)>($stack6);

        l0#1 = $stack7;

     label1:
        $stack3 = virtualinvoke l0#1.<java.lang.String: int lastIndexOf(int)>(46);

        if $stack3 < 0 goto label2;

        $stack4 = virtualinvoke l0#1.<java.lang.String: java.lang.String substring(int,int)>(0, $stack3);

        l0#1 = $stack4;

     label2:
        return l0#1;
    }

    public static java.lang.String commalist(java.util.List)
    {
        java.lang.StringBuffer l1;
        java.util.List l0;
        java.lang.String $stack2;

        l0 := @parameter0: java.util.List;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void commalist(java.util.List,java.lang.StringBuffer)>(l0, l1);

        $stack2 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack2;
    }

    public static void commalist(java.util.List, java.lang.StringBuffer)
    {
        java.util.Iterator $stack4;
        boolean $stack5, l3#2;
        java.lang.Object $stack6;
        java.lang.StringBuffer l1;
        java.lang.String $stack7;
        java.util.List l0#1;

        l0#1 := @parameter0: java.util.List;

        l1 := @parameter1: java.lang.StringBuffer;

        l3#2 = 0;

        $stack4 = interfaceinvoke l0#1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke $stack4.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label4;

        $stack6 = interfaceinvoke $stack4.<java.util.Iterator: java.lang.Object next()>();

        if l3#2 == 0 goto label2;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label3;

     label2:
        l3#2 = 1;

     label3:
        $stack7 = virtualinvoke $stack6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack7);

        goto label1;

     label4:
        return;
    }

    public static java.lang.String commalist(java.lang.Object[])
    {
        java.lang.StringBuffer l1;
        java.lang.Object[] l0;
        java.lang.String $stack2;

        l0 := @parameter0: java.lang.Object[];

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void commalist(java.lang.Object[],java.lang.StringBuffer)>(l0, l1);

        $stack2 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack2;
    }

    public static void commalist(java.lang.Object[], java.lang.StringBuffer)
    {
        java.lang.Object[] l0;
        int $stack3, l2#1;
        java.lang.StringBuffer l1;
        java.lang.Object $stack4;
        java.lang.String $stack5;

        l0 := @parameter0: java.lang.Object[];

        l1 := @parameter1: java.lang.StringBuffer;

        l2#1 = 0;

     label1:
        $stack3 = lengthof l0;

        if l2#1 >= $stack3 goto label3;

        if l2#1 <= 0 goto label2;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $stack4 = l0[l2#1];

        $stack5 = virtualinvoke $stack4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack5);

        l2#1 = l2#1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void commalist(java.util.Iterator, java.lang.StringBuffer)
    {
        java.util.Iterator l0;
        boolean $stack3;
        java.lang.StringBuffer l1;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        int l2#1;

        l0 := @parameter0: java.util.Iterator;

        l1 := @parameter1: java.lang.StringBuffer;

        l2#1 = 0;

     label1:
        $stack3 = interfaceinvoke l0.<java.util.Iterator: boolean hasNext()>();

        if $stack3 == 0 goto label3;

        if l2#1 <= 0 goto label2;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $stack4 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack5);

        l2#1 = l2#1 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5;
        java.lang.Object l0, l1;
        java.lang.String $stack6;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack6;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        java.lang.Object l0, l1, l2;
        java.lang.String $stack9;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        l2 := @parameter2: java.lang.Object;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l2);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    public static java.lang.String commalist(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;
        java.lang.Object l0, l1, l2, l3;
        java.lang.String $stack12;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        l2 := @parameter2: java.lang.Object;

        l3 := @parameter3: java.lang.Object;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l2);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l3);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack12;
    }

    private static java.lang.String convertToHex(long, int, int, char[], char[])
    {
        long l0, $stack8, $stack13;
        int $stack7, $stack10, $stack12, $stack14, $stack15, $stack17, l2#1, l3#2, l5#5, l3#6, l6#7;
        byte $stack9;
        java.lang.String $stack11, $stack20, $stack21, $stack23;
        char[] l4, l5#3;
        char $stack16, $stack24;
        java.lang.StringBuffer l2#4;

        l0 := @parameter0: long;

        l2#1 := @parameter1: int;

        l3#2 := @parameter2: int;

        l4 := @parameter3: char[];

        l5#3 := @parameter4: char[];

        $stack7 = l2#1 * 4;

        $stack8 = 1L << $stack7;

        $stack9 = l0 cmp $stack8;

        if $stack9 <= 0 goto label3;

        l2#4 = new java.lang.StringBuffer;

        specialinvoke l2#4.<java.lang.StringBuffer: void <init>()>();

        l5#5 = 0;

     label1:
        if l5#5 >= l3#2 goto label2;

        $stack24 = l4[l5#5];

        virtualinvoke l2#4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack24);

        l5#5 = l5#5 + 1;

        goto label1;

     label2:
        $stack20 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $stack21 = virtualinvoke $stack20.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke l2#4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke l2#4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack23;

     label3:
        $stack10 = l3#2 + l2#1;

        l3#6 = $stack10 - 1;

        l6#7 = 0;

     label4:
        if l6#7 >= l2#1 goto label5;

        $stack17 = l3#6 - l6#7;

        $stack12 = l6#7 * 4;

        $stack13 = l0 >> $stack12;

        $stack14 = (int) $stack13;

        $stack15 = $stack14 & 15;

        $stack16 = l5#3[$stack15];

        l4[$stack17] = $stack16;

        l6#7 = l6#7 + 1;

        goto label4;

     label5:
        $stack11 = new java.lang.String;

        specialinvoke $stack11.<java.lang.String: void <init>(char[])>(l4);

        return $stack11;
    }

    public static java.lang.String dup(char, int)
    {
        java.lang.StringBuffer l2;
        int l1, l3#1;
        java.lang.String $stack4;
        char l0;

        l0 := @parameter0: char;

        l1 := @parameter1: int;

        l2 = new java.lang.StringBuffer;

        specialinvoke l2.<java.lang.StringBuffer: void <init>(int)>(l1);

        l3#1 = 0;

     label1:
        if l3#1 >= l1 goto label2;

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(l0);

        l3#1 = l3#1 + 1;

        goto label1;

     label2:
        $stack4 = virtualinvoke l2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack4;
    }

    public static java.lang.String embed(java.lang.Object)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        java.lang.Object l0;
        java.lang.String $stack5;

        l0 := @parameter0: java.lang.Object;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5, $stack6;
        java.lang.Object l0, l1;
        java.lang.String $stack7;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;
        java.lang.Object l0, l1, l2;
        java.lang.String $stack10;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        l2 := @parameter2: java.lang.Object;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l2);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        java.lang.Object l0, l1, l2, l3;
        java.lang.String $stack13;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        l2 := @parameter2: java.lang.Object;

        l3 := @parameter3: java.lang.Object;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l2);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l3);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack13;
    }

    public static java.lang.String embed(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15;
        java.lang.Object l0, l1, l2, l3, l4;
        java.lang.String $stack16;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        l2 := @parameter2: java.lang.Object;

        l3 := @parameter3: java.lang.Object;

        l4 := @parameter4: java.lang.Object;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l1);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l2);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l3);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l4);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack16;
    }

    private static char escapeChar(java.text.CharacterIterator)
    {
        java.text.CharacterIterator l0;
        char $stack2, $stack4, $stack12;
        int $stack3, $stack11;

        l0 := @parameter0: java.text.CharacterIterator;

        $stack2 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        lookupswitch($stack2)
        {
            case 34: goto label07;
            case 39: goto label06;
            case 48: goto label10;
            case 49: goto label10;
            case 50: goto label10;
            case 51: goto label10;
            case 52: goto label10;
            case 53: goto label10;
            case 54: goto label10;
            case 55: goto label10;
            case 92: goto label05;
            case 98: goto label02;
            case 102: goto label01;
            case 110: goto label03;
            case 114: goto label04;
            case 116: goto label08;
            case 120: goto label09;
            default: goto label11;
        };

     label01:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 12;

     label02:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 8;

     label03:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 10;

     label04:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 13;

     label05:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 92;

     label06:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 39;

     label07:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 34;

     label08:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 9;

     label09:
        $stack3 = staticinvoke <cck.text.StringUtil: int readHexValue(java.text.CharacterIterator,int)>(l0, 4);

        $stack4 = (char) $stack3;

        return $stack4;

     label10:
        $stack11 = staticinvoke <cck.text.StringUtil: int readOctalValue(java.text.CharacterIterator,int)>(l0, 3);

        $stack12 = (char) $stack11;

        return $stack12;

     label11:
        return $stack2;
    }

    public static char evaluateCharLiteral(java.lang.String) throws java.lang.Exception
    {
        java.text.StringCharacterIterator l1;
        boolean $stack2;
        char $stack3, $stack5, l0#2;
        java.lang.String l0#1;

        l0#1 := @parameter0: java.lang.String;

        l1 = new java.text.StringCharacterIterator;

        specialinvoke l1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(l0#1);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(l1, 39);

        $stack2 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>(l1, 92);

        if $stack2 == 0 goto label1;

        $stack5 = staticinvoke <cck.text.StringUtil: char escapeChar(java.text.CharacterIterator)>(l1);

        l0#2 = $stack5;

        goto label2;

     label1:
        $stack3 = interfaceinvoke l1.<java.text.CharacterIterator: char current()>();

        l0#2 = $stack3;

        interfaceinvoke l1.<java.text.CharacterIterator: char next()>();

     label2:
        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(l1, 39);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(l1, 65535);

        return l0#2;
    }

    public static int evaluateIntegerLiteral(java.lang.String)
    {
        java.text.StringCharacterIterator $stack1;
        java.lang.String l0;
        int $stack2;

        l0 := @parameter0: java.lang.String;

        $stack1 = new java.text.StringCharacterIterator;

        specialinvoke $stack1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(l0);

        $stack2 = staticinvoke <cck.text.StringUtil: int readIntegerValue(java.text.CharacterIterator)>($stack1);

        return $stack2;
    }

    public static java.lang.String evaluateStringLiteral(java.lang.String) throws java.lang.Exception
    {
        java.lang.StringBuffer l1;
        int $stack3;
        java.text.StringCharacterIterator l2;
        boolean $stack4;
        char $stack5, $stack10, l0#2;
        java.lang.String $stack13, l0#1;

        l0#1 := @parameter0: java.lang.String;

        l1 = new java.lang.StringBuffer;

        $stack3 = virtualinvoke l0#1.<java.lang.String: int length()>();

        specialinvoke l1.<java.lang.StringBuffer: void <init>(int)>($stack3);

        l2 = new java.text.StringCharacterIterator;

        specialinvoke l2.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(l0#1);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(l2, 34);

     label1:
        $stack4 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>(l2, 34);

        if $stack4 == 0 goto label2;

        goto label5;

     label2:
        $stack5 = interfaceinvoke l2.<java.text.CharacterIterator: char current()>();

        l0#2 = $stack5;

        interfaceinvoke l2.<java.text.CharacterIterator: char next()>();

        if $stack5 != 65535 goto label3;

        goto label5;

     label3:
        if $stack5 != 92 goto label4;

        $stack10 = staticinvoke <cck.text.StringUtil: char escapeChar(java.text.CharacterIterator)>(l2);

        l0#2 = $stack10;

     label4:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(l0#2);

        goto label1;

     label5:
        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(l2, 65535);

        $stack13 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack13;
    }

    public static void expectChar(java.text.CharacterIterator, char) throws java.lang.Exception
    {
        java.text.CharacterIterator l0;
        char $stack2, l1;
        java.lang.StringBuilder $stack4, $stack5, $stack7, $stack8, $stack10;
        int $stack6;
        java.lang.String $stack9, $stack11;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: char;

        $stack2 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        if $stack2 == l1 goto label1;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parse error at ");

        $stack6 = interfaceinvoke l0.<java.text.CharacterIterator: int getIndex()>();

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected character ");

        $stack9 = staticinvoke <cck.text.StringUtil: java.lang.String squote(char)>(l1);

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack11);

     label1:
        return;
    }

    public static void expectChars(java.text.CharacterIterator, java.lang.String) throws java.lang.Exception
    {
        java.lang.String l1;
        int $stack3, l2#1;
        java.text.CharacterIterator l0;
        char $stack4;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: java.lang.String;

        l2#1 = 0;

     label1:
        $stack3 = virtualinvoke l1.<java.lang.String: int length()>();

        if l2#1 >= $stack3 goto label2;

        $stack4 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l2#1);

        staticinvoke <cck.text.StringUtil: void expectChar(java.text.CharacterIterator,char)>(l0, $stack4);

        l2#1 = l2#1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void expectKeyword(java.text.CharacterIterator, java.lang.String)
    {
        java.text.CharacterIterator l0;
        java.lang.String $stack2, l1, $stack9, $stack11;
        boolean $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack7, $stack8, $stack10;
        int $stack6;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: java.lang.String;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String readIdentifier(java.text.CharacterIterator)>(l0);

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(l1);

        if $stack3 != 0 goto label1;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parse error at ");

        $stack6 = interfaceinvoke l0.<java.text.CharacterIterator: int getIndex()>();

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected keyword ");

        $stack9 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(l1);

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack11);

     label1:
        return;
    }

    public static java.lang.String formatParagraphs(java.lang.String, int, int, int)
    {
        java.lang.String l0, $stack13, $stack14, $stack18;
        int $stack12, l1, l8, $stack15, $stack16, l3, $stack24, $stack26, $stack27, $stack28, $stack29, l2#1, l9#2, l10#4, l11#5;
        java.lang.StringBuffer l6;
        char $stack19;
        boolean $stack20;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: int;

        l2#1 := @parameter2: int;

        l3 := @parameter3: int;

        $stack12 = virtualinvoke l0.<java.lang.String: int length()>();

        l8 = l2#1 + l1;

        l9#2 = l8 + l1;

        $stack13 = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(l8);

        $stack14 = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(l1);

        l6 = new java.lang.StringBuffer;

        $stack15 = virtualinvoke l0.<java.lang.String: int length()>();

        $stack16 = $stack15 + 50;

        specialinvoke l6.<java.lang.StringBuffer: void <init>(int)>($stack16);

        virtualinvoke l6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack13);

        l10#4 = -1;

        l11#5 = 0;

     label1:
        if l11#5 >= $stack12 goto label5;

        $stack19 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l11#5);

        if $stack19 != 10 goto label2;

        virtualinvoke l6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        l9#2 = l8;

        virtualinvoke l6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack13);

        goto label4;

     label2:
        $stack20 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack19);

        if $stack20 == 0 goto label3;

        $stack29 = virtualinvoke l6.<java.lang.StringBuffer: int length()>();

        l10#4 = $stack29;

     label3:
        virtualinvoke l6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack19);

        l9#2 = l9#2 + 1;

        if l9#2 <= l3 goto label4;

        if l10#4 < 0 goto label4;

        virtualinvoke l6.<java.lang.StringBuffer: void setCharAt(int,char)>(l10#4, 10);

        $stack24 = l10#4 + 1;

        virtualinvoke l6.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>($stack24, $stack14);

        $stack26 = virtualinvoke l6.<java.lang.StringBuffer: int length()>();

        $stack27 = $stack26 - l10#4;

        $stack28 = $stack27 + l1;

        l9#2 = $stack28 - 1;

     label4:
        l11#5 = l11#5 + 1;

        goto label1;

     label5:
        $stack18 = virtualinvoke l6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack18;
    }

    private static java.lang.String getProperty(java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.String $stack2, $stack3, $stack6, $stack8;
        java.lang.StringBuilder $stack4, $stack5, $stack7;
        cck.util.Util$InternalError $stack9;
        java.lang.StringBuffer l0#1;
        java.util.Properties l1#2;

        l0#1 := @parameter0: java.lang.StringBuffer;

        l1#2 := @parameter1: java.util.Properties;

        $stack2 = virtualinvoke l0#1.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack3 = virtualinvoke l1#2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($stack2);

        if $stack3 != null goto label1;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stringReplace(): unknown variable ");

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>($stack2);

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack8);

        throw $stack9;

     label1:
        return $stack3;
    }

    public static java.lang.String getShortName(java.lang.Class)
    {
        java.lang.String $stack3, $stack8, $stack11, l2#2;
        int $stack4, $stack5, $stack6, $stack7, $stack9, $stack10;
        java.lang.Class l0#1;

        l0#1 := @parameter0: java.lang.Class;

        $stack3 = virtualinvoke l0#1.<java.lang.Class: java.lang.String getName()>();

        l2#2 = $stack3;

        $stack4 = virtualinvoke $stack3.<java.lang.String: int lastIndexOf(int)>(36);

        $stack5 = virtualinvoke $stack3.<java.lang.String: int lastIndexOf(int)>(46);

        if $stack5 > 0 goto label1;

        if $stack4 <= 0 goto label3;

     label1:
        if $stack5 <= $stack4 goto label2;

        $stack9 = $stack5 + 1;

        $stack10 = virtualinvoke $stack3.<java.lang.String: int length()>();

        $stack11 = virtualinvoke $stack3.<java.lang.String: java.lang.String substring(int,int)>($stack9, $stack10);

        l2#2 = $stack11;

        goto label3;

     label2:
        $stack6 = $stack4 + 1;

        $stack7 = virtualinvoke $stack3.<java.lang.String: int length()>();

        $stack8 = virtualinvoke $stack3.<java.lang.String: java.lang.String substring(int,int)>($stack6, $stack7);

        l2#2 = $stack8;

     label3:
        return l2#2;
    }

    public static char[] getStringChars(java.lang.String)
    {
        java.lang.String l0;
        int $stack2, $stack3;
        char[] l1;

        l0 := @parameter0: java.lang.String;

        $stack2 = virtualinvoke l0.<java.lang.String: int length()>();

        l1 = newarray (char)[$stack2];

        $stack3 = lengthof l1;

        virtualinvoke l0.<java.lang.String: void getChars(int,int,char[],int)>(0, $stack3, l1, 0);

        return l1;
    }

    public static int hexValueOf(char)
    {
        char l0;
        int $stack1;

        l0 := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: int hexValueOf(char)>(l0);

        return $stack1;
    }

    public static java.lang.String interval(int, int)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5, $stack6, $stack7;
        int l0, l1;
        java.lang.String $stack8;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack8;
    }

    public static boolean isBin(java.lang.String)
    {
        int $stack2;
        char $stack3, $stack4;
        java.lang.String l0#1;
        boolean l0#2;

        l0#1 := @parameter0: java.lang.String;

        $stack2 = virtualinvoke l0#1.<java.lang.String: int length()>();

        if $stack2 >= 2 goto label1;

        return 0;

     label1:
        $stack3 = virtualinvoke l0#1.<java.lang.String: char charAt(int)>(1);

        $stack4 = virtualinvoke l0#1.<java.lang.String: char charAt(int)>(0);

        if $stack4 != 48 goto label3;

        if $stack3 == 98 goto label2;

        if $stack3 != 66 goto label3;

     label2:
        l0#2 = 1;

        goto label4;

     label3:
        l0#2 = 0;

     label4:
        return l0#2;
    }

    public static boolean isHex(java.lang.String)
    {
        int $stack2;
        char $stack3, $stack4;
        java.lang.String l0#1;
        boolean l0#2;

        l0#1 := @parameter0: java.lang.String;

        $stack2 = virtualinvoke l0#1.<java.lang.String: int length()>();

        if $stack2 >= 2 goto label1;

        return 0;

     label1:
        $stack3 = virtualinvoke l0#1.<java.lang.String: char charAt(int)>(1);

        $stack4 = virtualinvoke l0#1.<java.lang.String: char charAt(int)>(0);

        if $stack4 != 48 goto label3;

        if $stack3 == 120 goto label2;

        if $stack3 != 88 goto label3;

     label2:
        l0#2 = 1;

        goto label4;

     label3:
        l0#2 = 0;

     label4:
        return l0#2;
    }

    public static boolean isHexDigit(char)
    {
        char l0;
        boolean $stack1;

        l0 := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: boolean isHexDigit(char)>(l0);

        return $stack1;
    }

    public static boolean isOctalDigit(char)
    {
        char l0;
        boolean $stack1;

        l0 := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: boolean isOctDigit(char)>(l0);

        return $stack1;
    }

    public static void justify(boolean, java.lang.StringBuffer, java.lang.String, int)
    {
        java.lang.String l2;
        int $stack4, l3#1, l3#2;
        boolean l0;
        java.lang.StringBuffer l1;

        l0 := @parameter0: boolean;

        l1 := @parameter1: java.lang.StringBuffer;

        l2 := @parameter2: java.lang.String;

        l3#1 := @parameter3: int;

        $stack4 = virtualinvoke l2.<java.lang.String: int length()>();

        l3#2 = l3#1 - $stack4;

        if l0 == 0 goto label1;

        staticinvoke <cck.text.StringUtil: void space(java.lang.StringBuffer,int)>(l1, l3#2);

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l2);

        goto label2;

     label1:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l2);

        staticinvoke <cck.text.StringUtil: void space(java.lang.StringBuffer,int)>(l1, l3#2);

     label2:
        return;
    }

    public static void justify(boolean, java.lang.StringBuffer, long, int)
    {
        boolean l0;
        java.lang.StringBuffer l1;
        long l2;
        java.lang.String $stack5;
        int l4;

        l0 := @parameter0: boolean;

        l1 := @parameter1: java.lang.StringBuffer;

        l2 := @parameter2: long;

        l4 := @parameter3: int;

        $stack5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(l0, l1, $stack5, l4);

        return;
    }

    public static void justify(boolean, java.lang.StringBuffer, float, int)
    {
        boolean l0;
        java.lang.StringBuffer l1;
        float l2;
        java.lang.String $stack4;
        int l3;

        l0 := @parameter0: boolean;

        l1 := @parameter1: java.lang.StringBuffer;

        l2 := @parameter2: float;

        l3 := @parameter3: int;

        $stack4 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(l2);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(l0, l1, $stack4, l3);

        return;
    }

    public static java.lang.String justify(boolean, java.lang.String, int)
    {
        int l2, $stack4, $stack5;
        java.lang.String l1, $stack6;
        java.lang.StringBuffer l3;
        boolean l0;

        l0 := @parameter0: boolean;

        l1 := @parameter1: java.lang.String;

        l2 := @parameter2: int;

        $stack4 = virtualinvoke l1.<java.lang.String: int length()>();

        $stack5 = l2 - $stack4;

        if $stack5 > 0 goto label1;

        return l1;

     label1:
        l3 = new java.lang.StringBuffer;

        specialinvoke l3.<java.lang.StringBuffer: void <init>(int)>(l2);

        staticinvoke <cck.text.StringUtil: void justify(boolean,java.lang.StringBuffer,java.lang.String,int)>(l0, l3, l1, l2);

        $stack6 = virtualinvoke l3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack6;
    }

    public static java.lang.String justify(boolean, long, int)
    {
        boolean l0;
        long l1;
        java.lang.String $stack4, $stack5;
        int l3;

        l0 := @parameter0: boolean;

        l1 := @parameter1: long;

        l3 := @parameter2: int;

        $stack4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(l0, $stack4, l3);

        return $stack5;
    }

    public static java.lang.String justify(boolean, float, int)
    {
        boolean l0;
        float l1;
        java.lang.String $stack3, $stack4;
        int l2;

        l0 := @parameter0: boolean;

        l1 := @parameter1: float;

        l2 := @parameter2: int;

        $stack3 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(l1);

        $stack4 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(l0, $stack3, l2);

        return $stack4;
    }

    public static java.lang.String leftJustify(long, int)
    {
        long l0;
        int l2;
        java.lang.String $stack3;

        l0 := @parameter0: long;

        l2 := @parameter1: int;

        $stack3 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,long,int)>(0, l0, l2);

        return $stack3;
    }

    public static java.lang.String leftJustify(float, int)
    {
        float l0;
        int l1;
        java.lang.String $stack2;

        l0 := @parameter0: float;

        l1 := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,float,int)>(0, l0, l1);

        return $stack2;
    }

    public static java.lang.String leftJustify(java.lang.String, int)
    {
        java.lang.String l0, $stack2;
        int l1;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(0, l0, l1);

        return $stack2;
    }

    public static java.lang.String linelist(java.util.List)
    {
        java.lang.StringBuffer l1;
        java.util.List l0;
        java.lang.String $stack2;

        l0 := @parameter0: java.util.List;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <cck.text.StringUtil: void linelist(java.lang.StringBuffer,java.util.List)>(l1, l0);

        $stack2 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack2;
    }

    public static void linelist(java.lang.StringBuffer, java.util.List)
    {
        java.util.Iterator $stack2;
        boolean $stack3;
        java.lang.StringBuffer l0;
        java.lang.Object $stack4;
        java.lang.String $stack5;
        java.util.List l1#1;

        l0 := @parameter0: java.lang.StringBuffer;

        l1#1 := @parameter1: java.util.List;

        $stack2 = interfaceinvoke l1#1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack3 = interfaceinvoke $stack2.<java.util.Iterator: boolean hasNext()>();

        if $stack3 == 0 goto label2;

        $stack4 = interfaceinvoke $stack2.<java.util.Iterator: java.lang.Object next()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack5);

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label1;

     label2:
        return;
    }

    static java.lang.StringBuffer newBuffer(java.lang.String, java.lang.StringBuffer, java.util.List)
    {
        java.util.List l2;
        java.lang.StringBuffer l1, $stack5;
        java.lang.String $stack3, l0;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.lang.StringBuffer;

        l2 := @parameter2: java.util.List;

        $stack3 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke l2.<java.util.List: boolean add(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuffer;

        specialinvoke $stack5.<java.lang.StringBuffer: void <init>(java.lang.String)>(l0);

        return $stack5;
    }

    public static int octalValueOf(char)
    {
        char l0;
        int $stack1;

        l0 := @parameter0: char;

        $stack1 = staticinvoke <cck.text.CharUtil: int octValueOf(char)>(l0);

        return $stack1;
    }

    public static char peek(java.text.CharacterIterator)
    {
        java.text.CharacterIterator l0;
        char $stack1;

        l0 := @parameter0: java.text.CharacterIterator;

        $stack1 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        return $stack1;
    }

    public static boolean peekAndEat(java.text.CharacterIterator, char)
    {
        java.text.CharacterIterator l0;
        char $stack2, l1;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: char;

        $stack2 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        if $stack2 != l1 goto label1;

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        return 1;

     label1:
        return 0;
    }

    public static boolean peekAndEat(java.text.CharacterIterator, java.lang.String)
    {
        java.text.CharacterIterator l0;
        int $stack4, $stack5, l3#1;
        java.lang.String l1;
        char $stack6, $stack7;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: java.lang.String;

        $stack4 = interfaceinvoke l0.<java.text.CharacterIterator: int getIndex()>();

        l3#1 = 0;

     label1:
        $stack5 = virtualinvoke l1.<java.lang.String: int length()>();

        if l3#1 >= $stack5 goto label4;

        $stack6 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        $stack7 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l3#1);

        if $stack6 != $stack7 goto label2;

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        goto label3;

     label2:
        interfaceinvoke l0.<java.text.CharacterIterator: char setIndex(int)>($stack4);

        return 0;

     label3:
        l3#1 = l3#1 + 1;

        goto label1;

     label4:
        return 1;
    }

    public static java.lang.String qembed(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack7, $stack8, $stack9;
        java.lang.String l0, l1, $stack6, l2, $stack10;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.lang.String;

        l2 := @parameter2: java.lang.String;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l0);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(l1);

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l2);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public static java.lang.String quote(java.lang.Object)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        java.lang.Object l0;
        java.lang.String $stack5;

        l0 := @parameter0: java.lang.Object;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static int readBinaryValue(java.text.CharacterIterator, int)
    {
        int l1, $stack8, l3#1, l4#2;
        java.text.CharacterIterator l0;
        char $stack5;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: int;

        l3#1 = 0;

        l4#2 = 0;

     label1:
        if l4#2 >= l1 goto label4;

        $stack5 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        if $stack5 != 48 goto label2;

        l3#1 = l3#1 << 1;

        goto label3;

     label2:
        if $stack5 != 49 goto label4;

        $stack8 = l3#1 << 1;

        l3#1 = $stack8 | 1;

     label3:
        l4#2 = l4#2 + 1;

        goto label1;

     label4:
        return l3#1;
    }

    public static java.lang.String readDecimalString(java.text.CharacterIterator, int)
    {
        java.lang.StringBuffer l2;
        java.text.CharacterIterator l0;
        boolean $stack5, $stack8;
        int l1, l4#1;
        java.lang.String $stack6;
        char $stack7;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: int;

        l2 = new java.lang.StringBuffer;

        specialinvoke l2.<java.lang.StringBuffer: void <init>()>();

        $stack5 = staticinvoke <cck.text.StringUtil: boolean peekAndEat(java.text.CharacterIterator,char)>(l0, 45);

        if $stack5 == 0 goto label1;

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label1:
        l4#1 = 0;

     label2:
        if l4#1 >= l1 goto label4;

        $stack7 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        $stack8 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack7);

        if $stack8 != 0 goto label3;

        goto label4;

     label3:
        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack7);

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        l4#1 = l4#1 + 1;

        goto label2;

     label4:
        $stack6 = virtualinvoke l2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack6;
    }

    public static int readDecimalValue(java.text.CharacterIterator, int)
    {
        java.text.CharacterIterator l0;
        int l1, $stack3;
        java.lang.String $stack2;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String readDecimalString(java.text.CharacterIterator,int)>(l0, l1);

        $stack3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack2);

        return $stack3;
    }

    public static java.lang.String readDotIdentifier(java.text.CharacterIterator)
    {
        java.lang.StringBuffer l1;
        java.text.CharacterIterator l0;
        char $stack3;
        boolean $stack4;
        java.lang.String $stack12;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

     label1:
        $stack3 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        $stack4 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($stack3);

        if $stack4 != 0 goto label2;

        if $stack3 == 95 goto label2;

        if $stack3 == 46 goto label2;

        goto label3;

     label2:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack3);

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        $stack12 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack12;
    }

    public static int readHexValue(java.text.CharacterIterator, int)
    {
        int l1, $stack7, $stack8, l3#1, l4#2;
        java.text.CharacterIterator l0;
        char $stack5;
        boolean $stack6;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: int;

        l3#1 = 0;

        l4#2 = 0;

     label1:
        if l4#2 >= l1 goto label4;

        $stack5 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        if $stack5 != 65535 goto label2;

        goto label4;

     label2:
        $stack6 = staticinvoke <cck.text.StringUtil: boolean isHexDigit(char)>($stack5);

        if $stack6 != 0 goto label3;

        goto label4;

     label3:
        $stack7 = l3#1 << 4;

        $stack8 = staticinvoke <cck.text.StringUtil: int hexValueOf(char)>($stack5);

        l3#1 = $stack7 | $stack8;

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        l4#2 = l4#2 + 1;

        goto label1;

     label4:
        return l3#1;
    }

    public static java.lang.String readIdentifier(java.text.CharacterIterator)
    {
        java.lang.StringBuffer l1;
        java.text.CharacterIterator l0;
        char $stack3;
        boolean $stack4;
        java.lang.String $stack12;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

     label1:
        $stack3 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        $stack4 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($stack3);

        if $stack4 != 0 goto label2;

        if $stack3 == 95 goto label2;

        goto label3;

     label2:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack3);

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        $stack12 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack12;
    }

    public static int readIntegerValue(java.text.CharacterIterator)
    {
        java.text.CharacterIterator l0;
        char $stack2, $stack4;
        int $stack3, $stack6, $stack8, $stack9, $stack16;

        l0 := @parameter0: java.text.CharacterIterator;

        $stack2 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        if $stack2 != 45 goto label1;

        $stack16 = staticinvoke <cck.text.StringUtil: int readDecimalValue(java.text.CharacterIterator,int)>(l0, 10);

        return $stack16;

     label1:
        if $stack2 != 48 goto label6;

        $stack4 = interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        if $stack4 == 120 goto label2;

        if $stack4 != 88 goto label3;

     label2:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        $stack6 = staticinvoke <cck.text.StringUtil: int readHexValue(java.text.CharacterIterator,int)>(l0, 8);

        return $stack6;

     label3:
        if $stack4 == 98 goto label4;

        if $stack4 != 66 goto label5;

     label4:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        $stack8 = staticinvoke <cck.text.StringUtil: int readBinaryValue(java.text.CharacterIterator,int)>(l0, 32);

        return $stack8;

     label5:
        $stack9 = staticinvoke <cck.text.StringUtil: int readOctalValue(java.text.CharacterIterator,int)>(l0, 11);

        return $stack9;

     label6:
        $stack3 = staticinvoke <cck.text.StringUtil: int readDecimalValue(java.text.CharacterIterator,int)>(l0, 10);

        return $stack3;
    }

    public static int readOctalValue(java.text.CharacterIterator, int)
    {
        int l1, $stack7, $stack8, l3#1, l4#2;
        java.text.CharacterIterator l0;
        char $stack5;
        boolean $stack6;

        l0 := @parameter0: java.text.CharacterIterator;

        l1 := @parameter1: int;

        l3#1 = 0;

        l4#2 = 0;

     label1:
        if l4#2 >= l1 goto label3;

        $stack5 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        $stack6 = staticinvoke <cck.text.StringUtil: boolean isOctalDigit(char)>($stack5);

        if $stack6 != 0 goto label2;

        goto label3;

     label2:
        $stack7 = l3#1 << 3;

        $stack8 = staticinvoke <cck.text.StringUtil: int octalValueOf(char)>($stack5);

        l3#1 = $stack7 | $stack8;

        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        l4#2 = l4#2 + 1;

        goto label1;

     label3:
        return l3#1;
    }

    private static int replaceVar(int, int, java.lang.String, java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer l5, l3;
        int l0, l1, $stack6;
        java.lang.String l2, $stack7;
        java.util.Properties l4;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        l2 := @parameter2: java.lang.String;

        l3 := @parameter3: java.lang.StringBuffer;

        l4 := @parameter4: java.util.Properties;

        l5 = new java.lang.StringBuffer;

        specialinvoke l5.<java.lang.StringBuffer: void <init>(int)>(10);

        $stack6 = staticinvoke <cck.text.StringUtil: int scanAhead(int,char,int,java.lang.String,java.lang.StringBuffer,java.lang.StringBuffer)>(l0, 36, l1, l2, l3, l5);

        $stack7 = staticinvoke <cck.text.StringUtil: java.lang.String getProperty(java.lang.StringBuffer,java.util.Properties)>(l5, l4);

        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack7);

        return $stack6;
    }

    private static int replaceVarQuote(int, int, java.lang.String, java.lang.StringBuffer, java.util.Properties)
    {
        java.lang.StringBuffer l5, l3;
        int l0, l1, $stack6;
        java.lang.String l2, $stack7;
        java.util.Properties l4;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        l2 := @parameter2: java.lang.String;

        l3 := @parameter3: java.lang.StringBuffer;

        l4 := @parameter4: java.util.Properties;

        l5 = new java.lang.StringBuffer;

        specialinvoke l5.<java.lang.StringBuffer: void <init>(int)>(10);

        $stack6 = staticinvoke <cck.text.StringUtil: int scanAhead(int,char,int,java.lang.String,java.lang.StringBuffer,java.lang.StringBuffer)>(l0, 37, l1, l2, l3, l5);

        $stack7 = staticinvoke <cck.text.StringUtil: java.lang.String getProperty(java.lang.StringBuffer,java.util.Properties)>(l5, l4);

        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack7);

        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        return $stack6;
    }

    public static java.lang.String rightJustify(long, int)
    {
        long l0;
        int l2;
        java.lang.String $stack3;

        l0 := @parameter0: long;

        l2 := @parameter1: int;

        $stack3 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,long,int)>(1, l0, l2);

        return $stack3;
    }

    public static java.lang.String rightJustify(float, int)
    {
        float l0;
        int l1;
        java.lang.String $stack2;

        l0 := @parameter0: float;

        l1 := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,float,int)>(1, l0, l1);

        return $stack2;
    }

    public static java.lang.String rightJustify(java.lang.String, int)
    {
        java.lang.String l0, $stack2;
        int l1;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: int;

        $stack2 = staticinvoke <cck.text.StringUtil: java.lang.String justify(boolean,java.lang.String,int)>(1, l0, l1);

        return $stack2;
    }

    private static int scanAhead(int, char, int, java.lang.String, java.lang.StringBuffer, java.lang.StringBuffer)
    {
        int l2, l0#1, l6#2;
        java.lang.String l3;
        char $stack7, l1;
        boolean $stack8;
        java.lang.StringBuffer l5, l4;

        l0#1 := @parameter0: int;

        l1 := @parameter1: char;

        l2 := @parameter2: int;

        l3 := @parameter3: java.lang.String;

        l4 := @parameter4: java.lang.StringBuffer;

        l5 := @parameter5: java.lang.StringBuffer;

        l6#2 = l0#1 + 1;

     label1:
        if l6#2 >= l2 goto label4;

        $stack7 = virtualinvoke l3.<java.lang.String: char charAt(int)>(l6#2);

        $stack8 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($stack7);

        if $stack8 != 0 goto label2;

        l6#2 = l6#2 + -1;

        goto label4;

     label2:
        if $stack7 != l1 goto label3;

        virtualinvoke l4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(l1);

        goto label4;

     label3:
        virtualinvoke l5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack7);

        l6#2 = l6#2 + 1;

        goto label1;

     label4:
        return l6#2;
    }

    public static void skipWhiteSpace(java.text.CharacterIterator)
    {
        java.text.CharacterIterator l0;
        char $stack2;

        l0 := @parameter0: java.text.CharacterIterator;

     label1:
        $stack2 = interfaceinvoke l0.<java.text.CharacterIterator: char current()>();

        if $stack2 == 32 goto label2;

        if $stack2 == 10 goto label2;

        if $stack2 == 9 goto label2;

        goto label3;

     label2:
        interfaceinvoke l0.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        return;
    }

    public static java.lang.String space(int)
    {
        int l0, $stack2;
        java.lang.String[] $stack1, $stack4;
        java.lang.String $stack3, $stack5;

        l0 := @parameter0: int;

        if l0 > 0 goto label1;

        return "";

     label1:
        $stack1 = <cck.text.StringUtil: java.lang.String[] spacers>;

        $stack2 = lengthof $stack1;

        if l0 >= $stack2 goto label2;

        $stack4 = <cck.text.StringUtil: java.lang.String[] spacers>;

        $stack5 = $stack4[l0];

        return $stack5;

     label2:
        $stack3 = staticinvoke <cck.text.StringUtil: java.lang.String dup(char,int)>(32, l0);

        return $stack3;
    }

    public static void space(java.lang.StringBuffer, int)
    {
        int $stack2, l1#1;
        java.lang.StringBuffer l0;

        l0 := @parameter0: java.lang.StringBuffer;

        l1#1 := @parameter1: int;

     label1:
        $stack2 = l1#1;

        l1#1 = l1#1 + -1;

        if $stack2 <= 0 goto label2;

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String splice(java.lang.String[], java.lang.String[])
    {
        java.lang.StringBuffer l2;
        java.lang.String[] l0, l1;
        int $stack4, $stack5, $stack13, l3#1;
        java.lang.String $stack6, $stack7, $stack11, $stack16;

        l0 := @parameter0: java.lang.String[];

        l1 := @parameter1: java.lang.String[];

        l2 = new java.lang.StringBuffer;

        specialinvoke l2.<java.lang.StringBuffer: void <init>()>();

        l3#1 = 0;

     label1:
        $stack4 = lengthof l0;

        if l3#1 >= $stack4 goto label3;

        $stack11 = l0[l3#1];

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack11);

        $stack13 = lengthof l1;

        if l3#1 >= $stack13 goto label2;

        $stack16 = l1[l3#1];

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack16);

     label2:
        l3#1 = l3#1 + 1;

        goto label1;

     label3:
        $stack5 = lengthof l1;

        if l3#1 >= $stack5 goto label4;

        $stack7 = l1[l3#1];

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack7);

        l3#1 = l3#1 + 1;

        goto label3;

     label4:
        $stack6 = virtualinvoke l2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack6;
    }

    public static java.lang.String squote(char)
    {
        java.lang.StringBuilder $stack1, $stack2, $stack3, $stack4;
        char l0;
        java.lang.String $stack5;

        l0 := @parameter0: char;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l0);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object)
    {
        java.util.Properties l1;
        java.lang.Object l2;
        java.lang.String $stack4, l0, $stack6;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.util.Properties;

        l2 := @parameter2: java.lang.Object;

        $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $stack4);

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(l0, l1);

        return $stack6;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object[])
    {
        java.lang.Object[] l2;
        int $stack4, $stack6, l3#1;
        java.lang.String l0, $stack5, $stack7, $stack9;
        java.util.Properties l1;
        java.lang.Object $stack8;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.util.Properties;

        l2 := @parameter2: java.lang.Object[];

        l3#1 = 0;

     label1:
        $stack4 = lengthof l2;

        if l3#1 >= $stack4 goto label2;

        $stack6 = l3#1 + 1;

        $stack7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($stack6);

        $stack8 = l2[l3#1];

        $stack9 = virtualinvoke $stack8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($stack7, $stack9);

        l3#1 = l3#1 + 1;

        goto label1;

     label2:
        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(l0, l1);

        return $stack5;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.String[])
    {
        java.lang.String[] l2;
        int $stack4, $stack6, l3#1;
        java.lang.String l0, $stack5, $stack7, $stack8;
        java.util.Properties l1;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.util.Properties;

        l2 := @parameter2: java.lang.String[];

        l3#1 = 0;

     label1:
        $stack4 = lengthof l2;

        if l3#1 >= $stack4 goto label2;

        $stack6 = l3#1 + 1;

        $stack7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($stack6);

        $stack8 = l2[l3#1];

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($stack7, $stack8);

        l3#1 = l3#1 + 1;

        goto label1;

     label2:
        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(l0, l1);

        return $stack5;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object, java.lang.Object)
    {
        java.util.Properties l1;
        java.lang.Object l2, l3;
        java.lang.String $stack5, $stack8, l0, $stack10;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.util.Properties;

        l2 := @parameter2: java.lang.Object;

        l3 := @parameter3: java.lang.Object;

        $stack5 = virtualinvoke l2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $stack5);

        $stack8 = virtualinvoke l3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("2", $stack8);

        $stack10 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(l0, l1);

        return $stack10;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Properties l1;
        java.lang.Object l2, l3, l4;
        java.lang.String $stack6, $stack9, $stack12, l0, $stack14;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.util.Properties;

        l2 := @parameter2: java.lang.Object;

        l3 := @parameter3: java.lang.Object;

        l4 := @parameter4: java.lang.Object;

        $stack6 = virtualinvoke l2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("1", $stack6);

        $stack9 = virtualinvoke l3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("2", $stack9);

        $stack12 = virtualinvoke l4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke l1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("3", $stack12);

        $stack14 = staticinvoke <cck.text.StringUtil: java.lang.String stringReplace(java.lang.String,java.util.Properties)>(l0, l1);

        return $stack14;
    }

    public static java.lang.String stringReplace(java.lang.String, java.util.Properties)
    {
        java.lang.String l0, $stack7;
        int $stack6, $stack12, $stack13, l5#1;
        java.lang.StringBuffer l3;
        char $stack8;
        java.util.Properties l1;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.util.Properties;

        $stack6 = virtualinvoke l0.<java.lang.String: int length()>();

        l3 = new java.lang.StringBuffer;

        specialinvoke l3.<java.lang.StringBuffer: void <init>(int)>($stack6);

        l5#1 = 0;

     label1:
        if l5#1 >= $stack6 goto label5;

        $stack8 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l5#1);

        if $stack8 != 36 goto label2;

        $stack13 = staticinvoke <cck.text.StringUtil: int replaceVar(int,int,java.lang.String,java.lang.StringBuffer,java.util.Properties)>(l5#1, $stack6, l0, l3, l1);

        l5#1 = $stack13;

        goto label4;

     label2:
        if $stack8 != 37 goto label3;

        $stack12 = staticinvoke <cck.text.StringUtil: int replaceVarQuote(int,int,java.lang.String,java.lang.StringBuffer,java.util.Properties)>(l5#1, $stack6, l0, l3, l1);

        l5#1 = $stack12;

        goto label4;

     label3:
        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack8);

     label4:
        l5#1 = l5#1 + 1;

        goto label1;

     label5:
        $stack7 = virtualinvoke l3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack7;
    }

    public static java.lang.String to0xHex(long, int)
    {
        int l2, $stack4;
        char[] l3, $stack5;
        long l0;
        java.lang.String $stack6;

        l0 := @parameter0: long;

        l2 := @parameter1: int;

        $stack4 = l2 + 2;

        l3 = newarray (char)[$stack4];

        l3[0] = 48;

        l3[1] = 120;

        $stack5 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $stack6 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(l0, l2, 2, l3, $stack5);

        return $stack6;
    }

    public static java.lang.String toBin(long, int)
    {
        int l2, $stack8, l4, $stack9, l5#1;
        char[] l3;
        java.lang.String $stack7;
        long l0, $stack10, $stack11;
        byte $stack12;
        char l6#2;

        l0 := @parameter0: long;

        l2 := @parameter1: int;

        l3 = newarray (char)[l2];

        l5#1 = 0;

     label1:
        if l5#1 >= l2 goto label4;

        $stack8 = l2 - l5#1;

        l4 = $stack8 - 1;

        $stack9 = 1 << l5#1;

        $stack10 = (long) $stack9;

        $stack11 = l0 & $stack10;

        $stack12 = $stack11 cmp 0L;

        if $stack12 != 0 goto label2;

        l6#2 = 48;

        goto label3;

     label2:
        l6#2 = 49;

     label3:
        l3[l4] = l6#2;

        l5#1 = l5#1 + 1;

        goto label1;

     label4:
        $stack7 = new java.lang.String;

        specialinvoke $stack7.<java.lang.String: void <init>(char[])>(l3);

        return $stack7;
    }

    public static char toBit(boolean)
    {
        boolean l0#1;
        char l0#2;

        l0#1 := @parameter0: boolean;

        if l0#1 == 0 goto label1;

        l0#2 = 49;

        goto label2;

     label1:
        l0#2 = 48;

     label2:
        return l0#2;
    }

    public static java.lang.String toDecimal(long, int)
    {
        java.lang.StringBuffer l3;
        int $stack4, l2#2;
        java.lang.StringBuilder $stack6, $stack7, $stack9;
        java.lang.String $stack8, $stack10;
        long $stack11, l0#1;

        l0#1 := @parameter0: long;

        l2#2 := @parameter1: int;

        l3 = new java.lang.StringBuffer;

        $stack4 = 10 + l2#2;

        specialinvoke l3.<java.lang.StringBuffer: void <init>(int)>($stack4);

     label1:
        if l2#2 <= 0 goto label2;

        $stack11 = l0#1 % 10L;

        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($stack11);

        l2#2 = l2#2 + -1;

        l0#1 = l0#1 / 10L;

        if l2#2 != 0 goto label1;

        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label1;

     label2:
        virtualinvoke l3.<java.lang.StringBuffer: java.lang.StringBuffer reverse()>();

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0#1);

        $stack8 = virtualinvoke l3.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public static java.lang.String toFixedFloat(float, int)
    {
        boolean $stack5, $stack6;
        java.lang.StringBuffer l2;
        int l1, $stack7;
        long l3;
        byte $stack9;
        float $stack10, $stack13, l0#1, l0#2;
        double $stack11;
        java.lang.String $stack12;

        l0#1 := @parameter0: float;

        l1 := @parameter1: int;

        $stack5 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(l0#1);

        if $stack5 == 0 goto label1;

        return "(inf)";

     label1:
        $stack6 = staticinvoke <java.lang.Float: boolean isNaN(float)>(l0#1);

        if $stack6 == 0 goto label2;

        return "(NaN)";

     label2:
        l2 = new java.lang.StringBuffer;

        $stack7 = l1 + 5;

        specialinvoke l2.<java.lang.StringBuffer: void <init>(int)>($stack7);

        l3 = (long) l0#1;

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l3);

        $stack9 = l0#1 cmpl 0.0F;

        if $stack9 < 0 goto label3;

        $stack13 = (float) l3;

        l0#2 = l0#1 - $stack13;

        goto label4;

     label3:
        $stack10 = (float) l3;

        l0#2 = $stack10 - l0#1;

     label4:
        $stack11 = (double) l0#2;

        staticinvoke <cck.text.StringUtil: void appendFract(java.lang.StringBuffer,double,int)>(l2, $stack11, l1);

        $stack12 = virtualinvoke l2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack12;
    }

    public static java.lang.String toHex(long, int)
    {
        long l0;
        int l2;
        char[] $stack3, $stack4;
        java.lang.String $stack5;

        l0 := @parameter0: long;

        l2 := @parameter1: int;

        $stack4 = newarray (char)[l2];

        $stack3 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(l0, l2, 0, $stack4, $stack3);

        return $stack5;
    }

    public static void toHex(java.lang.StringBuffer, long, int)
    {
        long l1, $stack5, $stack8;
        int $stack4, $stack7, $stack9, $stack10, l3#1, l3#2;
        byte $stack6;
        java.lang.StringBuffer l0;
        char[] $stack11;
        char $stack12;
        java.lang.String $stack15, $stack16;

        l0 := @parameter0: java.lang.StringBuffer;

        l1 := @parameter1: long;

        l3#1 := @parameter2: int;

        $stack4 = l3#1 * 4;

        $stack5 = 1L << $stack4;

        $stack6 = l1 cmp $stack5;

        if $stack6 <= 0 goto label1;

        $stack15 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        $stack16 = virtualinvoke $stack15.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack16);

        return;

     label1:
        l3#2 = l3#1 - 1;

     label2:
        if l3#2 < 0 goto label3;

        $stack11 = <cck.text.CharUtil: char[] HEX_CHARS>;

        $stack7 = l3#2 * 4;

        $stack8 = l1 >> $stack7;

        $stack9 = (int) $stack8;

        $stack10 = $stack9 & 15;

        $stack12 = $stack11[$stack10];

        virtualinvoke l0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack12);

        l3#2 = l3#2 + -1;

        goto label2;

     label3:
        return;
    }

    public static java.util.List toList(java.lang.String)
    {
        java.util.LinkedList l1;
        java.lang.String $stack3, $stack7, $stack8, $stack16, $stack17, l0#1;
        boolean $stack4;
        java.text.StringCharacterIterator l2;
        java.lang.StringBuffer $stack5, $stack19, l0#2;
        char $stack6, $stack10, $stack11;

        l0#1 := @parameter0: java.lang.String;

        l1 = new java.util.LinkedList;

        specialinvoke l1.<java.util.LinkedList: void <init>()>();

        $stack3 = "";

        $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(l0#1);

        if $stack4 == 0 goto label1;

        return l1;

     label1:
        l2 = new java.text.StringCharacterIterator;

        specialinvoke l2.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(l0#1);

        $stack5 = new java.lang.StringBuffer;

        specialinvoke $stack5.<java.lang.StringBuffer: void <init>(int)>(32);

        l0#2 = $stack5;

     label2:
        $stack6 = interfaceinvoke l2.<java.text.CharacterIterator: char current()>();

        if $stack6 == 65535 goto label5;

        $stack10 = interfaceinvoke l2.<java.text.CharacterIterator: char current()>();

        if $stack10 != 44 goto label3;

        $stack16 = virtualinvoke l0#2.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack17 = virtualinvoke $stack16.<java.lang.String: java.lang.String trim()>();

        virtualinvoke l1.<java.util.LinkedList: boolean add(java.lang.Object)>($stack17);

        $stack19 = new java.lang.StringBuffer;

        specialinvoke $stack19.<java.lang.StringBuffer: void <init>(int)>(32);

        l0#2 = $stack19;

        goto label4;

     label3:
        $stack11 = interfaceinvoke l2.<java.text.CharacterIterator: char current()>();

        virtualinvoke l0#2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack11);

     label4:
        interfaceinvoke l2.<java.text.CharacterIterator: char next()>();

        goto label2;

     label5:
        $stack7 = virtualinvoke l0#2.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack8 = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>();

        virtualinvoke l1.<java.util.LinkedList: boolean add(java.lang.Object)>($stack8);

        return l1;
    }

    public static java.lang.String toLowHex(long, int)
    {
        long l0;
        int l2;
        char[] $stack3, $stack4;
        java.lang.String $stack5;

        l0 := @parameter0: long;

        l2 := @parameter1: int;

        $stack4 = newarray (char)[l2];

        $stack3 = <cck.text.CharUtil: char[] LOW_HEX_CHARS>;

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String convertToHex(long,int,int,char[],char[])>(l0, l2, 0, $stack4, $stack3);

        return $stack5;
    }

    public static java.lang.String toMultirepString(int, int)
    {
        java.lang.StringBuffer l2;
        int l1, $stack5, $stack6, l0, $stack8, $stack9, l3#1;
        long $stack10;
        java.lang.String $stack15;
        boolean $stack17;
        char l4#2;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        l2 = new java.lang.StringBuffer;

        $stack5 = l1 * 3;

        $stack6 = $stack5 + 8;

        specialinvoke l2.<java.lang.StringBuffer: void <init>(int)>($stack6);

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");

        $stack10 = (long) l0;

        $stack8 = l1 + 3;

        $stack9 = $stack8 / 4;

        staticinvoke <cck.text.StringUtil: void toHex(java.lang.StringBuffer,long,int)>(l2, $stack10, $stack9);

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        l3#1 = l1 - 1;

     label1:
        if l3#1 < 0 goto label4;

        $stack17 = staticinvoke <cck.util.Arithmetic: boolean getBit(int,int)>(l0, l3#1);

        if $stack17 == 0 goto label2;

        l4#2 = 49;

        goto label3;

     label2:
        l4#2 = 48;

     label3:
        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(l4#2);

        l3#1 = l3#1 + -1;

        goto label1;

     label4:
        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(l0);

        virtualinvoke l2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        if l1 >= 9 goto label5;

        staticinvoke <cck.text.StringUtil: void appendChar(int,java.lang.StringBuffer)>(l0, l2);

     label5:
        $stack15 = virtualinvoke l2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack15;
    }

    public static java.util.List trimLines(java.lang.String, int, int)
    {
        java.util.LinkedList l3;
        java.lang.String l0, $stack11, $stack15, $stack24;
        int $stack10, $stack12, $stack14, l2, $stack23, $stack26, $stack32, l1#1, l6#2, l8#6, l9#7;
        char $stack18;
        boolean $stack19;
        java.lang.StringBuffer $stack25, $stack31, l5#4, l7#5;

        l0 := @parameter0: java.lang.String;

        l1#1 := @parameter1: int;

        l2 := @parameter2: int;

        l3 = new java.util.LinkedList;

        specialinvoke l3.<java.util.LinkedList: void <init>()>();

        $stack10 = virtualinvoke l0.<java.lang.String: int length()>();

        l6#2 = l1#1;

        $stack11 = staticinvoke <cck.text.StringUtil: java.lang.String space(int)>(l1#1);

        l5#4 = new java.lang.StringBuffer;

        $stack12 = virtualinvoke l0.<java.lang.String: int length()>();

        specialinvoke l5#4.<java.lang.StringBuffer: void <init>(int)>($stack12);

        l7#5 = l5#4;

        virtualinvoke l5#4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack11);

        l8#6 = -1;

        l9#7 = 0;

     label1:
        if l9#7 >= $stack10 goto label5;

        $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l9#7);

        if $stack18 != 10 goto label2;

        $stack31 = staticinvoke <cck.text.StringUtil: java.lang.StringBuffer newBuffer(java.lang.String,java.lang.StringBuffer,java.util.List)>($stack11, l7#5, l3);

        l7#5 = $stack31;

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: int length()>();

        l6#2 = $stack32;

        goto label4;

     label2:
        $stack19 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack18);

        if $stack19 == 0 goto label3;

        l8#6 = l6#2;

     label3:
        virtualinvoke l7#5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack18);

        l6#2 = l6#2 + 1;

        if l6#2 <= l2 goto label4;

        if l8#6 < 0 goto label4;

        $stack23 = l8#6 + 1;

        $stack24 = virtualinvoke l7#5.<java.lang.StringBuffer: java.lang.String substring(int)>($stack23);

        virtualinvoke l7#5.<java.lang.StringBuffer: void setLength(int)>(l8#6);

        $stack25 = staticinvoke <cck.text.StringUtil: java.lang.StringBuffer newBuffer(java.lang.String,java.lang.StringBuffer,java.util.List)>($stack24, l7#5, l3);

        l7#5 = $stack25;

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuffer: int length()>();

        l6#2 = $stack26;

     label4:
        l9#7 = l9#7 + 1;

        goto label1;

     label5:
        $stack14 = virtualinvoke l7#5.<java.lang.StringBuffer: int length()>();

        if $stack14 <= 0 goto label6;

        $stack15 = virtualinvoke l7#5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke l3.<java.util.LinkedList: boolean add(java.lang.Object)>($stack15);

     label6:
        return l3;
    }

    public static java.lang.String trimquotes(java.lang.String)
    {
        java.lang.String l0, $stack8;
        int $stack3, $stack4, $stack6, l1#1, l2#2;
        char $stack5, $stack7;

        l0 := @parameter0: java.lang.String;

        $stack3 = virtualinvoke l0.<java.lang.String: int length()>();

        if $stack3 != 0 goto label1;

        return l0;

     label1:
        l1#1 = 0;

        $stack4 = virtualinvoke l0.<java.lang.String: int length()>();

        l2#2 = $stack4;

        $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0);

        if $stack5 != 34 goto label2;

        l1#1 = 0 + 1;

     label2:
        $stack6 = $stack4 - 1;

        $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6);

        if $stack7 != 34 goto label3;

        l2#2 = $stack4 + -1;

     label3:
        if l1#1 >= l2#2 goto label4;

        $stack8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l1#1, l2#2);

        return $stack8;

     label4:
        return "";
    }
}
