public class avrora.sim.mcu.SPI$SPDReg$TransmitRegister extends avrora.sim.RWRegister
{
    final avrora.sim.mcu.SPI$SPDReg this$1;

    protected void <init>(avrora.sim.mcu.SPI$SPDReg)
    {
        avrora.sim.mcu.SPI$SPDReg$TransmitRegister l0;
        avrora.sim.mcu.SPI$SPDReg l1;

        l0 := @this: avrora.sim.mcu.SPI$SPDReg$TransmitRegister;

        l1 := @parameter0: avrora.sim.mcu.SPI$SPDReg;

        l0.<avrora.sim.mcu.SPI$SPDReg$TransmitRegister: avrora.sim.mcu.SPI$SPDReg this$1> = l1;

        specialinvoke l0.<avrora.sim.RWRegister: void <init>()>();

        return;
    }

    public void write(byte)
    {
        avrora.sim.mcu.SPI$SPDReg$TransmitRegister l0;
        byte l1;
        avrora.sim.mcu.SPI$SPDReg $stack2;
        avrora.sim.mcu.SPI $stack3;
        avrora.sim.mcu.SPI$TransferEvent $stack4;

        l0 := @this: avrora.sim.mcu.SPI$SPDReg$TransmitRegister;

        l1 := @parameter0: byte;

        specialinvoke l0.<avrora.sim.RWRegister: void write(byte)>(l1);

        $stack2 = l0.<avrora.sim.mcu.SPI$SPDReg$TransmitRegister: avrora.sim.mcu.SPI$SPDReg this$1>;

        $stack3 = $stack2.<avrora.sim.mcu.SPI$SPDReg: avrora.sim.mcu.SPI this$0>;

        $stack4 = $stack3.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$TransferEvent transferEvent>;

        virtualinvoke $stack4.<avrora.sim.mcu.SPI$TransferEvent: void enableTransfer()>();

        return;
    }
}
