public abstract class avrora.core.ProgramReader extends cck.help.HelpCategory
{
    public final cck.util.Option$Str ARCH;
    public final cck.util.Option$List INDIRECT_EDGES;

    protected void <init>(java.lang.String)
    {
        avrora.core.ProgramReader l0;
        java.lang.String l1, $stack4;
        cck.util.Option$Str $stack2;
        cck.util.Option$List $stack3;
        cck.util.Options $stack5;

        l0 := @this: avrora.core.ProgramReader;

        l1 := @parameter0: java.lang.String;

        specialinvoke l0.<cck.help.HelpCategory: void <init>(java.lang.String,java.lang.String)>("reader", l1);

        $stack2 = virtualinvoke l0.<avrora.core.ProgramReader: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("arch", "avr", "This option specifies the name of the instruction set architecture for the specified program. This architecture option is used to retrieve an appropriate disassembler and interpreter for the program.");

        l0.<avrora.core.ProgramReader: cck.util.Option$Str ARCH> = $stack2;

        $stack3 = virtualinvoke l0.<avrora.core.ProgramReader: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("indirect-edges", "", "This option can be used to specify the possible targets of indirect calls and jumps within a program, which may be needed in performing stack analysis or building a control flow graph. Each element of the list is a pair of program addresses separated by a colon, where a program address can be a label or a hexadecimal number preceded by \"0x\". The first program address is the address of the indirect call or jump instruction and the second program address is a possible target.");

        l0.<avrora.core.ProgramReader: cck.util.Option$List INDIRECT_EDGES> = $stack3;

        $stack4 = l0.<avrora.core.ProgramReader: java.lang.String help>;

        virtualinvoke l0.<avrora.core.ProgramReader: void addSection(java.lang.String,java.lang.String)>("OVERVIEW", $stack4);

        $stack5 = l0.<avrora.core.ProgramReader: cck.util.Options options>;

        virtualinvoke l0.<avrora.core.ProgramReader: void addOptionSection(java.lang.String,cck.util.Options)>("Help for specific options is below.", $stack5);

        return;
    }

    protected void addIndirectEdges(avrora.core.Program)
    {
        cck.util.Option$List $stack5;
        java.util.List $stack6;
        java.util.Iterator $stack7;
        boolean $stack8;
        java.lang.Object $stack9;
        int $stack10, $stack14, $stack17, l2#4;
        avrora.core.Program l1;
        avrora.core.SourceMapping $stack11;
        java.lang.String $stack12, $stack15, $stack21, $stack23, l2#3;
        avrora.core.SourceMapping$Location $stack13, $stack16;
        java.lang.StringBuilder $stack19, $stack20, $stack22;
        cck.util.Util$InternalError $stack24;
        avrora.core.ProgramReader l0#1;

        l0#1 := @this: avrora.core.ProgramReader;

        l1 := @parameter0: avrora.core.Program;

        $stack5 = l0#1.<avrora.core.ProgramReader: cck.util.Option$List INDIRECT_EDGES>;

        $stack6 = virtualinvoke $stack5.<cck.util.Option$List: java.util.List get()>();

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke $stack7.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        $stack9 = interfaceinvoke $stack7.<java.util.Iterator: java.lang.Object next()>();

        l2#3 = (java.lang.String) $stack9;

        $stack10 = virtualinvoke l2#3.<java.lang.String: int indexOf(int)>(58);

        if $stack10 > 0 goto label2;

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid indirect edge format: ");

        $stack21 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(l2#3);

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack23);

        throw $stack24;

     label2:
        $stack11 = virtualinvoke l1.<avrora.core.Program: avrora.core.SourceMapping getSourceMapping()>();

        $stack12 = virtualinvoke l2#3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack10);

        $stack13 = virtualinvoke $stack11.<avrora.core.SourceMapping: avrora.core.SourceMapping$Location getLocation(java.lang.String)>($stack12);

        $stack14 = $stack10 + 1;

        $stack15 = virtualinvoke l2#3.<java.lang.String: java.lang.String substring(int)>($stack14);

        $stack16 = virtualinvoke $stack11.<avrora.core.SourceMapping: avrora.core.SourceMapping$Location getLocation(java.lang.String)>($stack15);

        l2#4 = $stack16.<avrora.core.SourceMapping$Location: int lma_addr>;

        $stack17 = $stack13.<avrora.core.SourceMapping$Location: int lma_addr>;

        virtualinvoke l1.<avrora.core.Program: void addIndirectEdge(int,int)>($stack17, l2#4);

        goto label1;

     label3:
        return;
    }

    public avrora.arch.AbstractArchitecture getArchitecture()
    {
        avrora.core.ProgramReader l0;
        cck.util.Option$Str $stack1;
        java.lang.String $stack2;
        avrora.arch.AbstractArchitecture $stack3;

        l0 := @this: avrora.core.ProgramReader;

        $stack1 = l0.<avrora.core.ProgramReader: cck.util.Option$Str ARCH>;

        $stack2 = virtualinvoke $stack1.<cck.util.Option$Str: java.lang.String get()>();

        $stack3 = staticinvoke <avrora.arch.ArchitectureRegistry: avrora.arch.AbstractArchitecture getArchitecture(java.lang.String)>($stack2);

        return $stack3;
    }

    public abstract avrora.core.Program read(java.lang.String[]) throws java.lang.Exception;
}
