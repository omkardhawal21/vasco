public class avrora.sim.state.RegisterUtil$PermutedView extends java.lang.Object implements avrora.sim.state.RegisterView
{
    protected final avrora.sim.state.RegisterView reg;
    protected final byte[] bits;

    public void <init>(avrora.sim.state.RegisterView, byte[])
    {
        avrora.sim.state.RegisterUtil$PermutedView l0;
        byte[] l2;
        avrora.sim.state.RegisterView l1;

        l0 := @this: avrora.sim.state.RegisterUtil$PermutedView;

        l1 := @parameter0: avrora.sim.state.RegisterView;

        l2 := @parameter1: byte[];

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits> = l2;

        l0.<avrora.sim.state.RegisterUtil$PermutedView: avrora.sim.state.RegisterView reg> = l1;

        return;
    }

    public int getValue()
    {
        avrora.sim.state.RegisterUtil$PermutedView l0;
        avrora.sim.state.RegisterView $stack4;
        int $stack5, $stack7, $stack10, $stack11, $stack12, l2#1, l3#2;
        byte[] $stack6, $stack8;
        byte $stack9;

        l0 := @this: avrora.sim.state.RegisterUtil$PermutedView;

        $stack4 = l0.<avrora.sim.state.RegisterUtil$PermutedView: avrora.sim.state.RegisterView reg>;

        $stack5 = interfaceinvoke $stack4.<avrora.sim.state.RegisterView: int getValue()>();

        l2#1 = 0;

        l3#2 = 0;

     label1:
        $stack6 = l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits>;

        $stack7 = lengthof $stack6;

        if l3#2 >= $stack7 goto label2;

        $stack8 = l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits>;

        $stack9 = $stack8[l3#2];

        $stack10 = $stack5 >> $stack9;

        $stack11 = $stack10 & 1;

        $stack12 = $stack11 << l3#2;

        l2#1 = l2#1 | $stack12;

        l3#2 = l3#2 + 1;

        goto label1;

     label2:
        return l2#1;
    }

    public int getWidth()
    {
        avrora.sim.state.RegisterUtil$PermutedView l0;
        byte[] $stack1;
        int $stack2;

        l0 := @this: avrora.sim.state.RegisterUtil$PermutedView;

        $stack1 = l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits>;

        $stack2 = lengthof $stack1;

        return $stack2;
    }

    public void registerValueSetListener(avrora.sim.state.RegisterView$RegisterValueSetListener)
    {
        java.lang.UnsupportedOperationException $stack2;
        avrora.sim.state.RegisterUtil$PermutedView l0;
        avrora.sim.state.RegisterView$RegisterValueSetListener l1;

        l0 := @this: avrora.sim.state.RegisterUtil$PermutedView;

        l1 := @parameter0: avrora.sim.state.RegisterView$RegisterValueSetListener;

        $stack2 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $stack2;
    }

    public void setValue(int)
    {
        avrora.sim.state.RegisterUtil$PermutedView l0;
        avrora.sim.state.RegisterView $stack4, $stack8;
        int $stack5, $stack7, l1, $stack9, $stack12, $stack15, $stack16, $stack17, $stack18, l2#1, l3#2;
        byte[] $stack6, $stack10, $stack13;
        byte $stack11, $stack14;

        l0 := @this: avrora.sim.state.RegisterUtil$PermutedView;

        l1 := @parameter0: int;

        $stack4 = l0.<avrora.sim.state.RegisterUtil$PermutedView: avrora.sim.state.RegisterView reg>;

        $stack5 = interfaceinvoke $stack4.<avrora.sim.state.RegisterView: int getValue()>();

        l2#1 = $stack5;

        l3#2 = 0;

     label1:
        $stack6 = l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits>;

        $stack7 = lengthof $stack6;

        if l3#2 >= $stack7 goto label2;

        $stack9 = l1 >> l3#2;

        $stack12 = $stack9 & 1;

        $stack10 = l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits>;

        $stack11 = $stack10[l3#2];

        $stack18 = $stack12 << $stack11;

        $stack13 = l0.<avrora.sim.state.RegisterUtil$PermutedView: byte[] bits>;

        $stack14 = $stack13[l3#2];

        $stack15 = 1 << $stack14;

        $stack16 = $stack15 ^ -1;

        $stack17 = l2#1 & $stack16;

        l2#1 = $stack18 | $stack17;

        l3#2 = l3#2 + 1;

        goto label1;

     label2:
        $stack8 = l0.<avrora.sim.state.RegisterUtil$PermutedView: avrora.sim.state.RegisterView reg>;

        interfaceinvoke $stack8.<avrora.sim.state.RegisterView: void setValue(int)>(l2#1);

        return;
    }
}
