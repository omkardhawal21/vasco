public class avrora.syntax.objdump.ObjDump2ProgramReader extends avrora.core.ProgramReader
{

    public void <init>()
    {
        avrora.syntax.objdump.ObjDump2ProgramReader l0;

        l0 := @this: avrora.syntax.objdump.ObjDump2ProgramReader;

        specialinvoke l0.<avrora.core.ProgramReader: void <init>(java.lang.String)>("The \"odpp\" input format reads programs that are the output of the \"avr-objdump\" utility provided with avr-binutils and that have been preprocessed with Avrora\'s preprocessor utility.\nThe use of this format is deprecated - use ELF instead!");

        return;
    }

    public avrora.core.Program read(java.lang.String[]) throws java.lang.Exception
    {
        int $stack3, $stack4;
        avrora.arch.AbstractArchitecture $stack5;
        avrora.arch.legacy.LegacyArchitecture $stack6;
        java.lang.String $stack7, $stack10;
        avrora.syntax.objdump.ObjDumpParser $stack8;
        java.io.FileReader $stack9;
        avrora.core.Program $stack11;
        java.io.File $stack13;
        avrora.syntax.RawModule $stack17;
        avrora.syntax.objdump.ObjDump2ProgramReader l0#1;
        java.lang.String[] l1#2;

        l0#1 := @this: avrora.syntax.objdump.ObjDump2ProgramReader;

        l1#2 := @parameter0: java.lang.String[];

        $stack3 = lengthof l1#2;

        if $stack3 != 0 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("no input files");

     label1:
        $stack4 = lengthof l1#2;

        if $stack4 == 1 goto label2;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type \"odpp\" accepts only one file at a time.");

     label2:
        $stack5 = virtualinvoke l0#1.<avrora.syntax.objdump.ObjDump2ProgramReader: avrora.arch.AbstractArchitecture getArchitecture()>();

        $stack6 = <avrora.arch.legacy.LegacyArchitecture: avrora.arch.legacy.LegacyArchitecture INSTANCE>;

        if $stack5 == $stack6 goto label3;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type  \"odpp\" parses only the \"legacy\" architecture.");

     label3:
        $stack13 = new java.io.File;

        $stack7 = l1#2[0];

        specialinvoke $stack13.<java.io.File: void <init>(java.lang.String)>($stack7);

        $stack17 = new avrora.syntax.RawModule;

        specialinvoke $stack17.<avrora.syntax.RawModule: void <init>(boolean,boolean)>(1, 1);

        $stack8 = new avrora.syntax.objdump.ObjDumpParser;

        $stack9 = new java.io.FileReader;

        specialinvoke $stack9.<java.io.FileReader: void <init>(java.io.File)>($stack13);

        $stack10 = virtualinvoke $stack13.<java.io.File: java.lang.String getName()>();

        specialinvoke $stack8.<avrora.syntax.objdump.ObjDumpParser: void <init>(java.io.Reader,avrora.syntax.RawModule,java.lang.String)>($stack9, $stack17, $stack10);

        virtualinvoke $stack8.<avrora.syntax.objdump.ObjDumpParser: void Module()>();

        $stack11 = virtualinvoke $stack17.<avrora.syntax.RawModule: avrora.core.Program build()>();

        virtualinvoke l0#1.<avrora.syntax.objdump.ObjDump2ProgramReader: void addIndirectEdges(avrora.core.Program)>($stack11);

        return $stack11;
    }
}
