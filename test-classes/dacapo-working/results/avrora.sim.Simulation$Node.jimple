public class avrora.sim.Simulation$Node extends java.lang.Object
{
    public final int id;
    protected final avrora.core.LoadableProgram path;
    protected final avrora.sim.platform.PlatformFactory platformFactory;
    protected final java.util.LinkedList monitors;
    protected final java.util.LinkedList guiMonitors;
    protected avrora.sim.platform.Platform platform;
    protected avrora.sim.Simulator simulator;
    protected avrora.sim.SimulatorThread thread;
    final avrora.sim.Simulation this$0;

    protected void <init>(avrora.sim.Simulation, int, avrora.sim.platform.PlatformFactory, avrora.core.LoadableProgram)
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulation l1;
        int l2;
        avrora.sim.platform.PlatformFactory l3;
        avrora.core.LoadableProgram l4;
        java.util.LinkedList $stack5, $stack6;

        l0 := @this: avrora.sim.Simulation$Node;

        l1 := @parameter0: avrora.sim.Simulation;

        l2 := @parameter1: int;

        l3 := @parameter2: avrora.sim.platform.PlatformFactory;

        l4 := @parameter3: avrora.core.LoadableProgram;

        l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0> = l1;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<avrora.sim.Simulation$Node: int id> = l2;

        l0.<avrora.sim.Simulation$Node: avrora.sim.platform.PlatformFactory platformFactory> = l3;

        l0.<avrora.sim.Simulation$Node: avrora.core.LoadableProgram path> = l4;

        $stack5 = new java.util.LinkedList;

        specialinvoke $stack5.<java.util.LinkedList: void <init>()>();

        l0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors> = $stack5;

        $stack6 = new java.util.LinkedList;

        specialinvoke $stack6.<java.util.LinkedList: void <init>()>();

        l0.<avrora.sim.Simulation$Node: java.util.LinkedList guiMonitors> = $stack6;

        return;
    }

    public void addGuiMonitor(avrora.sim.Simulation$GuiMonitor)
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulation$GuiMonitor l1;
        java.util.LinkedList $stack2;

        l0 := @this: avrora.sim.Simulation$Node;

        l1 := @parameter0: avrora.sim.Simulation$GuiMonitor;

        $stack2 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList guiMonitors>;

        virtualinvoke $stack2.<java.util.LinkedList: boolean add(java.lang.Object)>(l1);

        return;
    }

    protected void addMonitors()
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulation $stack3, $stack12;
        java.util.LinkedList $stack4, $stack7, $stack20;
        java.util.Iterator $stack5, $stack8;
        boolean $stack6, $stack9;
        java.lang.Object $stack10, $stack15;
        avrora.sim.Simulator $stack11, $stack16;
        avrora.sim.Simulation$GuiMonitor $stack13;
        avrora.monitors.MonitorFactory $stack17;
        avrora.monitors.Monitor $stack18;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack3 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack4 = $stack3.<avrora.sim.Simulation: java.util.LinkedList monitorFactoryList>;

        $stack5 = virtualinvoke $stack4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke $stack5.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack15 = interfaceinvoke $stack5.<java.util.Iterator: java.lang.Object next()>();

        $stack17 = (avrora.monitors.MonitorFactory) $stack15;

        $stack16 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        $stack18 = virtualinvoke $stack17.<avrora.monitors.MonitorFactory: avrora.monitors.Monitor newMonitor(avrora.sim.Simulator)>($stack16);

        if $stack18 == null goto label2;

        $stack20 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        virtualinvoke $stack20.<java.util.LinkedList: boolean add(java.lang.Object)>($stack18);

     label2:
        goto label1;

     label3:
        $stack7 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList guiMonitors>;

        $stack8 = virtualinvoke $stack7.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $stack9 = interfaceinvoke $stack8.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label5;

        $stack10 = interfaceinvoke $stack8.<java.util.Iterator: java.lang.Object next()>();

        $stack13 = (avrora.sim.Simulation$GuiMonitor) $stack10;

        $stack12 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack11 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        interfaceinvoke $stack13.<avrora.sim.Simulation$GuiMonitor: void construct(avrora.sim.Simulation,avrora.sim.Simulation$Node,avrora.sim.Simulator)>($stack12, l0, $stack11);

        goto label4;

     label5:
        return;
    }

    public java.util.List getGuiMonitors()
    {
        avrora.sim.Simulation$Node l0;
        java.util.LinkedList $stack1;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList guiMonitors>;

        return $stack1;
    }

    public java.util.List getMonitors()
    {
        avrora.sim.Simulation$Node l0;
        java.util.LinkedList $stack1;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList monitors>;

        return $stack1;
    }

    public avrora.core.LoadableProgram getProgram()
    {
        avrora.sim.Simulation$Node l0;
        avrora.core.LoadableProgram $stack1;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: avrora.core.LoadableProgram path>;

        return $stack1;
    }

    public avrora.sim.Simulation getSimulation()
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulation $stack1;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        return $stack1;
    }

    public avrora.sim.Simulator getSimulator()
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulator $stack1;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        return $stack1;
    }

    public avrora.sim.SimulatorThread getThread()
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.SimulatorThread $stack1;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: avrora.sim.SimulatorThread thread>;

        return $stack1;
    }

    protected void instantiate()
    {
        avrora.sim.Simulation$Node l0;
        avrora.core.LoadableProgram $stack1;
        avrora.sim.platform.PlatformFactory $stack2;
        int $stack3;
        avrora.sim.Simulation $stack4, $stack10;
        avrora.core.Program $stack5;
        avrora.sim.platform.Platform $stack6, $stack7;
        avrora.sim.mcu.Microcontroller $stack8;
        avrora.sim.Simulator $stack9;
        avrora.sim.clock.Synchronizer $stack11;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack2 = l0.<avrora.sim.Simulation$Node: avrora.sim.platform.PlatformFactory platformFactory>;

        $stack3 = l0.<avrora.sim.Simulation$Node: int id>;

        $stack4 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack1 = l0.<avrora.sim.Simulation$Node: avrora.core.LoadableProgram path>;

        $stack5 = virtualinvoke $stack1.<avrora.core.LoadableProgram: avrora.core.Program getProgram()>();

        $stack6 = interfaceinvoke $stack2.<avrora.sim.platform.PlatformFactory: avrora.sim.platform.Platform newPlatform(int,avrora.sim.Simulation,avrora.core.Program)>($stack3, $stack4, $stack5);

        l0.<avrora.sim.Simulation$Node: avrora.sim.platform.Platform platform> = $stack6;

        $stack7 = l0.<avrora.sim.Simulation$Node: avrora.sim.platform.Platform platform>;

        $stack8 = virtualinvoke $stack7.<avrora.sim.platform.Platform: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        $stack9 = interfaceinvoke $stack8.<avrora.sim.mcu.Microcontroller: avrora.sim.Simulator getSimulator()>();

        l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator> = $stack9;

        specialinvoke l0.<avrora.sim.Simulation$Node: void processTimeout()>();

        specialinvoke l0.<avrora.sim.Simulation$Node: void processInterruptSched()>();

        specialinvoke l0.<avrora.sim.Simulation$Node: void processEepromLoad()>();

        $stack10 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack11 = $stack10.<avrora.sim.Simulation: avrora.sim.clock.Synchronizer synchronizer>;

        virtualinvoke $stack11.<avrora.sim.clock.Synchronizer: void addNode(avrora.sim.Simulation$Node)>(l0);

        return;
    }

    private void processEepromLoad()
    {
        avrora.sim.Simulation $stack4, $stack11, $stack23;
        cck.util.Option$Str $stack5, $stack12, $stack24;
        boolean $stack6;
        avrora.sim.platform.Platform $stack7;
        avrora.sim.mcu.Microcontroller $stack8;
        avrora.sim.mcu.AtmelMicrocontroller $stack9;
        avrora.sim.mcu.AtmelInternalDevice $stack10;
        avrora.sim.mcu.EEPROM l1;
        java.io.FileInputStream l2;
        java.lang.String $stack13, $stack26;
        int $stack14, $stack15, $stack16, $stack18, $stack19, $stack20, l3#3, $stack17#8;
        byte[] $stack28;
        java.io.IOException $stack30;
        cck.util.Util$Unexpected $stack31;
        avrora.sim.Simulation$Node l0#1;

        l0#1 := @this: avrora.sim.Simulation$Node;

        $stack4 = l0#1.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack5 = $stack4.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE>;

        $stack6 = virtualinvoke $stack5.<cck.util.Option$Str: boolean isBlank()>();

        if $stack6 != 0 goto label8;

        $stack7 = l0#1.<avrora.sim.Simulation$Node: avrora.sim.platform.Platform platform>;

        $stack8 = virtualinvoke $stack7.<avrora.sim.platform.Platform: avrora.sim.mcu.Microcontroller getMicrocontroller()>();

        $stack9 = (avrora.sim.mcu.AtmelMicrocontroller) $stack8;

        $stack10 = virtualinvoke $stack9.<avrora.sim.mcu.AtmelMicrocontroller: avrora.sim.mcu.AtmelInternalDevice getDevice(java.lang.String)>("eeprom");

        l1 = (avrora.sim.mcu.EEPROM) $stack10;

     label1:
        l2 = new java.io.FileInputStream;

        $stack11 = l0#1.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack12 = $stack11.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE>;

        $stack13 = virtualinvoke $stack12.<cck.util.Option$Str: java.lang.String get()>();

        specialinvoke l2.<java.io.FileInputStream: void <init>(java.lang.String)>($stack13);

        $stack14 = virtualinvoke l2.<java.io.FileInputStream: int available()>();

        $stack15 = virtualinvoke l1.<avrora.sim.mcu.EEPROM: int getSize()>();

        if $stack14 <= $stack15 goto label2;

        virtualinvoke l2.<java.io.FileInputStream: void close()>();

        $stack23 = l0#1.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack24 = $stack23.<avrora.sim.Simulation: cck.util.Option$Str EELOADIMAGE>;

        $stack26 = virtualinvoke $stack24.<cck.util.Option$Str: java.lang.String get()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("EEPROM image too large", $stack26);

     label2:
        $stack16 = virtualinvoke l2.<java.io.FileInputStream: int available()>();

        $stack28 = newarray (byte)[$stack16];

        l3#3 = 0;

     label3:
        $stack17#8 = lengthof $stack28;

        if l3#3 >= $stack17#8 goto label4;

        $stack18 = lengthof $stack28;

        $stack19 = $stack18 - l3#3;

        $stack20 = virtualinvoke l2.<java.io.FileInputStream: int read(byte[],int,int)>($stack28, l3#3, $stack19);

        l3#3 = l3#3 + $stack20;

        goto label3;

     label4:
        virtualinvoke l2.<java.io.FileInputStream: void close()>();

     label5:
        goto label7;

     label6:
        $stack30 := @caughtexception;

        $stack31 = staticinvoke <cck.util.Util: cck.util.Util$Unexpected unexpected(java.lang.Throwable)>($stack30);

        throw $stack31;

     label7:
        virtualinvoke l1.<avrora.sim.mcu.EEPROM: void setContent(byte[])>($stack28);

     label8:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    private void processInterruptSched()
    {
        avrora.sim.Simulation$Node l0;
        int $stack1;
        avrora.sim.Simulation $stack2, $stack6;
        cck.util.Option$Str $stack3, $stack7;
        boolean $stack4;
        avrora.sim.util.InterruptScheduler $stack5;
        java.lang.String $stack8;
        avrora.sim.Simulator $stack9;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack1 = l0.<avrora.sim.Simulation$Node: int id>;

        if $stack1 == 0 goto label1;

        return;

     label1:
        $stack2 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack3 = $stack2.<avrora.sim.Simulation: cck.util.Option$Str SCHEDULE>;

        $stack4 = virtualinvoke $stack3.<cck.util.Option$Str: boolean isBlank()>();

        if $stack4 != 0 goto label2;

        $stack5 = new avrora.sim.util.InterruptScheduler;

        $stack6 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack7 = $stack6.<avrora.sim.Simulation: cck.util.Option$Str SCHEDULE>;

        $stack8 = virtualinvoke $stack7.<cck.util.Option$Str: java.lang.String get()>();

        $stack9 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        specialinvoke $stack5.<avrora.sim.util.InterruptScheduler: void <init>(java.lang.String,avrora.sim.Simulator)>($stack8, $stack9);

        virtualinvoke $stack5.<avrora.sim.util.InterruptScheduler: boolean start()>();

     label2:
        return;
    }

    private void processTimeout()
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulation $stack3;
        cck.util.Option$Double $stack4;
        double $stack5, $stack10, $stack11;
        byte $stack6;
        avrora.sim.Simulator $stack7, $stack13, $stack14;
        avrora.sim.clock.MainClock $stack8;
        long $stack9, l1#2;
        avrora.sim.util.ClockCycleTimeout $stack12;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack3 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack4 = $stack3.<avrora.sim.Simulation: cck.util.Option$Double SECONDS>;

        $stack5 = virtualinvoke $stack4.<cck.util.Option$Double: double get()>();

        $stack6 = $stack5 cmpl 0.0;

        if $stack6 <= 0 goto label1;

        $stack7 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        $stack8 = virtualinvoke $stack7.<avrora.sim.Simulator: avrora.sim.clock.MainClock getClock()>();

        $stack9 = virtualinvoke $stack8.<avrora.sim.clock.MainClock: long getHZ()>();

        $stack10 = (double) $stack9;

        $stack11 = $stack5 * $stack10;

        l1#2 = (long) $stack11;

        $stack14 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        $stack12 = new avrora.sim.util.ClockCycleTimeout;

        $stack13 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        specialinvoke $stack12.<avrora.sim.util.ClockCycleTimeout: void <init>(avrora.sim.Simulator,long)>($stack13, l1#2);

        virtualinvoke $stack14.<avrora.sim.Simulator: void insertEvent(avrora.sim.Simulator$Event,long)>($stack12, l1#2);

     label1:
        return;
    }

    protected void remove()
    {
        avrora.sim.Simulation$Node l0;
        java.util.LinkedList $stack2;
        java.util.Iterator $stack3;
        boolean $stack4;
        java.lang.Object $stack5;
        avrora.sim.Simulator $stack6;
        avrora.sim.Simulation $stack7;
        avrora.sim.Simulation$GuiMonitor $stack8;

        l0 := @this: avrora.sim.Simulation$Node;

        $stack2 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList guiMonitors>;

        $stack3 = virtualinvoke $stack2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        $stack5 = interfaceinvoke $stack3.<java.util.Iterator: java.lang.Object next()>();

        $stack8 = (avrora.sim.Simulation$GuiMonitor) $stack5;

        $stack7 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulation this$0>;

        $stack6 = l0.<avrora.sim.Simulation$Node: avrora.sim.Simulator simulator>;

        interfaceinvoke $stack8.<avrora.sim.Simulation$GuiMonitor: void destruct(avrora.sim.Simulation,avrora.sim.Simulation$Node,avrora.sim.Simulator)>($stack7, l0, $stack6);

        goto label1;

     label2:
        return;
    }

    public void removeGuiMonitor(avrora.sim.Simulation$GuiMonitor)
    {
        avrora.sim.Simulation$Node l0;
        avrora.sim.Simulation$GuiMonitor l1;
        java.util.LinkedList $stack2;

        l0 := @this: avrora.sim.Simulation$Node;

        l1 := @parameter0: avrora.sim.Simulation$GuiMonitor;

        $stack2 = l0.<avrora.sim.Simulation$Node: java.util.LinkedList guiMonitors>;

        virtualinvoke $stack2.<java.util.LinkedList: boolean remove(java.lang.Object)>(l1);

        return;
    }
}
