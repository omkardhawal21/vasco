public class avrora.core.Program extends java.lang.Object
{
    private final avrora.arch.AbstractArchitecture arch;
    private final java.util.HashMap indirectEdges;
    private avrora.core.SourceMapping sourceMapping;
    private avrora.core.ControlFlowGraph cfg;
    public final int program_start;
    public final int program_end;
    public final int program_length;
    protected final byte[] flash_data;
    protected final avrora.arch.AbstractInstr[] flash_instrs;

    public void <init>(avrora.arch.AbstractArchitecture, int, int)
    {
        avrora.core.Program l0;
        int l2, l3, $stack4, $stack5, $stack6, l1#2;
        byte[] $stack7, $stack10;
        avrora.arch.AbstractArchitecture $stack8, l1#1;
        avrora.arch.AbstractInstr[] $stack9;
        java.util.HashMap $stack11;

        l0 := @this: avrora.core.Program;

        l1#1 := @parameter0: avrora.arch.AbstractArchitecture;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<avrora.core.Program: avrora.arch.AbstractArchitecture arch> = l1#1;

        l0.<avrora.core.Program: int program_start> = l2;

        l0.<avrora.core.Program: int program_end> = l3;

        $stack4 = l3 - l2;

        l0.<avrora.core.Program: int program_length> = $stack4;

        $stack6 = l0.<avrora.core.Program: int program_end>;

        $stack5 = l0.<avrora.core.Program: int program_start>;

        l1#2 = $stack6 - $stack5;

        $stack7 = newarray (byte)[l1#2];

        l0.<avrora.core.Program: byte[] flash_data> = $stack7;

        $stack8 = l0.<avrora.core.Program: avrora.arch.AbstractArchitecture arch>;

        $stack9 = interfaceinvoke $stack8.<avrora.arch.AbstractArchitecture: avrora.arch.AbstractInstr[] newInstrArray(int)>(l1#2);

        l0.<avrora.core.Program: avrora.arch.AbstractInstr[] flash_instrs> = $stack9;

        $stack10 = l0.<avrora.core.Program: byte[] flash_data>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($stack10, -1);

        $stack11 = new java.util.HashMap;

        specialinvoke $stack11.<java.util.HashMap: void <init>()>();

        l0.<avrora.core.Program: java.util.HashMap indirectEdges> = $stack11;

        return;
    }

    public void addIndirectEdge(int, int)
    {
        java.lang.Integer l3, l1#3;
        avrora.core.Program l0;
        java.util.HashMap $stack4, $stack8;
        java.lang.Object $stack5;
        int l1#1, l2#2;
        java.util.List l2#4;
        java.util.LinkedList l2#5;

        l0 := @this: avrora.core.Program;

        l1#1 := @parameter0: int;

        l2#2 := @parameter1: int;

        l3 = new java.lang.Integer;

        specialinvoke l3.<java.lang.Integer: void <init>(int)>(l1#1);

        l1#3 = new java.lang.Integer;

        specialinvoke l1#3.<java.lang.Integer: void <init>(int)>(l2#2);

        $stack4 = l0.<avrora.core.Program: java.util.HashMap indirectEdges>;

        $stack5 = virtualinvoke $stack4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(l3);

        l2#4 = (java.util.List) $stack5;

        if l2#4 != null goto label1;

        l2#5 = new java.util.LinkedList;

        specialinvoke l2#5.<java.util.LinkedList: void <init>()>();

        interfaceinvoke l2#5.<java.util.List: boolean add(java.lang.Object)>(l1#3);

        $stack8 = l0.<avrora.core.Program: java.util.HashMap indirectEdges>;

        virtualinvoke $stack8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(l3, l2#5);

        goto label2;

     label1:
        interfaceinvoke l2#4.<java.util.List: boolean add(java.lang.Object)>(l1#3);

     label2:
        return;
    }

    protected void checkAddress(int)
    {
        int l1, $stack2, $stack9;
        avrora.core.Program l0;
        java.lang.StringBuilder $stack3, $stack4, $stack6;
        java.lang.String $stack5, $stack7;
        cck.util.Util$InternalError $stack8;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: int;

        $stack2 = l0.<avrora.core.Program: int program_start>;

        if l1 < $stack2 goto label1;

        $stack9 = l0.<avrora.core.Program: int program_end>;

        if l1 < $stack9 goto label2;

     label1:
        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("address out of range: ");

        $stack5 = staticinvoke <cck.text.StringUtil: java.lang.String addrToString(int)>(l1);

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack7);

        throw $stack8;

     label2:
        return;
    }

    public avrora.arch.AbstractInstr disassembleInstr(int)
    {
        avrora.core.Program l0;
        int $stack3, $stack4, $stack7, $stack9, l1#1, l1#2;
        avrora.arch.AbstractArchitecture $stack5;
        avrora.arch.AbstractDisassembler $stack6;
        byte[] $stack8;
        avrora.arch.AbstractInstr $stack10;
        avrora.arch.AbstractInstr[] $stack11;

        l0 := @this: avrora.core.Program;

        l1#1 := @parameter0: int;

        $stack3 = l0.<avrora.core.Program: int program_start>;

        if l1#1 < $stack3 goto label1;

        $stack4 = l0.<avrora.core.Program: int program_end>;

        if l1#1 < $stack4 goto label2;

     label1:
        return null;

     label2:
        $stack5 = l0.<avrora.core.Program: avrora.arch.AbstractArchitecture arch>;

        $stack6 = interfaceinvoke $stack5.<avrora.arch.AbstractArchitecture: avrora.arch.AbstractDisassembler getDisassembler()>();

        $stack7 = l0.<avrora.core.Program: int program_start>;

        l1#2 = l1#1 - $stack7;

        $stack9 = l0.<avrora.core.Program: int program_start>;

        $stack8 = l0.<avrora.core.Program: byte[] flash_data>;

        $stack10 = interfaceinvoke $stack6.<avrora.arch.AbstractDisassembler: avrora.arch.AbstractInstr disassemble(int,int,byte[])>($stack9, l1#2, $stack8);

        if $stack10 == null goto label3;

        $stack11 = l0.<avrora.core.Program: avrora.arch.AbstractInstr[] flash_instrs>;

        $stack11[l1#2] = $stack10;

     label3:
        return $stack10;
    }

    public avrora.arch.AbstractArchitecture getArchitecture()
    {
        avrora.core.Program l0;
        avrora.arch.AbstractArchitecture $stack1;

        l0 := @this: avrora.core.Program;

        $stack1 = l0.<avrora.core.Program: avrora.arch.AbstractArchitecture arch>;

        return $stack1;
    }

    public synchronized avrora.core.ControlFlowGraph getCFG()
    {
        avrora.core.Program l0;
        avrora.core.ControlFlowGraph $stack1, $stack2, $stack4;
        avrora.core.CFGBuilder $stack3;

        l0 := @this: avrora.core.Program;

        $stack1 = l0.<avrora.core.Program: avrora.core.ControlFlowGraph cfg>;

        if $stack1 != null goto label1;

        $stack3 = new avrora.core.CFGBuilder;

        specialinvoke $stack3.<avrora.core.CFGBuilder: void <init>(avrora.core.Program)>(l0);

        $stack4 = virtualinvoke $stack3.<avrora.core.CFGBuilder: avrora.core.ControlFlowGraph buildCFG()>();

        l0.<avrora.core.Program: avrora.core.ControlFlowGraph cfg> = $stack4;

     label1:
        $stack2 = l0.<avrora.core.Program: avrora.core.ControlFlowGraph cfg>;

        return $stack2;
    }

    public java.util.List getIndirectEdges(int)
    {
        avrora.core.Program l0;
        java.lang.Integer $stack2;
        int l1;
        java.util.HashMap $stack3;
        java.lang.Object $stack4;
        java.util.List $stack5;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: int;

        $stack3 = l0.<avrora.core.Program: java.util.HashMap indirectEdges>;

        $stack2 = new java.lang.Integer;

        specialinvoke $stack2.<java.lang.Integer: void <init>(int)>(l1);

        $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack2);

        $stack5 = (java.util.List) $stack4;

        return $stack5;
    }

    public int getNextPC(int)
    {
        int l1, $stack2, $stack4, $stack5, $stack6;
        avrora.arch.AbstractInstr $stack3;
        java.lang.StringBuilder $stack7, $stack8, $stack10;
        java.lang.String $stack9, $stack11;
        cck.util.Util$InternalError $stack12;
        avrora.core.Program l0#1;

        l0#1 := @this: avrora.core.Program;

        l1 := @parameter0: int;

        $stack2 = l0#1.<avrora.core.Program: int program_end>;

        if l1 <= $stack2 goto label1;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no next PC after: ");

        $stack9 = staticinvoke <cck.text.StringUtil: java.lang.String addrToString(int)>(l1);

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack11);

        throw $stack12;

     label1:
        $stack3 = virtualinvoke l0#1.<avrora.core.Program: avrora.arch.AbstractInstr readInstr(int)>(l1);

        if $stack3 != null goto label2;

        $stack6 = l1 + 2;

        return $stack6;

     label2:
        $stack4 = interfaceinvoke $stack3.<avrora.arch.AbstractInstr: int getSize()>();

        $stack5 = l1 + $stack4;

        return $stack5;
    }

    public avrora.core.SourceMapping getSourceMapping()
    {
        avrora.core.Program l0;
        avrora.core.SourceMapping $stack1;

        l0 := @this: avrora.core.Program;

        $stack1 = l0.<avrora.core.Program: avrora.core.SourceMapping sourceMapping>;

        return $stack1;
    }

    public avrora.arch.AbstractInstr readInstr(int)
    {
        int l1, $stack2, $stack3, $stack4, $stack5;
        avrora.core.Program l0;
        avrora.arch.AbstractInstr[] $stack6;
        avrora.arch.AbstractInstr $stack7;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: int;

        $stack2 = l0.<avrora.core.Program: int program_start>;

        if l1 < $stack2 goto label1;

        $stack3 = l0.<avrora.core.Program: int program_end>;

        if l1 < $stack3 goto label2;

     label1:
        return null;

     label2:
        $stack6 = l0.<avrora.core.Program: avrora.arch.AbstractInstr[] flash_instrs>;

        $stack4 = l0.<avrora.core.Program: int program_start>;

        $stack5 = l1 - $stack4;

        $stack7 = $stack6[$stack5];

        return $stack7;
    }

    public byte readProgramByte(int)
    {
        avrora.core.Program l0;
        int l1, $stack2, $stack3;
        byte[] $stack4;
        byte $stack5;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: int;

        virtualinvoke l0.<avrora.core.Program: void checkAddress(int)>(l1);

        $stack4 = l0.<avrora.core.Program: byte[] flash_data>;

        $stack2 = l0.<avrora.core.Program: int program_start>;

        $stack3 = l1 - $stack2;

        $stack5 = $stack4[$stack3];

        return $stack5;
    }

    public void setSourceMapping(avrora.core.SourceMapping)
    {
        avrora.core.Program l0;
        avrora.core.SourceMapping l1;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: avrora.core.SourceMapping;

        l0.<avrora.core.Program: avrora.core.SourceMapping sourceMapping> = l1;

        return;
    }

    private void writeByteInto(byte, int)
    {
        avrora.core.Program l0;
        int l2;
        byte l1;
        byte[] $stack3;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: byte;

        l2 := @parameter1: int;

        $stack3 = l0.<avrora.core.Program: byte[] flash_data>;

        $stack3[l2] = l1;

        return;
    }

    public void writeInstr(avrora.arch.AbstractInstr, int)
    {
        int $stack4, l2, $stack5, $stack6, $stack7, $stack8, $stack10, $stack11, $stack12, l1#2;
        avrora.core.Program l0;
        avrora.arch.AbstractInstr[] $stack9, $stack13;
        avrora.arch.AbstractInstr l1#1;

        l0 := @this: avrora.core.Program;

        l1#1 := @parameter0: avrora.arch.AbstractInstr;

        l2 := @parameter1: int;

        $stack4 = interfaceinvoke l1#1.<avrora.arch.AbstractInstr: int getSize()>();

        virtualinvoke l0.<avrora.core.Program: void checkAddress(int)>(l2);

        $stack5 = l2 + $stack4;

        $stack6 = $stack5 - 1;

        virtualinvoke l0.<avrora.core.Program: void checkAddress(int)>($stack6);

        $stack9 = l0.<avrora.core.Program: avrora.arch.AbstractInstr[] flash_instrs>;

        $stack7 = l0.<avrora.core.Program: int program_start>;

        $stack8 = l2 - $stack7;

        $stack9[$stack8] = l1#1;

        l1#2 = 1;

     label1:
        if l1#2 >= $stack4 goto label2;

        $stack13 = l0.<avrora.core.Program: avrora.arch.AbstractInstr[] flash_instrs>;

        $stack10 = l0.<avrora.core.Program: int program_start>;

        $stack11 = l2 - $stack10;

        $stack12 = $stack11 + l1#2;

        $stack13[$stack12] = null;

        l1#2 = l1#2 + 1;

        goto label1;

     label2:
        return;
    }

    public void writeProgramByte(byte, int)
    {
        avrora.core.Program l0;
        int l2, $stack3, $stack4;
        byte l1;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: byte;

        l2 := @parameter1: int;

        virtualinvoke l0.<avrora.core.Program: void checkAddress(int)>(l2);

        $stack3 = l0.<avrora.core.Program: int program_start>;

        $stack4 = l2 - $stack3;

        specialinvoke l0.<avrora.core.Program: void writeByteInto(byte,int)>(l1, $stack4);

        return;
    }

    public void writeProgramBytes(byte[], int)
    {
        avrora.core.Program l0;
        byte[] l1;
        int $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, l2#1, l2#2, l3#3;
        byte $stack10;

        l0 := @this: avrora.core.Program;

        l1 := @parameter0: byte[];

        l2#1 := @parameter1: int;

        virtualinvoke l0.<avrora.core.Program: void checkAddress(int)>(l2#1);

        $stack4 = lengthof l1;

        $stack5 = l2#1 + $stack4;

        $stack6 = $stack5 - 1;

        virtualinvoke l0.<avrora.core.Program: void checkAddress(int)>($stack6);

        $stack7 = l0.<avrora.core.Program: int program_start>;

        l2#2 = l2#1 - $stack7;

        l3#3 = 0;

     label1:
        $stack8 = lengthof l1;

        if l3#3 >= $stack8 goto label2;

        $stack10 = l1[l3#3];

        $stack9 = l2#2 + l3#3;

        specialinvoke l0.<avrora.core.Program: void writeByteInto(byte,int)>($stack10, $stack9);

        l3#3 = l3#3 + 1;

        goto label1;

     label2:
        return;
    }
}
