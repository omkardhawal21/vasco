java/security/AllPermission.implies(Ljava/security/Permission;)Z
java/security/AllPermission.newPermissionCollection()Ljava/security/PermissionCollection;
java/security/AllPermissionCollection$1.<init>(Ljava/security/AllPermissionCollection;)V
java/security/AllPermissionCollection$1.hasMoreElements()Z
java/security/AllPermissionCollection$1.nextElement()Ljava/lang/Object;
java/security/AllPermissionCollection$1.nextElement()Ljava/security/Permission;
java/security/AllPermissionCollection.<init>()V
java/security/AllPermissionCollection.access$000(Ljava/security/AllPermissionCollection;)Z
java/security/AllPermissionCollection.add(Ljava/security/Permission;)V
java/security/AllPermissionCollection.elements()Ljava/util/Enumeration;
java/security/AllPermissionCollection.implies(Ljava/security/Permission;)Z
java/security/BasicPermission.getCanonicalName()Ljava/lang/String;
java/security/BasicPermission.implies(Ljava/security/Permission;)Z
java/security/BasicPermission.newPermissionCollection()Ljava/security/PermissionCollection;
java/security/BasicPermissionCollection.<init>(Ljava/lang/Class;)V
java/security/BasicPermissionCollection.add(Ljava/security/Permission;)V
java/security/BasicPermissionCollection.elements()Ljava/util/Enumeration;
java/security/BasicPermissionCollection.implies(Ljava/security/Permission;)Z
java/security/GeneralSecurityException.<init>(Ljava/lang/String;)V
java/security/GeneralSecurityException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
java/security/GeneralSecurityException.<init>(Ljava/lang/Throwable;)V
java/security/InvalidAlgorithmParameterException.<init>(Ljava/lang/String;)V
java/security/InvalidAlgorithmParameterException.<init>(Ljava/lang/Throwable;)V
java/security/InvalidKeyException.<init>(Ljava/lang/String;)V
java/security/InvalidKeyException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
java/security/InvalidKeyException.<init>(Ljava/lang/Throwable;)V
java/security/InvalidParameterException.<init>(Ljava/lang/String;)V
java/security/KeyException.<init>(Ljava/lang/String;)V
java/security/KeyException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
java/security/KeyException.<init>(Ljava/lang/Throwable;)V
java/security/KeyPair.getPrivate()Ljava/security/PrivateKey;
java/security/KeyPair.getPublic()Ljava/security/PublicKey;
java/security/KeyPairGenerator$Delegate.<init>(Ljava/security/KeyPairGeneratorSpi;Ljava/lang/String;)V
java/security/KeyPairGenerator$Delegate.<init>(Lsun/security/jca/GetInstance$Instance;Ljava/util/Iterator;Ljava/lang/String;)V
java/security/KeyPairGenerator$Delegate.disableFailover()V
java/security/KeyPairGenerator$Delegate.generateKeyPair()Ljava/security/KeyPair;
java/security/KeyPairGenerator$Delegate.initialize(ILjava/security/SecureRandom;)V
java/security/KeyPairGenerator$Delegate.nextSpi(Ljava/security/KeyPairGeneratorSpi;Z)Ljava/security/KeyPairGeneratorSpi;
java/security/KeyPairGenerator.<init>(Ljava/lang/String;)V
java/security/KeyPairGenerator.access$000()Z
java/security/KeyPairGenerator.access$100()Lsun/security/util/Debug;
java/security/KeyPairGenerator.generateKeyPair()Ljava/security/KeyPair;
java/security/KeyPairGenerator.getInstance(Ljava/lang/String;)Ljava/security/KeyPairGenerator;
java/security/KeyPairGenerator.getInstance(Lsun/security/jca/GetInstance$Instance;Ljava/lang/String;)Ljava/security/KeyPairGenerator;
java/security/KeyPairGenerator.initialize(I)V
java/security/KeyPairGenerator.initialize(ILjava/security/SecureRandom;)V
java/security/KeyPairGeneratorSpi.<init>()V
java/security/MessageDigest.isEqual([B[B)Z
java/security/NoSuchAlgorithmException.<init>(Ljava/lang/String;)V
java/security/NoSuchAlgorithmException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
java/security/NoSuchAlgorithmException.<init>(Ljava/lang/Throwable;)V
java/security/NoSuchProviderException.<init>(Ljava/lang/String;)V
java/security/Permission.<init>(Ljava/lang/String;)V
java/security/Permission.getName()Ljava/lang/String;
java/security/Permission.newPermissionCollection()Ljava/security/PermissionCollection;
java/security/PermissionCollection.<init>()V
java/security/PermissionCollection.isReadOnly()Z
java/security/Permissions.add(Ljava/security/Permission;)V
java/security/Permissions.elements()Ljava/util/Enumeration;
java/security/Permissions.getPermissionCollection(Ljava/security/Permission;Z)Ljava/security/PermissionCollection;
java/security/Permissions.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/security/PermissionCollection;
java/security/Permissions.implies(Ljava/security/Permission;)Z
java/security/PermissionsEnumerator.<init>(Ljava/util/Iterator;)V
java/security/PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration;
java/security/PermissionsEnumerator.hasMoreElements()Z
java/security/PermissionsEnumerator.nextElement()Ljava/lang/Object;
java/security/PermissionsEnumerator.nextElement()Ljava/security/Permission;
java/security/PermissionsHash.<init>()V
java/security/PermissionsHash.add(Ljava/security/Permission;)V
java/security/PermissionsHash.elements()Ljava/util/Enumeration;
java/security/PermissionsHash.implies(Ljava/security/Permission;)Z
java/security/Policy$UnsupportedEmptyCollection.add(Ljava/security/Permission;)V
java/security/Policy$UnsupportedEmptyCollection.elements()Ljava/util/Enumeration;
java/security/Policy$UnsupportedEmptyCollection.implies(Ljava/security/Permission;)Z
java/security/Provider$EngineDescription.getConstructorParameterClass()Ljava/lang/Class;
java/security/Provider$Service.<init>(Ljava/security/Provider;)V
java/security/Provider$Service.<init>(Ljava/security/Provider;Ljava/security/Provider$1;)V
java/security/Provider$Service.access$000(Ljava/security/Provider$Service;)Z
java/security/Provider$Service.access$302(Ljava/security/Provider$Service;Ljava/lang/String;)Ljava/lang/String;
java/security/Provider$Service.access$402(Ljava/security/Provider$Service;Ljava/lang/String;)Ljava/lang/String;
java/security/Provider$Service.access$500(Ljava/security/Provider$Service;Ljava/lang/String;)V
java/security/Provider$Service.access$602(Ljava/security/Provider$Service;Ljava/lang/String;)Ljava/lang/String;
java/security/Provider$Service.addAlias(Ljava/lang/String;)V
java/security/Provider$Service.addAttribute(Ljava/lang/String;Ljava/lang/String;)V
java/security/Provider$Service.getAlgorithm()Ljava/lang/String;
java/security/Provider$Service.getAttribute(Ljava/lang/String;)Ljava/lang/String;
java/security/Provider$Service.getClassName()Ljava/lang/String;
java/security/Provider$Service.getImplClass()Ljava/lang/Class;
java/security/Provider$Service.getKeyClass(Ljava/lang/String;)Ljava/lang/Class;
java/security/Provider$Service.getProvider()Ljava/security/Provider;
java/security/Provider$Service.getType()Ljava/lang/String;
java/security/Provider$Service.hasKeyAttributes()Z
java/security/Provider$Service.isValid()Z
java/security/Provider$Service.newInstance(Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider$Service.newInstanceGeneric(Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider$Service.supportsKeyClass(Ljava/security/Key;)Z
java/security/Provider$Service.supportsKeyFormat(Ljava/security/Key;)Z
java/security/Provider$Service.supportsParameter(Ljava/lang/Object;)Z
java/security/Provider$ServiceKey.<init>(Ljava/lang/String;Ljava/lang/String;Z)V
java/security/Provider$ServiceKey.<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/security/Provider$1;)V
java/security/Provider$ServiceKey.matches(Ljava/lang/String;Ljava/lang/String;)Z
java/security/Provider$UString.<init>(Ljava/lang/String;)V
java/security/Provider.access$1000()Ljava/util/Map;
java/security/Provider.check(Ljava/lang/String;)V
java/security/Provider.checkInitialized()V
java/security/Provider.checkLegacy(Ljava/lang/Object;)Z
java/security/Provider.clear()V
java/security/Provider.ensureLegacyParsed()V
java/security/Provider.entrySet()Ljava/util/Set;
java/security/Provider.get(Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider.getEngineName(Ljava/lang/String;)Ljava/lang/String;
java/security/Provider.getName()Ljava/lang/String;
java/security/Provider.getProperty(Ljava/lang/String;)Ljava/lang/String;
java/security/Provider.getService(Ljava/lang/String;Ljava/lang/String;)Ljava/security/Provider$Service;
java/security/Provider.getTypeAndAlgorithm(Ljava/lang/String;)[Ljava/lang/String;
java/security/Provider.implClear()V
java/security/Provider.implPut(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider.implPutAll(Ljava/util/Map;)V
java/security/Provider.implRemove(Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider.keys()Ljava/util/Enumeration;
java/security/Provider.parseLegacyPut(Ljava/lang/String;Ljava/lang/String;)V
java/security/Provider.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider.putAll(Ljava/util/Map;)V
java/security/Provider.putId()V
java/security/Provider.remove(Ljava/lang/Object;)Ljava/lang/Object;
java/security/Provider.removeInvalidServices(Ljava/util/Map;)V
java/security/Provider.values()Ljava/util/Collection;
java/security/ProviderException.<init>(Ljava/lang/String;)V
java/security/Signature$CipherAdapter.<init>(Ljavax/crypto/Cipher;)V
java/security/Signature$CipherAdapter.engineInitSign(Ljava/security/PrivateKey;)V
java/security/Signature$CipherAdapter.engineInitSign(Ljava/security/PrivateKey;Ljava/security/SecureRandom;)V
java/security/Signature$CipherAdapter.engineInitVerify(Ljava/security/PublicKey;)V
java/security/Signature$CipherAdapter.engineSign()[B
java/security/Signature$CipherAdapter.engineUpdate([BII)V
java/security/Signature$CipherAdapter.engineVerify([B)Z
java/security/Signature$Delegate.<init>(Ljava/security/Provider$Service;Ljava/util/Iterator;Ljava/lang/String;)V
java/security/Signature$Delegate.<init>(Ljava/security/SignatureSpi;Ljava/lang/String;)V
java/security/Signature$Delegate.chooseFirstProvider()V
java/security/Signature$Delegate.chooseProvider(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V
java/security/Signature$Delegate.engineInitSign(Ljava/security/PrivateKey;)V
java/security/Signature$Delegate.engineInitVerify(Ljava/security/PublicKey;)V
java/security/Signature$Delegate.engineSign()[B
java/security/Signature$Delegate.engineUpdate([BII)V
java/security/Signature$Delegate.engineVerify([B)Z
java/security/Signature$Delegate.newInstance(Ljava/security/Provider$Service;)Ljava/security/SignatureSpi;
java/security/Signature$Delegate.tryOperation(Ljava/security/SignatureSpi;ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V
java/security/Signature.<init>(Ljava/lang/String;)V
java/security/Signature.access$100()Lsun/security/util/Debug;
java/security/Signature.access$200(Ljava/security/Provider$Service;)Z
java/security/Signature.getInstance(Ljava/lang/String;)Ljava/security/Signature;
java/security/Signature.getInstance(Lsun/security/jca/GetInstance$Instance;Ljava/lang/String;)Ljava/security/Signature;
java/security/Signature.getProviderName()Ljava/lang/String;
java/security/Signature.initSign(Ljava/security/PrivateKey;)V
java/security/Signature.initVerify(Ljava/security/PublicKey;)V
java/security/Signature.isSpi(Ljava/security/Provider$Service;)Z
java/security/Signature.sign()[B
java/security/Signature.update([B)V
java/security/Signature.update([BII)V
java/security/Signature.verify([B)Z
java/security/SignatureException.<init>(Ljava/lang/String;)V
java/security/SignatureException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
java/security/SignatureSpi.<init>()V
java/security/SignatureSpi.engineInitSign(Ljava/security/PrivateKey;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V
java/security/SignatureSpi.engineInitVerify(Ljava/security/PublicKey;Ljava/security/spec/AlgorithmParameterSpec;)V
java/security/SignatureSpi.engineSetParameter(Ljava/security/spec/AlgorithmParameterSpec;)V
java/security/UnresolvedPermission.implies(Ljava/security/Permission;)Z
java/security/UnresolvedPermission.newPermissionCollection()Ljava/security/PermissionCollection;
java/security/UnresolvedPermission.resolve(Ljava/security/Permission;[Ljava/security/cert/Certificate;)Ljava/security/Permission;
java/security/UnresolvedPermissionCollection.<init>()V
java/security/UnresolvedPermissionCollection.add(Ljava/security/Permission;)V
java/security/UnresolvedPermissionCollection.elements()Ljava/util/Enumeration;
java/security/UnresolvedPermissionCollection.getUnresolvedPermissions(Ljava/security/Permission;)Ljava/util/List;
java/security/UnresolvedPermissionCollection.implies(Ljava/security/Permission;)Z
java/security/cert/Certificate.equals(Ljava/lang/Object;)Z
javax/crypto/Cipher$Transform.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
javax/crypto/Cipher$Transform.matches(Ljava/lang/String;Ljava/lang/String;)Z
javax/crypto/Cipher$Transform.setModePadding(Ljavax/crypto/CipherSpi;)V
javax/crypto/Cipher$Transform.supports(Ljava/security/Provider$Service;Ljava/lang/String;Ljava/lang/String;)I
javax/crypto/Cipher$Transform.supportsMode(Ljava/security/Provider$Service;)I
javax/crypto/Cipher$Transform.supportsModePadding(Ljava/security/Provider$Service;)I
javax/crypto/Cipher$Transform.supportsPadding(Ljava/security/Provider$Service;)I
javax/crypto/Cipher.<init>(Ljavax/crypto/CipherSpi;Ljava/lang/String;)V
javax/crypto/Cipher.checkCipherState()V
javax/crypto/Cipher.checkCryptoPerm(Ljavax/crypto/CipherSpi;Ljava/security/Key;)V
javax/crypto/Cipher.checkCryptoPerm(Ljavax/crypto/CipherSpi;Ljava/security/Key;Ljava/security/AlgorithmParameters;)V
javax/crypto/Cipher.checkCryptoPerm(Ljavax/crypto/CipherSpi;Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V
javax/crypto/Cipher.checkOpmode(I)V
javax/crypto/Cipher.chooseFirstProvider()V
javax/crypto/Cipher.chooseProvider(IILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V
javax/crypto/Cipher.doFinal()[B
javax/crypto/Cipher.doFinal([B)[B
javax/crypto/Cipher.getAlgorithmParameterSpec(Ljava/security/AlgorithmParameters;)Ljava/security/spec/AlgorithmParameterSpec;
javax/crypto/Cipher.getConfiguredPermission(Ljava/lang/String;)Ljavax/crypto/CryptoPermission;
javax/crypto/Cipher.getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/Cipher;
javax/crypto/Cipher.getOpmodeString(I)Ljava/lang/String;
javax/crypto/Cipher.getTransform(Ljava/security/Provider$Service;Ljava/util/List;)Ljavax/crypto/Cipher$Transform;
javax/crypto/Cipher.getTransforms(Ljava/lang/String;)Ljava/util/List;
javax/crypto/Cipher.implInit(Ljavax/crypto/CipherSpi;IILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V
javax/crypto/Cipher.init(ILjava/security/Key;)V
javax/crypto/Cipher.init(ILjava/security/Key;Ljava/security/SecureRandom;)V
javax/crypto/Cipher.initCryptoPermission()V
javax/crypto/Cipher.passCryptoPermCheck(Ljavax/crypto/CipherSpi;Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)Z
javax/crypto/Cipher.tokenizeTransformation(Ljava/lang/String;)[Ljava/lang/String;
javax/crypto/Cipher.update([BII)[B
javax/crypto/CipherSpi.engineGetKeySize(Ljava/security/Key;)I
javax/crypto/CryptoAllPermission.implies(Ljava/security/Permission;)Z
javax/crypto/CryptoAllPermission.newPermissionCollection()Ljava/security/PermissionCollection;
javax/crypto/CryptoAllPermissionCollection.<init>()V
javax/crypto/CryptoAllPermissionCollection.add(Ljava/security/Permission;)V
javax/crypto/CryptoAllPermissionCollection.elements()Ljava/util/Enumeration;
javax/crypto/CryptoAllPermissionCollection.implies(Ljava/security/Permission;)Z
javax/crypto/CryptoPermission.<init>(Ljava/lang/String;ILjava/lang/String;)V
javax/crypto/CryptoPermission.<init>(Ljava/lang/String;ILjava/security/spec/AlgorithmParameterSpec;Ljava/lang/String;)V
javax/crypto/CryptoPermission.getAlgorithm()Ljava/lang/String;
javax/crypto/CryptoPermission.getAlgorithmParameterSpec()Ljava/security/spec/AlgorithmParameterSpec;
javax/crypto/CryptoPermission.getCheckParam()Z
javax/crypto/CryptoPermission.getExemptionMechanism()Ljava/lang/String;
javax/crypto/CryptoPermission.getMaxKeySize()I
javax/crypto/CryptoPermission.implies(Ljava/security/Permission;)Z
javax/crypto/CryptoPermission.impliesExemptionMechanism(Ljava/lang/String;)Z
javax/crypto/CryptoPermission.impliesParameterSpec(ZLjava/security/spec/AlgorithmParameterSpec;)Z
javax/crypto/CryptoPermission.newPermissionCollection()Ljava/security/PermissionCollection;
javax/crypto/CryptoPermissionCollection.<init>()V
javax/crypto/CryptoPermissionCollection.add(Ljava/security/Permission;)V
javax/crypto/CryptoPermissionCollection.elements()Ljava/util/Enumeration;
javax/crypto/CryptoPermissionCollection.implies(Ljava/security/Permission;)Z
javax/crypto/CryptoPermissions.<init>()V
javax/crypto/CryptoPermissions.add(Ljava/security/Permission;)V
javax/crypto/CryptoPermissions.elements()Ljava/util/Enumeration;
javax/crypto/CryptoPermissions.getPermissionCollection(Ljava/lang/String;)Ljava/security/PermissionCollection;
javax/crypto/CryptoPermissions.getPermissionCollection(Ljavax/crypto/CryptoPermission;)Ljava/security/PermissionCollection;
javax/crypto/CryptoPermissions.implies(Ljava/security/Permission;)Z
javax/crypto/CryptoPermissions.load(Ljava/io/InputStream;)V
javax/crypto/CryptoPolicyParser$CryptoPermissionEntry.<init>()V
javax/crypto/CryptoPolicyParser$GrantEntry.<init>()V
javax/crypto/CryptoPolicyParser$GrantEntry.add(Ljavax/crypto/CryptoPolicyParser$CryptoPermissionEntry;)V
javax/crypto/CryptoPolicyParser$GrantEntry.permissionElements()Ljava/util/Enumeration;
javax/crypto/CryptoPolicyParser$ParsingException.<init>(ILjava/lang/String;)V
javax/crypto/CryptoPolicyParser$ParsingException.<init>(ILjava/lang/String;Ljava/lang/String;)V
javax/crypto/CryptoPolicyParser$ParsingException.<init>(Ljava/lang/String;)V
javax/crypto/CryptoPolicyParser.<init>()V
javax/crypto/CryptoPolicyParser.getInstance(Ljava/lang/String;[Ljava/lang/Integer;)Ljava/security/spec/AlgorithmParameterSpec;
javax/crypto/CryptoPolicyParser.getPermissions()[Ljavax/crypto/CryptoPermission;
javax/crypto/CryptoPolicyParser.isConsistent(Ljava/lang/String;Ljava/lang/String;Ljava/util/Hashtable;)Z
javax/crypto/CryptoPolicyParser.match()I
javax/crypto/CryptoPolicyParser.match(Ljava/lang/String;)Ljava/lang/String;
javax/crypto/CryptoPolicyParser.parseGrantEntry(Ljava/util/Hashtable;)Ljavax/crypto/CryptoPolicyParser$GrantEntry;
javax/crypto/CryptoPolicyParser.parsePermissionEntry(Ljava/util/Hashtable;)Ljavax/crypto/CryptoPolicyParser$CryptoPermissionEntry;
javax/crypto/CryptoPolicyParser.peek(Ljava/lang/String;)Z
javax/crypto/CryptoPolicyParser.peekAndMatch(Ljava/lang/String;)Z
javax/crypto/CryptoPolicyParser.read(Ljava/io/Reader;)V
javax/crypto/ExemptionMechanism.<init>(Ljavax/crypto/ExemptionMechanismSpi;Ljava/security/Provider;Ljava/lang/String;)V
javax/crypto/ExemptionMechanism.getInstance(Ljava/lang/String;)Ljavax/crypto/ExemptionMechanism;
javax/crypto/ExemptionMechanism.getName()Ljava/lang/String;
javax/crypto/ExemptionMechanism.isCryptoAllowed(Ljava/security/Key;)Z
javax/crypto/JarVerifier$1.<init>(Ljavax/crypto/JarVerifier;Ljava/net/URL;)V
javax/crypto/JarVerifier.<init>(Ljava/net/URL;Z)V
javax/crypto/JarVerifier.getPermissions()Ljavax/crypto/CryptoPermissions;
javax/crypto/JarVerifier.verify()V
javax/crypto/JceSecurity$2.<init>(Ljava/lang/Class;)V
javax/crypto/JceSecurity.canUseProvider(Ljava/security/Provider;)Z
javax/crypto/JceSecurity.getCodeBase(Ljava/lang/Class;)Ljava/net/URL;
javax/crypto/JceSecurity.getInstance(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/String;)Lsun/security/jca/GetInstance$Instance;
javax/crypto/JceSecurity.getVerificationResult(Ljava/security/Provider;)Ljava/lang/Exception;
javax/crypto/JceSecurity.isRestricted()Z
javax/crypto/JceSecurity.verifyExemptJar(Ljava/net/URL;)Ljavax/crypto/CryptoPermissions;
javax/crypto/JceSecurity.verifyProviderJar(Ljava/net/URL;)V
javax/crypto/JceSecurityManager.getAppPermissions(Ljava/net/URL;)Ljavax/crypto/CryptoPermissions;
javax/crypto/JceSecurityManager.getCryptoPermission(Ljava/lang/String;)Ljavax/crypto/CryptoPermission;
javax/crypto/JceSecurityManager.getDefaultPermission(Ljava/lang/String;)Ljavax/crypto/CryptoPermission;
javax/crypto/NoSuchPaddingException.<init>(Ljava/lang/String;)V
javax/crypto/NullCipherSpi.engineDoFinal([BII)[B
javax/crypto/NullCipherSpi.engineGetKeySize(Ljava/security/Key;)I
javax/crypto/NullCipherSpi.engineGetParameters()Ljava/security/AlgorithmParameters;
javax/crypto/NullCipherSpi.engineInit(ILjava/security/Key;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V
javax/crypto/NullCipherSpi.engineInit(ILjava/security/Key;Ljava/security/SecureRandom;)V
javax/crypto/NullCipherSpi.engineInit(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V
javax/crypto/NullCipherSpi.engineSetMode(Ljava/lang/String;)V
javax/crypto/NullCipherSpi.engineSetPadding(Ljava/lang/String;)V
javax/crypto/NullCipherSpi.engineUpdate([BII)[B
javax/crypto/PermissionsEnumerator.<init>(Ljava/util/Enumeration;)V
javax/crypto/PermissionsEnumerator.getNextEnumWithMore()Ljava/util/Enumeration;
javax/crypto/PermissionsEnumerator.hasMoreElements()Z
javax/crypto/PermissionsEnumerator.nextElement()Ljava/lang/Object;
javax/crypto/PermissionsEnumerator.nextElement()Ljava/security/Permission;
javax/crypto/spec/PBEParameterSpec.getIterationCount()I
javax/crypto/spec/RC2ParameterSpec.equals(Ljava/lang/Object;)Z
javax/crypto/spec/RC2ParameterSpec.getEffectiveKeyBits()I
javax/crypto/spec/RC5ParameterSpec.equals(Ljava/lang/Object;)Z
javax/crypto/spec/RC5ParameterSpec.getRounds()I
javax/crypto/spec/SecretKeySpec.equals(Ljava/lang/Object;)Z
javax/crypto/spec/SecretKeySpec.getAlgorithm()Ljava/lang/String;
javax/crypto/spec/SecretKeySpec.getEncoded()[B
javax/crypto/spec/SecretKeySpec.getFormat()Ljava/lang/String;
