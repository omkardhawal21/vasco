class Main extends java.lang.Object
{

    static void <clinit>()
    {
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack8, $stack9, $stack10, $stack11, $stack14, $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, $stack26, $stack27, $stack28, $stack29, $stack7#11, $stack13#26, $stack19#41, $stack25#56;
        java.lang.Exception $stack64;

     label01:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "A");

        $stack1 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack1 == 0 goto label02;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall0()>();

        goto label07;

     label02:
        $stack2 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack2 == 0 goto label03;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall1()>();

        goto label07;

     label03:
        $stack3 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack3 == 0 goto label04;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall2()>();

        goto label07;

     label04:
        $stack4 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack4 == 0 goto label05;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall3()>();

        goto label07;

     label05:
        $stack5 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack5 == 0 goto label06;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall4()>();

        goto label07;

     label06:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("A");

     label07:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "B");

        $stack7#11 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack7#11 == 0 goto label08;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall5()>();

        goto label13;

     label08:
        $stack8 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack8 == 0 goto label09;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall6()>();

        goto label13;

     label09:
        $stack9 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack9 == 0 goto label10;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall7()>();

        goto label13;

     label10:
        $stack10 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack10 == 0 goto label11;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall8()>();

        goto label13;

     label11:
        $stack11 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack11 == 0 goto label12;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall9()>();

        goto label13;

     label12:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("B");

     label13:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "F");

        $stack13#26 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack13#26 == 0 goto label14;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall10()>();

        goto label19;

     label14:
        $stack14 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack14 == 0 goto label15;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall11()>();

        goto label19;

     label15:
        $stack15 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack15 == 0 goto label16;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall12()>();

        goto label19;

     label16:
        $stack16 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack16 == 0 goto label17;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall13()>();

        goto label19;

     label17:
        $stack17 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack17 == 0 goto label18;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall14()>();

        goto label19;

     label18:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("F");

     label19:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "I");

        $stack19#41 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack19#41 == 0 goto label20;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall15()>();

        goto label25;

     label20:
        $stack20 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack20 == 0 goto label21;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall16()>();

        goto label25;

     label21:
        $stack21 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack21 == 0 goto label22;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall17()>();

        goto label25;

     label22:
        $stack22 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack22 == 0 goto label23;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall18()>();

        goto label25;

     label23:
        $stack23 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack23 == 0 goto label24;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall19()>();

        goto label25;

     label24:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("I");

     label25:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassForName(int,java.lang.String)>(0, "D");

        $stack25#56 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack25#56 == 0 goto label26;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall20()>();

        goto label31;

     label26:
        $stack26 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack26 == 0 goto label27;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall21()>();

        goto label31;

     label27:
        $stack27 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack27 == 0 goto label28;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall22()>();

        goto label31;

     label28:
        $stack28 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack28 == 0 goto label29;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall23()>();

        goto label31;

     label29:
        $stack29 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack29 == 0 goto label30;

        staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Class reflectiveCall24()>();

        goto label31;

     label30:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("D");

     label31:
        goto label33;

     label32:
        $stack64 := @caughtexception;

     label33:
        return;

        catch java.lang.Exception from label01 to label31 with label32;
    }

    void <init>()
    {
        Main l0;

        l0 := @this: Main;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean getBool()
    {
        return 0;
    }

    public static void main(java.lang.String[])
    {
        F $stack5, $stack6, $stack14#10;
        boolean $stack7, $stack8;
        B $stack9, $stack11;
        java.lang.String[] l0#1;
        A l0#2, l1#3, l3#4, l2#5, l4#6, l1#7;
        int l2#15;

        l0#1 := @parameter0: java.lang.String[];

        l0#2 = new A;

        specialinvoke l0#2.<A: void <init>()>();

        $stack5 = new F;

        specialinvoke $stack5.<F: void <init>()>();

        l0#2.<A: F f> = $stack5;

        l1#3 = new A;

        specialinvoke l1#3.<A: void <init>()>();

        l3#4 = l1#3;

        $stack6 = new F;

        specialinvoke $stack6.<F: void <init>()>();

        l1#3.<A: F f> = $stack6;

        l2#5 = new A;

        specialinvoke l2#5.<A: void <init>()>();

        l4#6 = l2#5;

        $stack7 = staticinvoke <Main: boolean getBool()>();

        if $stack7 == 0 goto label1;

        l1#7 = l0#2;

        goto label3;

     label1:
        $stack8 = staticinvoke <Main: boolean getBool()>();

        if $stack8 == 0 goto label2;

        l1#7 = l1#3;

        goto label3;

     label2:
        l1#7 = l2#5;

     label3:
        $stack14#10 = l1#7.<A: F f>;

        l2#15 = 100;

     label4:
        if l2#15 <= 0 goto label5;

        l1#7 = l4#6;

        l4#6 = l3#4;

        l3#4 = l0#2;

        l2#15 = l2#15 + -1;

        goto label4;

     label5:
        $stack9 = new B;

        specialinvoke $stack9.<B: void <init>()>();

        virtualinvoke $stack9.<B: D foo(A,int,A)>(l1#7, 10, l4#6);

        staticinvoke <B: void fooBar(A,A)>(l1#7, l4#6);

        $stack11 = new B;

        specialinvoke $stack11.<B: void <init>()>();

        interfaceinvoke $stack11.<I: void baz(A,A)>(l4#6, l1#7);

        return;
    }
}
