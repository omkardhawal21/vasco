public abstract class jdk.internal.util.xml.SAXParser extends java.lang.Object
{

    protected void <init>()
    {
        jdk.internal.util.xml.SAXParser l0;

        l0 := @this: jdk.internal.util.xml.SAXParser;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public void parse(java.io.InputStream, jdk.internal.org.xml.sax.helpers.DefaultHandler) throws jdk.internal.org.xml.sax.SAXException, java.io.IOException
    {
        java.io.InputStream l1;
        jdk.internal.org.xml.sax.InputSource $stack4;
        jdk.internal.util.xml.SAXParser l0;
        jdk.internal.org.xml.sax.helpers.DefaultHandler l2;
        java.lang.IllegalArgumentException $stack5;

        l0 := @this: jdk.internal.util.xml.SAXParser;

        l1 := @parameter0: java.io.InputStream;

        l2 := @parameter1: jdk.internal.org.xml.sax.helpers.DefaultHandler;

        if l1 != null goto label1;

        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream cannot be null");

        throw $stack5;

     label1:
        $stack4 = new jdk.internal.org.xml.sax.InputSource;

        specialinvoke $stack4.<jdk.internal.org.xml.sax.InputSource: void <init>(java.io.InputStream)>(l1);

        virtualinvoke l0.<jdk.internal.util.xml.SAXParser: void parse(jdk.internal.org.xml.sax.InputSource,jdk.internal.org.xml.sax.helpers.DefaultHandler)>($stack4, l2);

        return;
    }

    public void parse(java.lang.String, jdk.internal.org.xml.sax.helpers.DefaultHandler) throws jdk.internal.org.xml.sax.SAXException, java.io.IOException
    {
        java.lang.String l1;
        jdk.internal.org.xml.sax.InputSource $stack4;
        jdk.internal.util.xml.SAXParser l0;
        jdk.internal.org.xml.sax.helpers.DefaultHandler l2;
        java.lang.IllegalArgumentException $stack5;

        l0 := @this: jdk.internal.util.xml.SAXParser;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: jdk.internal.org.xml.sax.helpers.DefaultHandler;

        if l1 != null goto label1;

        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("uri cannot be null");

        throw $stack5;

     label1:
        $stack4 = new jdk.internal.org.xml.sax.InputSource;

        specialinvoke $stack4.<jdk.internal.org.xml.sax.InputSource: void <init>(java.lang.String)>(l1);

        virtualinvoke l0.<jdk.internal.util.xml.SAXParser: void parse(jdk.internal.org.xml.sax.InputSource,jdk.internal.org.xml.sax.helpers.DefaultHandler)>($stack4, l2);

        return;
    }

    public void parse(java.io.File, jdk.internal.org.xml.sax.helpers.DefaultHandler) throws jdk.internal.org.xml.sax.SAXException, java.io.IOException
    {
        java.io.File l1;
        jdk.internal.org.xml.sax.InputSource $stack4;
        java.net.URI $stack5;
        java.lang.String $stack6;
        jdk.internal.util.xml.SAXParser l0;
        jdk.internal.org.xml.sax.helpers.DefaultHandler l2;
        java.lang.IllegalArgumentException $stack7;

        l0 := @this: jdk.internal.util.xml.SAXParser;

        l1 := @parameter0: java.io.File;

        l2 := @parameter1: jdk.internal.org.xml.sax.helpers.DefaultHandler;

        if l1 != null goto label1;

        $stack7 = new java.lang.IllegalArgumentException;

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File cannot be null");

        throw $stack7;

     label1:
        $stack4 = new jdk.internal.org.xml.sax.InputSource;

        $stack5 = virtualinvoke l1.<java.io.File: java.net.URI toURI()>();

        $stack6 = virtualinvoke $stack5.<java.net.URI: java.lang.String toASCIIString()>();

        specialinvoke $stack4.<jdk.internal.org.xml.sax.InputSource: void <init>(java.lang.String)>($stack6);

        virtualinvoke l0.<jdk.internal.util.xml.SAXParser: void parse(jdk.internal.org.xml.sax.InputSource,jdk.internal.org.xml.sax.helpers.DefaultHandler)>($stack4, l2);

        return;
    }

    public void parse(jdk.internal.org.xml.sax.InputSource, jdk.internal.org.xml.sax.helpers.DefaultHandler) throws jdk.internal.org.xml.sax.SAXException, java.io.IOException
    {
        jdk.internal.org.xml.sax.InputSource l1;
        jdk.internal.util.xml.SAXParser l0;
        jdk.internal.org.xml.sax.XMLReader $stack4;
        jdk.internal.org.xml.sax.helpers.DefaultHandler l2;
        java.lang.IllegalArgumentException $stack7;

        l0 := @this: jdk.internal.util.xml.SAXParser;

        l1 := @parameter0: jdk.internal.org.xml.sax.InputSource;

        l2 := @parameter1: jdk.internal.org.xml.sax.helpers.DefaultHandler;

        if l1 != null goto label1;

        $stack7 = new java.lang.IllegalArgumentException;

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputSource cannot be null");

        throw $stack7;

     label1:
        $stack4 = virtualinvoke l0.<jdk.internal.util.xml.SAXParser: jdk.internal.org.xml.sax.XMLReader getXMLReader()>();

        if l2 == null goto label2;

        interfaceinvoke $stack4.<jdk.internal.org.xml.sax.XMLReader: void setContentHandler(jdk.internal.org.xml.sax.ContentHandler)>(l2);

        interfaceinvoke $stack4.<jdk.internal.org.xml.sax.XMLReader: void setEntityResolver(jdk.internal.org.xml.sax.EntityResolver)>(l2);

        interfaceinvoke $stack4.<jdk.internal.org.xml.sax.XMLReader: void setErrorHandler(jdk.internal.org.xml.sax.ErrorHandler)>(l2);

        interfaceinvoke $stack4.<jdk.internal.org.xml.sax.XMLReader: void setDTDHandler(jdk.internal.org.xml.sax.DTDHandler)>(l2);

     label2:
        interfaceinvoke $stack4.<jdk.internal.org.xml.sax.XMLReader: void parse(jdk.internal.org.xml.sax.InputSource)>(l1);

        return;
    }

    public abstract jdk.internal.org.xml.sax.XMLReader getXMLReader() throws jdk.internal.org.xml.sax.SAXException;

    public abstract boolean isNamespaceAware();

    public abstract boolean isValidating();

    public boolean isXIncludeAware()
    {
        java.lang.UnsupportedOperationException $stack1;
        java.lang.StringBuilder $stack2, $stack3, $stack7, $stack8, $stack12, $stack13;
        jdk.internal.util.xml.SAXParser l0;
        java.lang.Class $stack4, $stack9;
        java.lang.Package $stack5, $stack10;
        java.lang.String $stack6, $stack11, $stack14;

        l0 := @this: jdk.internal.util.xml.SAXParser;

        $stack1 = new java.lang.UnsupportedOperationException;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This parser does not support specification \"");

        $stack4 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.Package getPackage()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Package: java.lang.String getSpecificationTitle()>();

        $stack7 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" version \"");

        $stack9 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        $stack10 = virtualinvoke $stack9.<java.lang.Class: java.lang.Package getPackage()>();

        $stack11 = virtualinvoke $stack10.<java.lang.Package: java.lang.String getSpecificationVersion()>();

        $stack12 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($stack14);

        throw $stack1;
    }
}
