public class avrora.sim.mcu.ATMegaFamily$FlagRegister extends avrora.sim.RWRegister
{
    protected final int[] mapping;
    protected final avrora.sim.AtmelInterpreter interpreter;

    public void <init>(avrora.sim.AtmelInterpreter, int[])
    {
        avrora.sim.mcu.ATMegaFamily$FlagRegister l0;
        int[] l2, $stack7, $stack12;
        avrora.sim.AtmelInterpreter l1, $stack5;
        avrora.sim.InterruptTable $stack6;
        int $stack8, $stack13, l4#1;
        avrora.sim.mcu.ATMegaFamily$FlagRegister$Notification $stack11;

        l0 := @this: avrora.sim.mcu.ATMegaFamily$FlagRegister;

        l1 := @parameter0: avrora.sim.AtmelInterpreter;

        l2 := @parameter1: int[];

        specialinvoke l0.<avrora.sim.RWRegister: void <init>()>();

        l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: int[] mapping> = l2;

        l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: avrora.sim.AtmelInterpreter interpreter> = l1;

        $stack5 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: avrora.sim.AtmelInterpreter interpreter>;

        $stack6 = virtualinvoke $stack5.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable getInterruptTable()>();

        l4#1 = 0;

     label1:
        if l4#1 >= 8 goto label3;

        $stack7 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: int[] mapping>;

        $stack8 = $stack7[l4#1];

        if $stack8 <= 0 goto label2;

        $stack11 = new avrora.sim.mcu.ATMegaFamily$FlagRegister$Notification;

        specialinvoke $stack11.<avrora.sim.mcu.ATMegaFamily$FlagRegister$Notification: void <init>(avrora.sim.mcu.ATMegaFamily$FlagRegister,int)>(l0, l4#1);

        $stack12 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: int[] mapping>;

        $stack13 = $stack12[l4#1];

        virtualinvoke $stack6.<avrora.sim.InterruptTable: void registerInternalNotification(avrora.sim.InterruptTable$Notification,int)>($stack11, $stack13);

     label2:
        l4#1 = l4#1 + 1;

        goto label1;

     label3:
        return;
    }

    public void flagBit(int)
    {
        avrora.sim.mcu.ATMegaFamily$FlagRegister l0;
        int l1;
        byte $stack2, $stack3;

        l0 := @this: avrora.sim.mcu.ATMegaFamily$FlagRegister;

        l1 := @parameter0: int;

        $stack2 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: byte value>;

        $stack3 = staticinvoke <cck.util.Arithmetic: byte setBit(byte,int)>($stack2, l1);

        l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: byte value> = $stack3;

        specialinvoke l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: void setPosted(int,boolean)>(l1, 1);

        return;
    }

    private void setPosted(int, boolean)
    {
        avrora.sim.mcu.ATMegaFamily$FlagRegister l0;
        int l1, $stack4, $stack6;
        int[] $stack3, $stack5;
        boolean l2;
        avrora.sim.AtmelInterpreter $stack7;

        l0 := @this: avrora.sim.mcu.ATMegaFamily$FlagRegister;

        l1 := @parameter0: int;

        l2 := @parameter1: boolean;

        $stack3 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: int[] mapping>;

        $stack4 = $stack3[l1];

        if $stack4 <= 0 goto label1;

        $stack7 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: avrora.sim.AtmelInterpreter interpreter>;

        $stack5 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: int[] mapping>;

        $stack6 = $stack5[l1];

        virtualinvoke $stack7.<avrora.sim.AtmelInterpreter: void setPosted(int,boolean)>($stack6, l2);

     label1:
        return;
    }

    public void unflagBit(int)
    {
        avrora.sim.mcu.ATMegaFamily$FlagRegister l0;
        int l1;
        byte $stack2, $stack3;

        l0 := @this: avrora.sim.mcu.ATMegaFamily$FlagRegister;

        l1 := @parameter0: int;

        $stack2 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: byte value>;

        $stack3 = staticinvoke <cck.util.Arithmetic: byte clearBit(byte,int)>($stack2, l1);

        l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: byte value> = $stack3;

        specialinvoke l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: void setPosted(int,boolean)>(l1, 0);

        return;
    }

    public void write(byte)
    {
        avrora.sim.mcu.ATMegaFamily$FlagRegister l0;
        byte l1, $stack4, $stack6;
        int $stack3, $stack5, l2#1;
        boolean $stack7;

        l0 := @this: avrora.sim.mcu.ATMegaFamily$FlagRegister;

        l1 := @parameter0: byte;

        $stack4 = l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: byte value>;

        $stack3 = l1 ^ -1;

        $stack5 = $stack4 & $stack3;

        $stack6 = (byte) $stack5;

        l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: byte value> = $stack6;

        l2#1 = 0;

     label1:
        if l2#1 >= 8 goto label4;

        $stack7 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>(l1, l2#1);

        if $stack7 != 0 goto label2;

        goto label3;

     label2:
        specialinvoke l0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: void setPosted(int,boolean)>(l2#1, 0);

     label3:
        l2#1 = l2#1 + 1;

        goto label1;

     label4:
        return;
    }
}
