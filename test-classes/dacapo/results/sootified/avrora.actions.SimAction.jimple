public class avrora.actions.SimAction extends avrora.actions.Action
{
    public static final java.lang.String HELP;
    public final cck.util.Option$Bool REPORT_SECONDS;
    public final cck.util.Option$Long SECONDS_PRECISION;
    public final cck.util.Option$Str SIMULATION;
    public final cck.util.Option$Bool THROUGHPUT;
    protected avrora.sim.Simulation simulation;
    protected long startms;
    protected boolean reported;

    public void <init>()
    {
        avrora.actions.SimAction l0;
        cck.util.Option$Bool $stack1, $stack4;
        cck.util.Option$Long $stack2;
        cck.util.Option$Str $stack3;

        l0 := @this: avrora.actions.SimAction;

        specialinvoke l0.<avrora.actions.Action: void <init>(java.lang.String)>("The \"simulate\" action creates a simulation with the specified program(s) for the specified node(s). The simulation type might be as simple as a single node with a single program, or a multiple-node sensor network simulation or robotics simulation.");

        $stack1 = virtualinvoke l0.<avrora.actions.SimAction: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("report-seconds", 0, "This option causes all times printed out by the simulator to be reported in seconds rather than clock cycles.");

        l0.<avrora.actions.SimAction: cck.util.Option$Bool REPORT_SECONDS> = $stack1;

        $stack2 = virtualinvoke l0.<avrora.actions.SimAction: cck.util.Option$Long newOption(java.lang.String,long,java.lang.String)>("seconds-precision", 6L, "This option sets the precision (number of decimal places) reported for event times in the simulation.");

        l0.<avrora.actions.SimAction: cck.util.Option$Long SECONDS_PRECISION> = $stack2;

        $stack3 = virtualinvoke l0.<avrora.actions.SimAction: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("simulation", "single", "The \"simulation\" option selects from the available simulation types, including a single node simulation, a sensor network simulation, or a robotics simulation.");

        l0.<avrora.actions.SimAction: cck.util.Option$Str SIMULATION> = $stack3;

        $stack4 = virtualinvoke l0.<avrora.actions.SimAction: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("throughput", 0, "This option enables reporting of simulator throughput (i.e. mhz).");

        l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT> = $stack4;

        return;
    }

    static void access$000(avrora.actions.SimAction, java.lang.Throwable)
    {
        avrora.actions.SimAction l0;
        java.lang.Throwable l1;

        l0 := @parameter0: avrora.actions.SimAction;

        l1 := @parameter1: java.lang.Throwable;

        specialinvoke l0.<avrora.actions.SimAction: void exitSimulation(java.lang.Throwable)>(l1);

        return;
    }

    private void exitSimulation(java.lang.Throwable)
    {
        avrora.actions.SimAction l0;
        boolean $stack4;
        java.lang.Throwable l1, $stack6;

        l0 := @this: avrora.actions.SimAction;

        l1 := @parameter0: java.lang.Throwable;

        entermonitor l0;

     label1:
        $stack4 = l0.<avrora.actions.SimAction: boolean reported>;

        if $stack4 != 0 goto label2;

        l0.<avrora.actions.SimAction: boolean reported> = 1;

        specialinvoke l0.<avrora.actions.SimAction: void report(java.lang.Throwable)>(l1);

     label2:
        exitmonitor l0;

     label3:
        goto label6;

     label4:
        $stack6 := @caughtexception;

        exitmonitor l0;

     label5:
        throw $stack6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static java.util.List getLocationList(avrora.core.Program, java.util.List)
    {
        java.util.HashSet l2;
        java.util.List l1;
        int $stack7, $stack8;
        avrora.core.Program l0;
        avrora.core.SourceMapping $stack9;
        java.util.Iterator $stack10;
        boolean $stack11;
        java.util.Enumeration $stack12;
        java.util.ArrayList $stack13;
        java.util.Comparator $stack14;
        java.lang.Object $stack15;
        java.lang.String l5;
        avrora.core.SourceMapping$Location $stack16;

        l0 := @parameter0: avrora.core.Program;

        l1 := @parameter1: java.util.List;

        l2 = new java.util.HashSet;

        $stack7 = interfaceinvoke l1.<java.util.List: int size()>();

        $stack8 = $stack7 * 2;

        specialinvoke l2.<java.util.HashSet: void <init>(int)>($stack8);

        $stack9 = virtualinvoke l0.<avrora.core.Program: avrora.core.SourceMapping getSourceMapping()>();

        $stack10 = interfaceinvoke l1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke $stack10.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label3;

        $stack15 = interfaceinvoke $stack10.<java.util.Iterator: java.lang.Object next()>();

        l5 = (java.lang.String) $stack15;

        $stack16 = virtualinvoke $stack9.<avrora.core.SourceMapping: avrora.core.SourceMapping$Location getLocation(java.lang.String)>(l5);

        if $stack16 != null goto label2;

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("Label unknown", l5);

     label2:
        virtualinvoke l2.<java.util.HashSet: boolean add(java.lang.Object)>($stack16);

        goto label1;

     label3:
        $stack12 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(l2);

        $stack13 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($stack12);

        $stack14 = <avrora.core.SourceMapping: java.util.Comparator LOCATION_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($stack13, $stack14);

        return $stack13;
    }

    protected static void printSimHeader()
    {
        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Simulation events");

        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Node          Time   Event");

        staticinvoke <cck.text.Terminal: void nextln()>();

        staticinvoke <cck.text.TermUtil: void printThinSeparator(int)>(78);

        return;
    }

    private void report(java.lang.Throwable)
    {
        long $stack13, $stack14, l2, $stack47;
        avrora.actions.SimAction l0;
        java.lang.Throwable l1, $stack19, $stack24;
        cck.util.Option$Bool $stack15, $stack20, $stack25, $stack30, $stack35, $stack50, $stack62;
        avrora.sim.Simulation $stack16, $stack18, $stack21, $stack23, $stack26, $stack28, $stack31, $stack33, $stack36, $stack38, $stack51, $stack53, $stack63, $stack65;
        boolean $stack17, $stack22, $stack27, $stack32, $stack37, $stack52, $stack64;
        cck.util.Util$Error $stack29;
        avrora.actions.SimAction$AsynchronousExit $stack34;
        avrora.actions.SimAction$TimeoutException $stack39;
        java.lang.StringBuilder $stack40, $stack41, $stack44, $stack45, $stack48, $stack55, $stack56, $stack59, $stack60;
        int $stack42, $stack57;
        java.lang.String $stack43, $stack49, $stack58, $stack61;
        avrora.sim.State $stack46;
        avrora.actions.SimAction$BreakPointException $stack54;

        l0 := @this: avrora.actions.SimAction;

        l1 := @parameter0: java.lang.Throwable;

        $stack13 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $stack14 = l0.<avrora.actions.SimAction: long startms>;

        l2 = $stack13 - $stack14;

     label01:
        if l1 == null goto label02;

        throw l1;

     label02:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack16 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack15 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack17 = virtualinvoke $stack15.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack16, l2, $stack17);

        $stack18 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack18);

        goto label15;

     label03:
        $stack54 := @caughtexception;

        staticinvoke <cck.text.Terminal: void printYellow(java.lang.String)>("Simulation terminated");

        $stack55 = new java.lang.StringBuilder;

        specialinvoke $stack55.<java.lang.StringBuilder: void <init>()>();

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": breakpoint at ");

        $stack57 = $stack54.<avrora.actions.SimAction$BreakPointException: int address>;

        $stack58 = staticinvoke <cck.text.StringUtil: java.lang.String addrToString(int)>($stack57);

        $stack59 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack58);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reached.");

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void println(java.lang.String)>($stack61);

     label04:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack63 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack62 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack64 = virtualinvoke $stack62.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack63, l2, $stack64);

        $stack65 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack65);

        goto label15;

     label05:
        $stack39 := @caughtexception;

        staticinvoke <cck.text.Terminal: void printYellow(java.lang.String)>("Simulation terminated");

        $stack40 = new java.lang.StringBuilder;

        specialinvoke $stack40.<java.lang.StringBuilder: void <init>()>();

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": timeout reached at pc = ");

        $stack42 = $stack39.<avrora.actions.SimAction$TimeoutException: int address>;

        $stack43 = staticinvoke <cck.text.StringUtil: java.lang.String addrToString(int)>($stack42);

        $stack44 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack43);

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", time = ");

        $stack46 = $stack39.<avrora.actions.SimAction$TimeoutException: avrora.sim.State state>;

        $stack47 = interfaceinvoke $stack46.<avrora.sim.State: long getCycles()>();

        $stack48 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack47);

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.text.Terminal: void println(java.lang.String)>($stack49);

     label06:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack51 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack50 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack52 = virtualinvoke $stack50.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack51, l2, $stack52);

        $stack53 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack53);

        goto label15;

     label07:
        $stack34 := @caughtexception;

        staticinvoke <cck.text.Terminal: void printYellow(java.lang.String)>("Simulation terminated asynchronously");

        staticinvoke <cck.text.Terminal: void nextln()>();

     label08:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack36 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack35 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack37 = virtualinvoke $stack35.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack36, l2, $stack37);

        $stack38 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack38);

        goto label15;

     label09:
        $stack29 := @caughtexception;

        staticinvoke <cck.text.Terminal: void printRed(java.lang.String)>("Simulation terminated");

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(": ");

        virtualinvoke $stack29.<cck.util.Util$Error: void report()>();

     label10:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack31 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack30 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack32 = virtualinvoke $stack30.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack31, l2, $stack32);

        $stack33 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack33);

        goto label15;

     label11:
        $stack24 := @caughtexception;

        staticinvoke <cck.text.Terminal: void printRed(java.lang.String)>("Simulation terminated with unexpected exception");

        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(": ");

        virtualinvoke $stack24.<java.lang.Throwable: void printStackTrace()>();

     label12:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack26 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack25 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack27 = virtualinvoke $stack25.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack26, l2, $stack27);

        $stack28 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack28);

        goto label15;

     label13:
        $stack19 := @caughtexception;

     label14:
        staticinvoke <cck.text.TermUtil: void printSeparator()>();

        $stack21 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack20 = l0.<avrora.actions.SimAction: cck.util.Option$Bool THROUGHPUT>;

        $stack22 = virtualinvoke $stack20.<cck.util.Option$Bool: boolean get()>();

        staticinvoke <avrora.actions.SimAction: void reportTime(avrora.sim.Simulation,long,boolean)>($stack21, l2, $stack22);

        $stack23 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        staticinvoke <avrora.actions.SimAction: void reportMonitors(avrora.sim.Simulation)>($stack23);

        throw $stack19;

     label15:
        return;

        catch avrora.actions.SimAction$BreakPointException from label01 to label02 with label03;
        catch avrora.actions.SimAction$TimeoutException from label01 to label02 with label05;
        catch avrora.actions.SimAction$AsynchronousExit from label01 to label02 with label07;
        catch cck.util.Util$Error from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    protected static void reportMonitors(avrora.sim.Simulation)
    {
        avrora.sim.Simulation l0;
        java.util.Iterator $stack3, $stack8;
        boolean $stack4, $stack9;
        java.lang.Object $stack5, $stack11;
        avrora.sim.Simulation$Node $stack6;
        java.util.List $stack7;
        avrora.monitors.Monitor $stack12;

        l0 := @parameter0: avrora.sim.Simulation;

        $stack3 = virtualinvoke l0.<avrora.sim.Simulation: java.util.Iterator getNodeIterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label4;

        $stack5 = interfaceinvoke $stack3.<java.util.Iterator: java.lang.Object next()>();

        $stack6 = (avrora.sim.Simulation$Node) $stack5;

        $stack7 = virtualinvoke $stack6.<avrora.sim.Simulation$Node: java.util.List getMonitors()>();

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack9 = interfaceinvoke $stack8.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack11 = interfaceinvoke $stack8.<java.util.Iterator: java.lang.Object next()>();

        $stack12 = (avrora.monitors.Monitor) $stack11;

        interfaceinvoke $stack12.<avrora.monitors.Monitor: void report()>();

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    protected static void reportTime(avrora.sim.Simulation, long, boolean)
    {
        avrora.sim.Simulation l0;
        java.util.Iterator $stack15;
        boolean l3, $stack16#5;
        long l1, $stack20, $stack31, l9#1, l11#2;
        java.lang.String $stack18;
        int $stack19;
        double $stack21, $stack22, l13, $stack24, $stack25;
        float $stack23, $stack26;
        java.lang.Object $stack27;
        avrora.sim.Simulation$Node $stack28;
        avrora.sim.Simulator $stack29;
        avrora.sim.clock.MainClock $stack30;
        byte $stack32;

        l0 := @parameter0: avrora.sim.Simulation;

        l1 := @parameter1: long;

        l3 := @parameter2: boolean;

        $stack15 = virtualinvoke l0.<avrora.sim.Simulation: java.util.Iterator getNodeIterator()>();

        l9#1 = 0L;

        l11#2 = 0L;

     label1:
        $stack16#5 = interfaceinvoke $stack15.<java.util.Iterator: boolean hasNext()>();

        if $stack16#5 == 0 goto label4;

        $stack27 = interfaceinvoke $stack15.<java.util.Iterator: java.lang.Object next()>();

        $stack28 = (avrora.sim.Simulation$Node) $stack27;

        $stack29 = virtualinvoke $stack28.<avrora.sim.Simulation$Node: avrora.sim.Simulator getSimulator()>();

        if $stack29 != null goto label2;

        goto label1;

     label2:
        $stack30 = virtualinvoke $stack29.<avrora.sim.Simulator: avrora.sim.clock.MainClock getClock()>();

        $stack31 = virtualinvoke $stack30.<avrora.sim.clock.MainClock: long getCount()>();

        l9#1 = l9#1 + $stack31;

        $stack32 = $stack31 cmp l11#2;

        if $stack32 <= 0 goto label3;

        l11#2 = $stack31;

     label3:
        goto label1;

     label4:
        staticinvoke <cck.text.TermUtil: void reportQuantity(java.lang.String,long,java.lang.String)>("Simulated time", l11#2, "cycles");

        if l3 == 0 goto label5;

        $stack18 = staticinvoke <cck.util.TimeUtil: java.lang.String milliToSecs(long)>(l1);

        staticinvoke <cck.text.TermUtil: void reportQuantity(java.lang.String,java.lang.String,java.lang.String)>("Time for simulation", $stack18, "seconds");

        $stack19 = virtualinvoke l0.<avrora.sim.Simulation: int getNumberOfNodes()>();

        $stack22 = (double) l9#1;

        $stack20 = l1 * 1000L;

        $stack21 = (double) $stack20;

        l13 = $stack22 / $stack21;

        $stack23 = (float) l13;

        staticinvoke <cck.text.TermUtil: void reportQuantity(java.lang.String,float,java.lang.String)>("Total throughput", $stack23, "mhz");

        if $stack19 <= 1 goto label5;

        $stack24 = (double) $stack19;

        $stack25 = l13 / $stack24;

        $stack26 = (float) $stack25;

        staticinvoke <cck.text.TermUtil: void reportQuantity(java.lang.String,float,java.lang.String)>("Throughput per node", $stack26, "mhz");

     label5:
        return;
    }

    public void run(java.lang.String[]) throws java.lang.Exception
    {
        avrora.actions.SimAction l0;
        cck.util.Option$Bool $stack5;
        boolean $stack6;
        cck.util.Option$Long $stack7;
        long $stack8, $stack16;
        int $stack9;
        cck.util.Option$Str $stack10;
        java.lang.String $stack11;
        avrora.sim.Simulation $stack12, $stack14, $stack17, $stack18;
        java.lang.String[] l1;
        cck.util.Options $stack13;
        avrora.actions.SimAction$ShutdownThread l2;
        java.lang.Runtime $stack15, $stack19, $stack22, $stack25, $stack27;
        java.lang.Throwable $stack21, $stack24;

        l0 := @this: avrora.actions.SimAction;

        l1 := @parameter0: java.lang.String[];

        $stack5 = l0.<avrora.actions.SimAction: cck.util.Option$Bool REPORT_SECONDS>;

        $stack6 = virtualinvoke $stack5.<cck.util.Option$Bool: boolean get()>();

        <avrora.sim.util.SimUtil: boolean REPORT_SECONDS> = $stack6;

        $stack7 = l0.<avrora.actions.SimAction: cck.util.Option$Long SECONDS_PRECISION>;

        $stack8 = virtualinvoke $stack7.<cck.util.Option$Long: long get()>();

        $stack9 = (int) $stack8;

        <avrora.sim.util.SimUtil: int SECONDS_PRECISION> = $stack9;

        $stack10 = l0.<avrora.actions.SimAction: cck.util.Option$Str SIMULATION>;

        $stack11 = virtualinvoke $stack10.<cck.util.Option$Str: java.lang.String get()>();

        $stack12 = staticinvoke <avrora.Defaults: avrora.sim.Simulation getSimulation(java.lang.String)>($stack11);

        l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation> = $stack12;

        $stack14 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        $stack13 = l0.<avrora.actions.SimAction: cck.util.Options options>;

        virtualinvoke $stack14.<avrora.sim.Simulation: void process(cck.util.Options,java.lang.String[])>($stack13, l1);

        l2 = new avrora.actions.SimAction$ShutdownThread;

        specialinvoke l2.<avrora.actions.SimAction$ShutdownThread: void <init>(avrora.actions.SimAction)>(l0);

        $stack15 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $stack15.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>(l2);

        staticinvoke <avrora.actions.SimAction: void printSimHeader()>();

     label1:
        $stack16 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l0.<avrora.actions.SimAction: long startms> = $stack16;

        $stack17 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        virtualinvoke $stack17.<avrora.sim.Simulation: void start()>();

        $stack18 = l0.<avrora.actions.SimAction: avrora.sim.Simulation simulation>;

        virtualinvoke $stack18.<avrora.sim.Simulation: void join()>();

     label2:
        specialinvoke l0.<avrora.actions.SimAction: void exitSimulation(java.lang.Throwable)>(null);

        $stack19 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $stack19.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>(l2);

        goto label7;

     label3:
        $stack24 := @caughtexception;

        specialinvoke l0.<avrora.actions.SimAction: void exitSimulation(java.lang.Throwable)>($stack24);

        $stack25 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $stack25.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>(l2);

     label4:
        specialinvoke l0.<avrora.actions.SimAction: void exitSimulation(java.lang.Throwable)>(null);

        $stack27 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $stack27.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>(l2);

        goto label7;

     label5:
        $stack21 := @caughtexception;

     label6:
        specialinvoke l0.<avrora.actions.SimAction: void exitSimulation(java.lang.Throwable)>(null);

        $stack22 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $stack22.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>(l2);

        throw $stack21;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void <clinit>()
    {
        <avrora.actions.SimAction: java.lang.String HELP> = "The \"simulate\" action creates a simulation with the specified program(s) for the specified node(s). The simulation type might be as simple as a single node with a single program, or a multiple-node sensor network simulation or robotics simulation.";

        return;
    }
}
