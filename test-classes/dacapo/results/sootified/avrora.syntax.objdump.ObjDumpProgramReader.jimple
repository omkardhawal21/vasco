public class avrora.syntax.objdump.ObjDumpProgramReader extends avrora.core.ProgramReader
{
    protected final cck.util.Option$List SECTIONS;

    public void <init>()
    {
        avrora.syntax.objdump.ObjDumpProgramReader l0;
        cck.util.Option$List $stack1;

        l0 := @this: avrora.syntax.objdump.ObjDumpProgramReader;

        specialinvoke l0.<avrora.core.ProgramReader: void <init>(java.lang.String)>("The \"objdump\" input format reads programs that are the output of the \"avr-objdump\" utility provided with avr-binutils. For example, an ELF file must first be disassembled with \"avr-objdump -zhD\" to create a text file readable by this input format. The \"-zhD\" options are very important: the output will not be parseable otherwise.\nThe use of this format is deprecated - use ELF instead!");

        $stack1 = virtualinvoke l0.<avrora.syntax.objdump.ObjDumpProgramReader: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("sections", ".text,.data,.bss", "This option specifies a list of sections that the loader should load from the output.");

        l0.<avrora.syntax.objdump.ObjDumpProgramReader: cck.util.Option$List SECTIONS> = $stack1;

        return;
    }

    public avrora.core.Program read(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] l1;
        int $stack6, $stack7;
        avrora.syntax.objdump.ObjDumpProgramReader l0;
        avrora.arch.AbstractArchitecture $stack8;
        avrora.arch.legacy.LegacyArchitecture $stack9;
        java.io.File $stack10;
        java.lang.String $stack11, $stack15, $stack17, $stack18;
        avrora.syntax.objdump.ObjDumpReformatter $stack12;
        cck.util.Option$List $stack13;
        java.util.List $stack14;
        java.lang.StringBuffer $stack16;
        avrora.syntax.objdump.ObjDumpParser $stack19;
        avrora.core.Program $stack20;
        avrora.syntax.RawModule $stack23;
        java.io.StringReader $stack27;

        l0 := @this: avrora.syntax.objdump.ObjDumpProgramReader;

        l1 := @parameter0: java.lang.String[];

        $stack6 = lengthof l1;

        if $stack6 != 0 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("no input files");

     label1:
        $stack7 = lengthof l1;

        if $stack7 == 1 goto label2;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type \"objdump\" accepts only one file at a time.");

     label2:
        $stack8 = virtualinvoke l0.<avrora.syntax.objdump.ObjDumpProgramReader: avrora.arch.AbstractArchitecture getArchitecture()>();

        $stack9 = <avrora.arch.legacy.LegacyArchitecture: avrora.arch.legacy.LegacyArchitecture INSTANCE>;

        if $stack8 == $stack9 goto label3;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type  \"objdump\" parses only the \"legacy\" architecture.");

     label3:
        $stack10 = new java.io.File;

        $stack11 = l1[0];

        specialinvoke $stack10.<java.io.File: void <init>(java.lang.String)>($stack11);

        $stack23 = new avrora.syntax.RawModule;

        specialinvoke $stack23.<avrora.syntax.RawModule: void <init>(boolean,boolean)>(1, 1);

        $stack27 = new java.io.StringReader;

        $stack12 = new avrora.syntax.objdump.ObjDumpReformatter;

        $stack13 = l0.<avrora.syntax.objdump.ObjDumpProgramReader: cck.util.Option$List SECTIONS>;

        $stack14 = virtualinvoke $stack13.<cck.util.Option$List: java.util.List get()>();

        specialinvoke $stack12.<avrora.syntax.objdump.ObjDumpReformatter: void <init>(java.util.List)>($stack14);

        $stack15 = l1[0];

        $stack16 = virtualinvoke $stack12.<avrora.syntax.objdump.ObjDumpReformatter: java.lang.StringBuffer cleanCode(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $stack27.<java.io.StringReader: void <init>(java.lang.String)>($stack17);

        $stack18 = virtualinvoke $stack10.<java.io.File: java.lang.String getName()>();

        $stack19 = new avrora.syntax.objdump.ObjDumpParser;

        specialinvoke $stack19.<avrora.syntax.objdump.ObjDumpParser: void <init>(java.io.Reader,avrora.syntax.RawModule,java.lang.String)>($stack27, $stack23, $stack18);

        virtualinvoke $stack19.<avrora.syntax.objdump.ObjDumpParser: void Module()>();

        $stack20 = virtualinvoke $stack23.<avrora.syntax.RawModule: avrora.core.Program build()>();

        virtualinvoke l0.<avrora.syntax.objdump.ObjDumpProgramReader: void addIndirectEdges(avrora.core.Program)>($stack20);

        return $stack20;
    }
}
