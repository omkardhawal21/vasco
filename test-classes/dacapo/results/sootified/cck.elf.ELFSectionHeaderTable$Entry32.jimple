public class cck.elf.ELFSectionHeaderTable$Entry32 extends java.lang.Object
{
    public int sh_name;
    public int sh_type;
    public int sh_flags;
    public int sh_addr;
    public int sh_offset;
    public int sh_size;
    public int sh_link;
    public int sh_info;
    public int sh_addralign;
    public int sh_entsize;
    final cck.elf.ELFSectionHeaderTable this$0;

    public void <init>(cck.elf.ELFSectionHeaderTable)
    {
        cck.elf.ELFSectionHeaderTable$Entry32 l0;
        cck.elf.ELFSectionHeaderTable l1;

        l0 := @this: cck.elf.ELFSectionHeaderTable$Entry32;

        l1 := @parameter0: cck.elf.ELFSectionHeaderTable;

        l0.<cck.elf.ELFSectionHeaderTable$Entry32: cck.elf.ELFSectionHeaderTable this$0> = l1;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getFlags()
    {
        java.lang.StringBuffer l1;
        cck.elf.ELFSectionHeaderTable$Entry32 l0;
        int $stack2, $stack3, $stack4, $stack5, $stack6, $stack7;
        java.lang.String $stack8;

        l0 := @this: cck.elf.ELFSectionHeaderTable$Entry32;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

        $stack2 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_flags>;

        $stack3 = $stack2 & 1;

        if $stack3 == 0 goto label1;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WRITE ");

     label1:
        $stack4 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_flags>;

        $stack5 = $stack4 & 2;

        if $stack5 == 0 goto label2;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ALLOC ");

     label2:
        $stack6 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_flags>;

        $stack7 = $stack6 & 4;

        if $stack7 == 0 goto label3;

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("EXEC ");

     label3:
        $stack8 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack8;
    }

    public java.lang.String getName()
    {
        cck.elf.ELFSectionHeaderTable$Entry32 l0;
        cck.elf.ELFSectionHeaderTable $stack1, $stack3;
        cck.elf.ELFStringTable $stack2, $stack5;
        int $stack4;
        java.lang.String $stack6;

        l0 := @this: cck.elf.ELFSectionHeaderTable$Entry32;

        $stack1 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: cck.elf.ELFSectionHeaderTable this$0>;

        $stack2 = $stack1.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab>;

        if $stack2 == null goto label1;

        $stack3 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: cck.elf.ELFSectionHeaderTable this$0>;

        $stack5 = $stack3.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab>;

        $stack4 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_name>;

        $stack6 = virtualinvoke $stack5.<cck.elf.ELFStringTable: java.lang.String getString(int)>($stack4);

        return $stack6;

     label1:
        return "";
    }

    public java.lang.String getType()
    {
        cck.elf.ELFSectionHeaderTable$Entry32 l0;
        int $stack1;

        l0 := @this: cck.elf.ELFSectionHeaderTable$Entry32;

        $stack1 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_type>;

        tableswitch($stack1)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            default: goto label13;
        };

     label01:
        return "null";

     label02:
        return "program";

     label03:
        return "symtab";

     label04:
        return "strtab";

     label05:
        return "rela";

     label06:
        return "hash";

     label07:
        return "dynamic";

     label08:
        return "note";

     label09:
        return "nobits";

     label10:
        return "rel";

     label11:
        return "shlib";

     label12:
        return "dynsym";

     label13:
        return "unknown";
    }

    public boolean isStringTable()
    {
        cck.elf.ELFSectionHeaderTable$Entry32 l0;
        int $stack2;
        boolean l1#1;

        l0 := @this: cck.elf.ELFSectionHeaderTable$Entry32;

        $stack2 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_type>;

        if $stack2 != 3 goto label1;

        l1#1 = 1;

        goto label2;

     label1:
        l1#1 = 0;

     label2:
        return l1#1;
    }

    public boolean isSymbolTable()
    {
        cck.elf.ELFSectionHeaderTable$Entry32 l0;
        int $stack2;
        boolean l1#1;

        l0 := @this: cck.elf.ELFSectionHeaderTable$Entry32;

        $stack2 = l0.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_type>;

        if $stack2 != 2 goto label1;

        l1#1 = 1;

        goto label2;

     label1:
        l1#1 = 0;

     label2:
        return l1#1;
    }
}
