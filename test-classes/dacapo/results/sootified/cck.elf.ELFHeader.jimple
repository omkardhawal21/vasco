public class cck.elf.ELFHeader extends java.lang.Object
{
    protected static final int ELFCLASSNONE;
    protected static final int ELFCLASS32;
    protected static final int ELFCLASS64;
    protected static final int ELFCLASSNUM;
    protected static final int EI_NIDENT;
    protected static final int EI_CLASS;
    protected static final int EI_DATA;
    protected static final int EI_VERSION;
    protected static final int EI_PAD;
    protected static final int ELFDATA2LSB;
    protected static final int ELFDATA2MSB;
    public final byte[] e_ident;
    public short e_type;
    public short e_machine;
    public int e_version;
    public int e_entry;
    public int e_phoff;
    public int e_shoff;
    public int e_flags;
    public short e_ehsize;
    public short e_phentsize;
    public short e_phnum;
    public short e_shentsize;
    public short e_shnum;
    public short e_shstrndx;
    boolean bigEndian;

    public void <init>()
    {
        cck.elf.ELFHeader l0;
        byte[] $stack1;

        l0 := @this: cck.elf.ELFHeader;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $stack1 = newarray (byte)[16];

        l0.<cck.elf.ELFHeader: byte[] e_ident> = $stack1;

        return;
    }

    private void checkIdent() throws cck.elf.ELFHeader$FormatError
    {
        cck.elf.ELFHeader l0;
        boolean $stack1;

        l0 := @this: cck.elf.ELFHeader;

        specialinvoke l0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(0, 127);

        specialinvoke l0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(1, 69);

        specialinvoke l0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(2, 76);

        specialinvoke l0.<cck.elf.ELFHeader: void checkIndentByte(int,int)>(3, 70);

        $stack1 = virtualinvoke l0.<cck.elf.ELFHeader: boolean isBigEndian()>();

        l0.<cck.elf.ELFHeader: boolean bigEndian> = $stack1;

        return;
    }

    private void checkIndentByte(int, int) throws cck.elf.ELFHeader$FormatError
    {
        cck.elf.ELFHeader l0;
        int l1, l2;
        byte[] $stack3;
        byte $stack4;
        cck.elf.ELFHeader$FormatError $stack5;

        l0 := @this: cck.elf.ELFHeader;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $stack3 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack4 = $stack3[l1];

        if $stack4 == l2 goto label1;

        $stack5 = new cck.elf.ELFHeader$FormatError;

        specialinvoke $stack5.<cck.elf.ELFHeader$FormatError: void <init>(cck.elf.ELFHeader)>(l0);

        throw $stack5;

     label1:
        return;
    }

    public java.lang.String getArchitecture()
    {
        cck.elf.ELFHeader l0;
        short $stack1;
        java.lang.String $stack2;

        l0 := @this: cck.elf.ELFHeader;

        $stack1 = l0.<cck.elf.ELFHeader: short e_machine>;

        $stack2 = staticinvoke <cck.elf.ELFIdentifier: java.lang.String getArchitecture(int)>($stack1);

        return $stack2;
    }

    public int getVersion()
    {
        cck.elf.ELFHeader l0;
        byte[] $stack1;
        byte $stack2;

        l0 := @this: cck.elf.ELFHeader;

        $stack1 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack2 = $stack1[6];

        return $stack2;
    }

    public boolean is32Bit()
    {
        cck.elf.ELFHeader l0;
        byte[] $stack2;
        byte $stack3;
        boolean l1#1;

        l0 := @this: cck.elf.ELFHeader;

        $stack2 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack3 = $stack2[4];

        if $stack3 != 1 goto label1;

        l1#1 = 1;

        goto label2;

     label1:
        l1#1 = 0;

     label2:
        return l1#1;
    }

    public boolean is64Bit()
    {
        cck.elf.ELFHeader l0;
        byte[] $stack2;
        byte $stack3;
        boolean l1#1;

        l0 := @this: cck.elf.ELFHeader;

        $stack2 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack3 = $stack2[4];

        if $stack3 != 2 goto label1;

        l1#1 = 1;

        goto label2;

     label1:
        l1#1 = 0;

     label2:
        return l1#1;
    }

    public boolean isBigEndian()
    {
        cck.elf.ELFHeader l0;
        byte[] $stack2;
        byte $stack3;
        boolean l1#1;

        l0 := @this: cck.elf.ELFHeader;

        $stack2 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack3 = $stack2[6];

        if $stack3 != 2 goto label1;

        l1#1 = 1;

        goto label2;

     label1:
        l1#1 = 0;

     label2:
        return l1#1;
    }

    public boolean isLittleEndian()
    {
        cck.elf.ELFHeader l0;
        byte[] $stack2;
        byte $stack3;
        boolean l1#1;

        l0 := @this: cck.elf.ELFHeader;

        $stack2 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack3 = $stack2[6];

        if $stack3 != 1 goto label1;

        l1#1 = 1;

        goto label2;

     label1:
        l1#1 = 0;

     label2:
        return l1#1;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException, cck.elf.ELFHeader$FormatError
    {
        java.io.RandomAccessFile l1;
        long $stack4;
        byte $stack5;
        cck.elf.ELFHeader l0;
        cck.elf.ELFDataInputStream l2;
        short $stack6, $stack7, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18;
        int $stack8, $stack9, $stack10, $stack11, $stack12, $stack19, $stack21, l3#1;
        byte[] $stack20;
        cck.elf.ELFHeader$FormatError $stack24;

        l0 := @this: cck.elf.ELFHeader;

        l1 := @parameter0: java.io.RandomAccessFile;

        $stack4 = virtualinvoke l1.<java.io.RandomAccessFile: long length()>();

        $stack5 = $stack4 cmp 16L;

        if $stack5 >= 0 goto label1;

        $stack24 = new cck.elf.ELFHeader$FormatError;

        specialinvoke $stack24.<cck.elf.ELFHeader$FormatError: void <init>(cck.elf.ELFHeader)>(l0);

        throw $stack24;

     label1:
        l3#1 = 0;

     label2:
        if l3#1 >= 16 goto label3;

        $stack20 = l0.<cck.elf.ELFHeader: byte[] e_ident>;

        $stack19 = 16 - l3#1;

        $stack21 = virtualinvoke l1.<java.io.RandomAccessFile: int read(byte[],int,int)>($stack20, l3#1, $stack19);

        l3#1 = l3#1 + $stack21;

        goto label2;

     label3:
        specialinvoke l0.<cck.elf.ELFHeader: void checkIdent()>();

        l2 = new cck.elf.ELFDataInputStream;

        specialinvoke l2.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>(l0, l1);

        $stack6 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_type> = $stack6;

        $stack7 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_machine> = $stack7;

        $stack8 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l0.<cck.elf.ELFHeader: int e_version> = $stack8;

        $stack9 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();

        l0.<cck.elf.ELFHeader: int e_entry> = $stack9;

        $stack10 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        l0.<cck.elf.ELFHeader: int e_phoff> = $stack10;

        $stack11 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        l0.<cck.elf.ELFHeader: int e_shoff> = $stack11;

        $stack12 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l0.<cck.elf.ELFHeader: int e_flags> = $stack12;

        $stack13 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_ehsize> = $stack13;

        $stack14 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_phentsize> = $stack14;

        $stack15 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_phnum> = $stack15;

        $stack16 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_shentsize> = $stack16;

        $stack17 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_shnum> = $stack17;

        $stack18 = virtualinvoke l2.<cck.elf.ELFDataInputStream: short read_Elf32_Half()>();

        l0.<cck.elf.ELFHeader: short e_shstrndx> = $stack18;

        return;
    }

    public static void <clinit>()
    {
        <cck.elf.ELFHeader: int ELFDATA2MSB> = 2;

        <cck.elf.ELFHeader: int ELFDATA2LSB> = 1;

        <cck.elf.ELFHeader: int EI_PAD> = 7;

        <cck.elf.ELFHeader: int EI_VERSION> = 6;

        <cck.elf.ELFHeader: int EI_DATA> = 5;

        <cck.elf.ELFHeader: int EI_CLASS> = 4;

        <cck.elf.ELFHeader: int EI_NIDENT> = 16;

        <cck.elf.ELFHeader: int ELFCLASSNUM> = 3;

        <cck.elf.ELFHeader: int ELFCLASS64> = 2;

        <cck.elf.ELFHeader: int ELFCLASS32> = 1;

        <cck.elf.ELFHeader: int ELFCLASSNONE> = 0;

        return;
    }
}
