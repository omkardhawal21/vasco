public class avrora.sim.radio.Medium$Transmission extends java.lang.Object
{
    public final avrora.sim.radio.Medium$Transmitter origin;
    public final long start;
    public final long firstBit;
    public final double power;
    public final double Pt;
    public final double f;
    public long lastBit;
    public long end;
    protected int counter;
    protected byte[] data;
    static final boolean $assertionsDisabled;
    final avrora.sim.radio.Medium this$0;

    static void <clinit>()
    {
        java.lang.Class $stack1;
        boolean $stack2, l0#1;

        $stack1 = class "Lavrora/sim/radio/Medium;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack2 != 0 goto label1;

        l0#1 = 1;

        goto label2;

     label1:
        l0#1 = 0;

     label2:
        <avrora.sim.radio.Medium$Transmission: boolean $assertionsDisabled> = l0#1;

        return;
    }

    protected void <init>(avrora.sim.radio.Medium, avrora.sim.radio.Medium$Transmitter, double, double)
    {
        avrora.sim.radio.Medium$Transmission l0;
        avrora.sim.radio.Medium l1, $stack14;
        avrora.sim.radio.Medium$Transmitter l2, $stack12;
        double l3, l5;
        avrora.sim.clock.Clock $stack7;
        long $stack8, $stack9, $stack10, $stack11, $stack13;
        int $stack15, $stack16;
        byte[] $stack17;

        l0 := @this: avrora.sim.radio.Medium$Transmission;

        l1 := @parameter0: avrora.sim.radio.Medium;

        l2 := @parameter1: avrora.sim.radio.Medium$Transmitter;

        l3 := @parameter2: double;

        l5 := @parameter3: double;

        l0.<avrora.sim.radio.Medium$Transmission: avrora.sim.radio.Medium this$0> = l1;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<avrora.sim.radio.Medium$Transmission: avrora.sim.radio.Medium$Transmitter origin> = l2;

        l0.<avrora.sim.radio.Medium$Transmission: double power> = l3;

        l0.<avrora.sim.radio.Medium$Transmission: double Pt> = l3;

        l0.<avrora.sim.radio.Medium$Transmission: double f> = l5;

        $stack7 = l2.<avrora.sim.radio.Medium$Transmitter: avrora.sim.clock.Clock clock>;

        $stack8 = virtualinvoke $stack7.<avrora.sim.clock.Clock: long getCount()>();

        l0.<avrora.sim.radio.Medium$Transmission: long start> = $stack8;

        l0.<avrora.sim.radio.Medium$Transmission: long end> = 9223372036854775807L;

        $stack12 = l0.<avrora.sim.radio.Medium$Transmission: avrora.sim.radio.Medium$Transmitter origin>;

        $stack10 = l0.<avrora.sim.radio.Medium$Transmission: long start>;

        $stack9 = l2.<avrora.sim.radio.Medium$Transmitter: long leadCycles>;

        $stack11 = $stack10 + $stack9;

        $stack13 = virtualinvoke $stack12.<avrora.sim.radio.Medium$Transmitter: long getBitNum(long)>($stack11);

        l0.<avrora.sim.radio.Medium$Transmission: long firstBit> = $stack13;

        l0.<avrora.sim.radio.Medium$Transmission: long lastBit> = 9223372036854775807L;

        $stack14 = l2.<avrora.sim.radio.Medium$Transmitter: avrora.sim.radio.Medium medium>;

        $stack15 = $stack14.<avrora.sim.radio.Medium: int maxLength>;

        $stack16 = staticinvoke <cck.util.Arithmetic: int roundup(int,int)>($stack15, 8);

        $stack17 = newarray (byte)[$stack16];

        l0.<avrora.sim.radio.Medium$Transmission: byte[] data> = $stack17;

        return;
    }

    public void end()
    {
        avrora.sim.radio.Medium$Transmission l0;
        avrora.sim.radio.Medium$Transmitter $stack1;
        avrora.sim.clock.Clock $stack2;
        long $stack3, $stack6, $stack7, $stack8;
        int $stack4, $stack5;

        l0 := @this: avrora.sim.radio.Medium$Transmission;

        $stack1 = l0.<avrora.sim.radio.Medium$Transmission: avrora.sim.radio.Medium$Transmitter origin>;

        $stack2 = $stack1.<avrora.sim.radio.Medium$Transmitter: avrora.sim.clock.Clock clock>;

        $stack3 = virtualinvoke $stack2.<avrora.sim.clock.Clock: long getCount()>();

        l0.<avrora.sim.radio.Medium$Transmission: long end> = $stack3;

        $stack7 = l0.<avrora.sim.radio.Medium$Transmission: long firstBit>;

        $stack4 = l0.<avrora.sim.radio.Medium$Transmission: int counter>;

        $stack5 = $stack4 * 8;

        $stack6 = (long) $stack5;

        $stack8 = $stack7 + $stack6;

        l0.<avrora.sim.radio.Medium$Transmission: long lastBit> = $stack8;

        return;
    }

    public byte getByteAtTime(long)
    {
        boolean $stack6;
        long l1, $stack7, $stack8, $stack22;
        avrora.sim.radio.Medium$Transmission l0;
        int $stack9, $stack12, $stack14, $stack17, $stack18, $stack19, $stack20, $stack27, $stack29, $stack34;
        byte[] $stack10, $stack15;
        byte $stack11, $stack13, $stack16, $stack21, $stack23;
        java.lang.AssertionError $stack36;

        l0 := @this: avrora.sim.radio.Medium$Transmission;

        l1 := @parameter0: long;

        $stack6 = <avrora.sim.radio.Medium$Transmission: boolean $assertionsDisabled>;

        if $stack6 != 0 goto label1;

        $stack22 = l0.<avrora.sim.radio.Medium$Transmission: long firstBit>;

        $stack23 = l1 cmp $stack22;

        if $stack23 >= 0 goto label1;

        $stack36 = new java.lang.AssertionError;

        specialinvoke $stack36.<java.lang.AssertionError: void <init>()>();

        throw $stack36;

     label1:
        $stack7 = l0.<avrora.sim.radio.Medium$Transmission: long firstBit>;

        $stack8 = l1 - $stack7;

        $stack9 = (int) $stack8;

        $stack27 = $stack9 & 7;

        $stack29 = $stack9 / 8;

        $stack10 = l0.<avrora.sim.radio.Medium$Transmission: byte[] data>;

        $stack11 = $stack10[$stack29];

        $stack12 = $stack11 << $stack27;

        $stack34 = 255 & $stack12;

        if $stack27 <= 0 goto label2;

        $stack15 = l0.<avrora.sim.radio.Medium$Transmission: byte[] data>;

        $stack14 = 1 + $stack29;

        $stack16 = $stack15[$stack14];

        $stack18 = 255 & $stack16;

        $stack17 = 8 - $stack27;

        $stack19 = $stack18 >> $stack17;

        $stack20 = $stack34 | $stack19;

        $stack21 = (byte) $stack20;

        return $stack21;

     label2:
        $stack13 = (byte) $stack34;

        return $stack13;
    }
}
