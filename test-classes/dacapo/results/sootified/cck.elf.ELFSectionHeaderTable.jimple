public class cck.elf.ELFSectionHeaderTable extends java.lang.Object
{
    public static final int SHT_NULL;
    public static final int SHT_PROGBITS;
    public static final int SHT_SYMTAB;
    public static final int SHT_STRTAB;
    public static final int SHT_RELA;
    public static final int SHT_HASH;
    public static final int SHT_DYNAMIC;
    public static final int SHT_NOTE;
    public static final int SHT_NOBITS;
    public static final int SHT_REL;
    public static final int SHT_SHLIB;
    public static final int SHT_DYNSYM;
    public static final int SHT_LOPROC;
    public static final int SHT_HIPROC;
    public static final int SHT_LOUSER;
    public static final int SHT_HIUSER;
    public static final int SHF_WRITE;
    public static final int SHF_ALLOC;
    public static final int SHF_EXECINSTR;
    public static final int SHF_MASKPROC;
    public final cck.elf.ELFHeader header;
    public final cck.elf.ELFSectionHeaderTable$Entry32[] entries;
    protected cck.elf.ELFStringTable strtab;

    public void <init>(cck.elf.ELFHeader)
    {
        cck.elf.ELFSectionHeaderTable l0;
        cck.elf.ELFHeader l1;
        short $stack2;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack3;

        l0 := @this: cck.elf.ELFSectionHeaderTable;

        l1 := @parameter0: cck.elf.ELFHeader;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header> = l1;

        $stack2 = l1.<cck.elf.ELFHeader: short e_shnum>;

        $stack3 = newarray (cck.elf.ELFSectionHeaderTable$Entry32)[$stack2];

        l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries> = $stack3;

        return;
    }

    public java.lang.String getSectionName(int)
    {
        int l1, $stack3;
        cck.elf.ELFSectionHeaderTable l0;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack2, $stack4;
        cck.elf.ELFSectionHeaderTable$Entry32 $stack5;
        java.lang.String $stack6;

        l0 := @this: cck.elf.ELFSectionHeaderTable;

        l1 := @parameter0: int;

        if l1 < 0 goto label1;

        $stack2 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack3 = lengthof $stack2;

        if l1 < $stack3 goto label2;

     label1:
        return "";

     label2:
        $stack4 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack5 = $stack4[l1];

        $stack6 = virtualinvoke $stack5.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getName()>();

        return $stack6;
    }

    public cck.elf.ELFStringTable getStringTable()
    {
        cck.elf.ELFSectionHeaderTable l0;
        cck.elf.ELFStringTable $stack1;

        l0 := @this: cck.elf.ELFSectionHeaderTable;

        $stack1 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab>;

        return $stack1;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException
    {
        cck.elf.ELFSectionHeaderTable l0;
        cck.elf.ELFSectionHeaderTable$Entry32[] $stack6, $stack12, $stack24;
        int $stack7, $stack9, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, l4#1, l5#2;
        java.io.RandomAccessFile l1;
        cck.elf.ELFHeader $stack8, $stack11, $stack25;
        long $stack10;
        cck.elf.ELFDataInputStream l2;
        cck.elf.ELFSectionHeaderTable$Entry32 l3;
        short $stack26;

        l0 := @this: cck.elf.ELFSectionHeaderTable;

        l1 := @parameter0: java.io.RandomAccessFile;

        $stack6 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack7 = lengthof $stack6;

        if $stack7 != 0 goto label1;

        return;

     label1:
        $stack8 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;

        $stack9 = $stack8.<cck.elf.ELFHeader: int e_shoff>;

        $stack10 = (long) $stack9;

        virtualinvoke l1.<java.io.RandomAccessFile: void seek(long)>($stack10);

        l2 = new cck.elf.ELFDataInputStream;

        $stack11 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;

        specialinvoke l2.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>($stack11, l1);

        l4#1 = 0;

     label2:
        $stack12 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack13 = lengthof $stack12;

        if l4#1 >= $stack13 goto label5;

        l3 = new cck.elf.ELFSectionHeaderTable$Entry32;

        specialinvoke l3.<cck.elf.ELFSectionHeaderTable$Entry32: void <init>(cck.elf.ELFSectionHeaderTable)>(l0);

        $stack14 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_name> = $stack14;

        $stack15 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_type> = $stack15;

        $stack16 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_flags> = $stack16;

        $stack17 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addr> = $stack17;

        $stack18 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_offset> = $stack18;

        $stack19 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_size> = $stack19;

        $stack20 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_link> = $stack20;

        $stack21 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_info> = $stack21;

        $stack22 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addralign> = $stack22;

        $stack23 = virtualinvoke l2.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();

        l3.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_entsize> = $stack23;

        $stack24 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;

        $stack24[l4#1] = l3;

        l5#2 = 40;

     label3:
        $stack25 = l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;

        $stack26 = $stack25.<cck.elf.ELFHeader: short e_shentsize>;

        if l5#2 >= $stack26 goto label4;

        virtualinvoke l1.<java.io.RandomAccessFile: int read()>();

        l5#2 = l5#2 + 1;

        goto label3;

     label4:
        l4#1 = l4#1 + 1;

        goto label2;

     label5:
        return;
    }

    public void setStringTable(cck.elf.ELFStringTable)
    {
        cck.elf.ELFSectionHeaderTable l0;
        cck.elf.ELFStringTable l1;

        l0 := @this: cck.elf.ELFSectionHeaderTable;

        l1 := @parameter0: cck.elf.ELFStringTable;

        l0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab> = l1;

        return;
    }

    public static void <clinit>()
    {
        <cck.elf.ELFSectionHeaderTable: int SHF_MASKPROC> = -268435456;

        <cck.elf.ELFSectionHeaderTable: int SHF_EXECINSTR> = 4;

        <cck.elf.ELFSectionHeaderTable: int SHF_ALLOC> = 2;

        <cck.elf.ELFSectionHeaderTable: int SHF_WRITE> = 1;

        <cck.elf.ELFSectionHeaderTable: int SHT_HIUSER> = -1879048193;

        <cck.elf.ELFSectionHeaderTable: int SHT_LOUSER> = -2147483648;

        <cck.elf.ELFSectionHeaderTable: int SHT_HIPROC> = 2147483647;

        <cck.elf.ELFSectionHeaderTable: int SHT_LOPROC> = 1879048192;

        <cck.elf.ELFSectionHeaderTable: int SHT_DYNSYM> = 11;

        <cck.elf.ELFSectionHeaderTable: int SHT_SHLIB> = 10;

        <cck.elf.ELFSectionHeaderTable: int SHT_REL> = 9;

        <cck.elf.ELFSectionHeaderTable: int SHT_NOBITS> = 8;

        <cck.elf.ELFSectionHeaderTable: int SHT_NOTE> = 7;

        <cck.elf.ELFSectionHeaderTable: int SHT_DYNAMIC> = 6;

        <cck.elf.ELFSectionHeaderTable: int SHT_HASH> = 5;

        <cck.elf.ELFSectionHeaderTable: int SHT_RELA> = 4;

        <cck.elf.ELFSectionHeaderTable: int SHT_STRTAB> = 3;

        <cck.elf.ELFSectionHeaderTable: int SHT_SYMTAB> = 2;

        <cck.elf.ELFSectionHeaderTable: int SHT_PROGBITS> = 1;

        <cck.elf.ELFSectionHeaderTable: int SHT_NULL> = 0;

        return;
    }
}
