class avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg extends avrora.sim.RWRegister
{
    avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset;
    final avrora.sim.mcu.ReprogrammableCodeSegment this$0;

    private void <init>(avrora.sim.mcu.ReprogrammableCodeSegment)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        avrora.sim.mcu.ReprogrammableCodeSegment l1;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        l1 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0> = l1;

        specialinvoke l0.<avrora.sim.RWRegister: void <init>()>();

        $stack2 = new avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent;

        specialinvoke $stack2.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg)>(l0);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset> = $stack2;

        return;
    }

    void <init>(avrora.sim.mcu.ReprogrammableCodeSegment, avrora.sim.mcu.ReprogrammableCodeSegment$1)
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        avrora.sim.mcu.ReprogrammableCodeSegment l1;
        avrora.sim.mcu.ReprogrammableCodeSegment$1 l2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        l1 := @parameter0: avrora.sim.mcu.ReprogrammableCodeSegment;

        l2 := @parameter1: avrora.sim.mcu.ReprogrammableCodeSegment$1;

        specialinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void <init>(avrora.sim.mcu.ReprogrammableCodeSegment)>(l1);

        return;
    }

    void clearBusy()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1, $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = staticinvoke <cck.util.Arithmetic: byte clearBit(byte,int)>($stack1, 6);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value> = $stack2;

        return;
    }

    int getState()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1;
        int $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = $stack1 & 31;

        return $stack2;
    }

    boolean isBusy()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1;
        boolean $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($stack1, 6);

        return $stack2;
    }

    void reset()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1, $stack3;
        int $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = $stack1 & -32;

        $stack3 = (byte) $stack2;

        virtualinvoke l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: void write(byte)>($stack3);

        return;
    }

    void setBusy()
    {
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        byte $stack1, $stack2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        $stack1 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack2 = staticinvoke <cck.util.Arithmetic: byte setBit(byte,int)>($stack1, 6);

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value> = $stack2;

        return;
    }

    public void write(byte)
    {
        byte l1, $stack13, $stack16, $stack21;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg l0;
        avrora.sim.mcu.ReprogrammableCodeSegment $stack5, $stack8, $stack14, $stack19;
        avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent $stack6, $stack9;
        avrora.sim.clock.MainClock $stack7, $stack10;
        int $stack11, $stack12, l3#1;
        avrora.sim.AtmelInterpreter $stack15, $stack20;
        boolean $stack18, $stack22, l4#2;

        l0 := @this: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg;

        l1 := @parameter0: byte;

        l3#1 = l1 & 31;

        lookupswitch(l3#1)
        {
            case 1: goto label1;
            case 3: goto label1;
            case 5: goto label1;
            case 9: goto label1;
            case 17: goto label1;
            default: goto label2;
        };

     label1:
        $stack5 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack7 = $stack5.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack6 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack7.<avrora.sim.clock.MainClock: void removeEvent(avrora.sim.Simulator$Event)>($stack6);

        $stack8 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack10 = $stack8.<avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.clock.MainClock mainClock>;

        $stack9 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg$ResetEvent reset>;

        virtualinvoke $stack10.<avrora.sim.clock.MainClock: void insertEvent(avrora.sim.Simulator$Event,long)>($stack9, 6L);

        goto label3;

     label2:
        l3#1 = 0;

     label3:
        $stack11 = l1 & -32;

        $stack12 = $stack11 | l3#1;

        $stack13 = (byte) $stack12;

        l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value> = $stack13;

        $stack14 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack15 = staticinvoke <avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter access$000(avrora.sim.mcu.ReprogrammableCodeSegment)>($stack14);

        $stack16 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack18 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($stack16, 7);

        virtualinvoke $stack15.<avrora.sim.AtmelInterpreter: void setEnabled(int,boolean)>(35, $stack18);

        $stack19 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: avrora.sim.mcu.ReprogrammableCodeSegment this$0>;

        $stack20 = staticinvoke <avrora.sim.mcu.ReprogrammableCodeSegment: avrora.sim.AtmelInterpreter access$100(avrora.sim.mcu.ReprogrammableCodeSegment)>($stack19);

        $stack21 = l0.<avrora.sim.mcu.ReprogrammableCodeSegment$SPMCSR_reg: byte value>;

        $stack22 = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>($stack21, 0);

        if $stack22 != 0 goto label4;

        l4#2 = 1;

        goto label5;

     label4:
        l4#2 = 0;

     label5:
        virtualinvoke $stack20.<avrora.sim.AtmelInterpreter: void setPosted(int,boolean)>(35, l4#2);

        return;
    }
}
