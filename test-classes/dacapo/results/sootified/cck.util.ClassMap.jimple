public class cck.util.ClassMap extends java.lang.Object
{
    protected final java.lang.String type;
    protected final java.lang.Class clazz;
    protected final java.util.HashMap classMap;
    protected final java.util.HashMap reverseMap;
    protected final java.util.HashMap objMap;

    public void <init>(java.lang.String, java.lang.Class)
    {
        cck.util.ClassMap l0;
        java.lang.Class l2;
        java.util.HashMap $stack3, $stack4, $stack5;
        java.lang.String l1;

        l0 := @this: cck.util.ClassMap;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Class;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<cck.util.ClassMap: java.lang.Class clazz> = l2;

        $stack3 = new java.util.HashMap;

        specialinvoke $stack3.<java.util.HashMap: void <init>()>();

        l0.<cck.util.ClassMap: java.util.HashMap classMap> = $stack3;

        $stack4 = new java.util.HashMap;

        specialinvoke $stack4.<java.util.HashMap: void <init>()>();

        l0.<cck.util.ClassMap: java.util.HashMap reverseMap> = $stack4;

        $stack5 = new java.util.HashMap;

        specialinvoke $stack5.<java.util.HashMap: void <init>()>();

        l0.<cck.util.ClassMap: java.util.HashMap objMap> = $stack5;

        l0.<cck.util.ClassMap: java.lang.String type> = l1;

        return;
    }

    public void addClass(java.lang.String, java.lang.Class)
    {
        cck.util.ClassMap l0;
        java.lang.String l1;
        java.lang.Class l2;
        java.util.HashMap $stack3, $stack5;

        l0 := @this: cck.util.ClassMap;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Class;

        $stack3 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        virtualinvoke $stack3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(l1, l2);

        $stack5 = l0.<cck.util.ClassMap: java.util.HashMap reverseMap>;

        virtualinvoke $stack5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(l2, l1);

        return;
    }

    public void addInstance(java.lang.String, java.lang.Object)
    {
        java.lang.Object l2;
        java.lang.Class $stack4, $stack5, $stack18;
        cck.util.ClassMap l0;
        boolean $stack6;
        java.lang.String l1, $stack15, $stack19, $stack21;
        java.util.HashMap $stack7, $stack9, $stack11;
        java.lang.StringBuilder $stack13, $stack14, $stack16, $stack17, $stack20;
        cck.util.Util$InternalError $stack22;

        l0 := @this: cck.util.ClassMap;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Object;

        $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = l0.<cck.util.ClassMap: java.lang.Class clazz>;

        $stack6 = virtualinvoke $stack5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($stack4);

        if $stack6 != 0 goto label1;

        $stack13 = new java.lang.StringBuilder;

        specialinvoke $stack13.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object of class ");

        $stack15 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>($stack4);

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an instance of ");

        $stack18 = l0.<cck.util.ClassMap: java.lang.Class clazz>;

        $stack19 = virtualinvoke $stack18.<java.lang.Class: java.lang.String getName()>();

        $stack20 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack19);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($stack21);

        throw $stack22;

     label1:
        $stack7 = l0.<cck.util.ClassMap: java.util.HashMap objMap>;

        virtualinvoke $stack7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(l1, l2);

        $stack9 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        virtualinvoke $stack9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(l1, $stack4);

        $stack11 = l0.<cck.util.ClassMap: java.util.HashMap reverseMap>;

        virtualinvoke $stack11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, l1);

        return;
    }

    public java.lang.String getAlias(java.lang.Object)
    {
        cck.util.ClassMap l0;
        java.lang.Object l1, $stack4, $stack10;
        java.util.HashMap $stack3, $stack8;
        java.lang.Class $stack5, $stack9;
        java.lang.String $stack6, l2#1;

        l0 := @this: cck.util.ClassMap;

        l1 := @parameter0: java.lang.Object;

        $stack3 = l0.<cck.util.ClassMap: java.util.HashMap reverseMap>;

        $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(l1);

        l2#1 = (java.lang.String) $stack4;

        if l2#1 != null goto label1;

        $stack8 = l0.<cck.util.ClassMap: java.util.HashMap reverseMap>;

        $stack9 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $stack10 = virtualinvoke $stack8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack9);

        l2#1 = (java.lang.String) $stack10;

     label1:
        if l2#1 != null goto label2;

        $stack5 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>();

        l2#1 = $stack6;

     label2:
        return l2#1;
    }

    public java.lang.Class getClass(java.lang.String)
    {
        cck.util.ClassMap l0;
        java.lang.String l1;
        java.util.HashMap $stack3, $stack5;
        java.lang.Object $stack4, $stack6;
        java.lang.Class $stack7, $stack8;

        l0 := @this: cck.util.ClassMap;

        l1 := @parameter0: java.lang.String;

        $stack3 = l0.<cck.util.ClassMap: java.util.HashMap objMap>;

        $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(l1);

        if $stack4 == null goto label1;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        return $stack8;

     label1:
        $stack5 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        $stack6 = virtualinvoke $stack5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(l1);

        $stack7 = (java.lang.Class) $stack6;

        return $stack7;
    }

    public java.util.Iterator getIterator()
    {
        cck.util.ClassMap l0;
        java.util.HashMap $stack1;
        java.util.Set $stack2;
        java.util.Iterator $stack3;

        l0 := @this: cck.util.ClassMap;

        $stack1 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        $stack2 = virtualinvoke $stack1.<java.util.HashMap: java.util.Set keySet()>();

        $stack3 = interfaceinvoke $stack2.<java.util.Set: java.util.Iterator iterator()>();

        return $stack3;
    }

    public java.lang.Object getObjectOfClass(java.lang.String)
    {
        cck.util.ClassMap l0;
        java.lang.String l1, $stack12, $stack18, $stack21, $stack41, $stack43, $stack54, $stack57, l8#1;
        java.util.HashMap $stack10, $stack13;
        java.lang.Object $stack11, $stack14, $stack30, $stack31, $stack33, $stack34, $stack35, $stack36, $stack37, l4#11;
        java.lang.StringBuilder $stack15, $stack16, $stack17, $stack19, $stack20, $stack38, $stack39, $stack42, $stack53, $stack55, $stack56;
        boolean $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack23#9;
        java.lang.Class $stack40, $stack46, l9#2, $stack22#5;
        java.lang.Throwable $stack49, $stack51;
        cck.util.Util$InternalError $stack50;
        java.lang.ClassNotFoundException $stack52;

        l0 := @this: cck.util.ClassMap;

        l1 := @parameter0: java.lang.String;

        $stack10 = l0.<cck.util.ClassMap: java.util.HashMap objMap>;

        $stack11 = virtualinvoke $stack10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(l1);

        if $stack11 == null goto label01;

        return $stack11;

     label01:
        $stack12 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(l1);

        l8#1 = $stack12;

        $stack13 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        $stack14 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(l1);

        l9#2 = (java.lang.Class) $stack14;

        if l9#2 != null goto label05;

     label02:
        $stack46 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(l1);

        l9#2 = $stack46;

     label03:
        goto label06;

     label04:
        $stack52 := @caughtexception;

        $stack53 = new java.lang.StringBuilder;

        specialinvoke $stack53.<java.lang.StringBuilder: void <init>()>();

        $stack54 = l0.<cck.util.ClassMap: java.lang.String type>;

        $stack55 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack54);

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" class not found");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>($stack57, $stack12);

        goto label06;

     label05:
        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $stack18 = virtualinvoke l9#2.<java.lang.Class: java.lang.String toString()>();

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        l8#1 = $stack21;

     label06:
        $stack22#5 = l0.<cck.util.ClassMap: java.lang.Class clazz>;

        $stack23#9 = virtualinvoke $stack22#5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(l9#2);

        if $stack23#9 != 0 goto label07;

        $stack38 = new java.lang.StringBuilder;

        specialinvoke $stack38.<java.lang.StringBuilder: void <init>()>();

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified class does not extend ");

        $stack40 = l0.<cck.util.ClassMap: java.lang.Class clazz>;

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.String getName()>();

        $stack42 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack41);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>($stack43, l8#1);

     label07:
        staticinvoke <soot.rtlib.tamiflex.ReflectiveCalls: void knownClassNewInstance(int,java.lang.Class)>(7, l9#2);

        $stack24 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack24 == 0 goto label08;

        $stack37 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall1855()>();

        l4#11 = $stack37;

        goto label14;

     label08:
        $stack25 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack25 == 0 goto label09;

        $stack36 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall1856()>();

        l4#11 = $stack36;

        goto label14;

     label09:
        $stack26 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack26 == 0 goto label10;

        $stack35 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall1857()>();

        l4#11 = $stack35;

        goto label14;

     label10:
        $stack27 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack27 == 0 goto label11;

        $stack34 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall1858()>();

        l4#11 = $stack34;

        goto label14;

     label11:
        $stack28 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack28 == 0 goto label12;

        $stack33 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall1859()>();

        l4#11 = $stack33;

        goto label14;

     label12:
        $stack29 = staticinvoke <soot.rtlib.tamiflex.OpaquePredicate: boolean getFalse()>();

        if $stack29 == 0 goto label13;

        $stack31 = staticinvoke <soot.rtlib.tamiflex.ReflectiveCallsWrapper: java.lang.Object reflectiveCall1860()>();

        l4#11 = $stack31;

        goto label14;

     label13:
        $stack30 = virtualinvoke l9#2.<java.lang.Class: java.lang.Object newInstance()>();

        l4#11 = $stack30;

     label14:
        return l4#11;

     label15:
        $stack51 := @caughtexception;

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("The specified class does not have a default constructor", l8#1);

        goto label17;

     label16:
        $stack49 := @caughtexception;

        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("Illegal access to class", l8#1);

     label17:
        $stack50 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unreachable()>();

        throw $stack50;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.InstantiationException from label07 to label14 with label15;
        catch java.lang.IllegalAccessException from label07 to label14 with label16;
    }

    public java.util.List getSortedList()
    {
        cck.util.ClassMap l0;
        java.util.HashMap $stack1;
        java.util.Set $stack2;
        java.util.Enumeration $stack3;
        java.util.ArrayList $stack4;
        java.util.Comparator $stack5;

        l0 := @this: cck.util.ClassMap;

        $stack1 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        $stack2 = virtualinvoke $stack1.<java.util.HashMap: java.util.Set keySet()>();

        $stack3 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($stack2);

        $stack4 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($stack3);

        $stack5 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($stack4, $stack5);

        return $stack4;
    }

    public java.util.Iterator iterator()
    {
        cck.util.ClassMap l0;
        java.util.HashMap $stack1;
        java.util.Set $stack2;
        java.util.Iterator $stack3;

        l0 := @this: cck.util.ClassMap;

        $stack1 = l0.<cck.util.ClassMap: java.util.HashMap classMap>;

        $stack2 = virtualinvoke $stack1.<java.util.HashMap: java.util.Set keySet()>();

        $stack3 = interfaceinvoke $stack2.<java.util.Set: java.util.Iterator iterator()>();

        return $stack3;
    }
}
