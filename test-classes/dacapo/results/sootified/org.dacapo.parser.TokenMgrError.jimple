public class org.dacapo.parser.TokenMgrError extends java.lang.Error
{
    private static final long serialVersionUID;
    static final int LEXICAL_ERROR;
    static final int STATIC_LEXER_ERROR;
    static final int INVALID_LEXICAL_STATE;
    static final int LOOP_DETECTED;
    int errorCode;

    public void <init>()
    {
        org.dacapo.parser.TokenMgrError l0;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        specialinvoke l0.<java.lang.Error: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.dacapo.parser.TokenMgrError l0;
        java.lang.String l1;
        int l2;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke l0.<java.lang.Error: void <init>(java.lang.String)>(l1);

        l0.<org.dacapo.parser.TokenMgrError: int errorCode> = l2;

        return;
    }

    public void <init>(boolean, int, int, int, java.lang.String, char, int)
    {
        org.dacapo.parser.TokenMgrError l0;
        boolean l1;
        int l2, l3, l4, l7;
        java.lang.String l5, $stack8;
        char l6;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        l1 := @parameter0: boolean;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        l4 := @parameter3: int;

        l5 := @parameter4: java.lang.String;

        l6 := @parameter5: char;

        l7 := @parameter6: int;

        $stack8 = staticinvoke <org.dacapo.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>(l1, l2, l3, l4, l5, l6);

        specialinvoke l0.<org.dacapo.parser.TokenMgrError: void <init>(java.lang.String,int)>($stack8, l7);

        return;
    }

    protected static java.lang.String LexicalError(boolean, int, int, int, java.lang.String, char)
    {
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack18, $stack19, $stack20, $stack21, $stack22, $stack24, $stack25, $stack27, $stack28;
        int l2, l3, l1;
        boolean l0;
        char l5;
        java.lang.String $stack16, $stack17, $stack23, l4, $stack26, $stack29, l7#1;

        l0 := @parameter0: boolean;

        l1 := @parameter1: int;

        l2 := @parameter2: int;

        l3 := @parameter3: int;

        l4 := @parameter4: java.lang.String;

        l5 := @parameter5: char;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l3);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ");

        if l0 == 0 goto label1;

        l7#1 = "<EOF> ";

        goto label2;

     label1:
        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack16 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l5);

        $stack17 = staticinvoke <org.dacapo.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l5);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        l7#1 = $stack23;

     label2:
        $stack24 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l7#1);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"");

        $stack26 = staticinvoke <org.dacapo.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>(l4);

        $stack27 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack29;
    }

    protected static final java.lang.String addEscapes(java.lang.String)
    {
        java.lang.StringBuffer l1;
        java.lang.String l0, $stack6, $stack21, $stack23, $stack29, $stack31;
        int $stack5, $stack26, $stack27, $stack28, l4#1;
        char $stack7, $stack18;
        java.lang.StringBuilder $stack19, $stack20, $stack22, $stack24, $stack25, $stack30;

        l0 := @parameter0: java.lang.String;

        l1 = new java.lang.StringBuffer;

        specialinvoke l1.<java.lang.StringBuffer: void <init>()>();

        l4#1 = 0;

     label01:
        $stack5 = virtualinvoke l0.<java.lang.String: int length()>();

        if l4#1 >= $stack5 goto label15;

        $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l4#1);

        lookupswitch($stack7)
        {
            case 0: goto label02;
            case 8: goto label03;
            case 9: goto label04;
            case 10: goto label05;
            case 12: goto label06;
            case 13: goto label07;
            case 34: goto label08;
            case 39: goto label09;
            case 92: goto label10;
            default: goto label11;
        };

     label02:
        goto label14;

     label03:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label14;

     label04:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label14;

     label05:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label14;

     label06:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label14;

     label07:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label14;

     label08:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

        goto label14;

     label09:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\'");

        goto label14;

     label10:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label14;

     label11:
        $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l4#1);

        if $stack18 < 32 goto label12;

        if $stack18 <= 126 goto label13;

     label12:
        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0000");

        $stack21 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($stack18, 16);

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new java.lang.StringBuilder;

        specialinvoke $stack24.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

        $stack26 = virtualinvoke $stack23.<java.lang.String: int length()>();

        $stack27 = $stack26 - 4;

        $stack28 = virtualinvoke $stack23.<java.lang.String: int length()>();

        $stack29 = virtualinvoke $stack23.<java.lang.String: java.lang.String substring(int,int)>($stack27, $stack28);

        $stack30 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack31);

        goto label14;

     label13:
        virtualinvoke l1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($stack18);

     label14:
        l4#1 = l4#1 + 1;

        goto label01;

     label15:
        $stack6 = virtualinvoke l1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack6;
    }

    public java.lang.String getMessage()
    {
        org.dacapo.parser.TokenMgrError l0;
        java.lang.String $stack1;

        l0 := @this: org.dacapo.parser.TokenMgrError;

        $stack1 = specialinvoke l0.<java.lang.Error: java.lang.String getMessage()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.dacapo.parser.TokenMgrError: int LOOP_DETECTED> = 3;

        <org.dacapo.parser.TokenMgrError: int INVALID_LEXICAL_STATE> = 2;

        <org.dacapo.parser.TokenMgrError: int STATIC_LEXER_ERROR> = 1;

        <org.dacapo.parser.TokenMgrError: int LEXICAL_ERROR> = 0;

        <org.dacapo.parser.TokenMgrError: long serialVersionUID> = 1L;

        return;
    }
}
