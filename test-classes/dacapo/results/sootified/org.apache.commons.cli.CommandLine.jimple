public class org.apache.commons.cli.CommandLine extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private java.util.List args;
    private java.util.List options;

    void <init>()
    {
        org.apache.commons.cli.CommandLine l0;
        java.util.LinkedList $stack1;
        java.util.ArrayList $stack2;

        l0 := @this: org.apache.commons.cli.CommandLine;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $stack1 = new java.util.LinkedList;

        specialinvoke $stack1.<java.util.LinkedList: void <init>()>();

        l0.<org.apache.commons.cli.CommandLine: java.util.List args> = $stack1;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        l0.<org.apache.commons.cli.CommandLine: java.util.List options> = $stack2;

        return;
    }

    void addArg(java.lang.String)
    {
        org.apache.commons.cli.CommandLine l0;
        java.lang.String l1;
        java.util.List $stack2;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        $stack2 = l0.<org.apache.commons.cli.CommandLine: java.util.List args>;

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(l1);

        return;
    }

    void addOption(org.apache.commons.cli.Option)
    {
        org.apache.commons.cli.CommandLine l0;
        org.apache.commons.cli.Option l1;
        java.util.List $stack2;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: org.apache.commons.cli.Option;

        $stack2 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(l1);

        return;
    }

    public java.util.List getArgList()
    {
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack1;

        l0 := @this: org.apache.commons.cli.CommandLine;

        $stack1 = l0.<org.apache.commons.cli.CommandLine: java.util.List args>;

        return $stack1;
    }

    public java.lang.String[] getArgs()
    {
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack2, $stack4;
        int $stack3;
        java.lang.String[] l1;

        l0 := @this: org.apache.commons.cli.CommandLine;

        $stack2 = l0.<org.apache.commons.cli.CommandLine: java.util.List args>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: int size()>();

        l1 = newarray (java.lang.String)[$stack3];

        $stack4 = l0.<org.apache.commons.cli.CommandLine: java.util.List args>;

        interfaceinvoke $stack4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(l1);

        return l1;
    }

    public java.lang.Object getOptionObject(java.lang.String)
    {
        org.apache.commons.cli.CommandLine l0;
        java.lang.String l1, $stack12, $stack14;
        java.lang.Object $stack6;
        org.apache.commons.cli.ParseException $stack7;
        java.io.PrintStream l3;
        java.lang.StringBuffer $stack8, $stack9, $stack10, $stack11, $stack13;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

     label1:
        $stack6 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.Object getParsedOptionValue(java.lang.String)>(l1);

     label2:
        return $stack6;

     label3:
        $stack7 := @caughtexception;

        l3 = <java.lang.System: java.io.PrintStream err>;

        $stack8 = new java.lang.StringBuffer;

        specialinvoke $stack8.<java.lang.StringBuffer: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception found converting ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l1);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to desired type: ");

        $stack12 = virtualinvoke $stack7.<org.apache.commons.cli.ParseException: java.lang.String getMessage()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke l3.<java.io.PrintStream: void println(java.lang.String)>($stack14);

        return null;

        catch org.apache.commons.cli.ParseException from label1 to label2 with label3;
    }

    public java.lang.Object getOptionObject(char)
    {
        org.apache.commons.cli.CommandLine l0;
        char l1;
        java.lang.String $stack2;
        java.lang.Object $stack3;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: char;

        $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l1);

        $stack3 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.Object getOptionObject(java.lang.String)>($stack2);

        return $stack3;
    }

    public java.util.Properties getOptionProperties(java.lang.String)
    {
        java.util.Properties l2;
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack6, $stack12;
        java.util.Iterator $stack7;
        boolean $stack8, $stack11, $stack22;
        java.lang.Object $stack9, $stack16, $stack18, $stack19;
        org.apache.commons.cli.Option l4;
        java.lang.String l1, $stack10, $stack21;
        int $stack13, $stack14;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        l2 = new java.util.Properties;

        specialinvoke l2.<java.util.Properties: void <init>()>();

        $stack6 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke $stack7.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label5;

        $stack9 = interfaceinvoke $stack7.<java.util.Iterator: java.lang.Object next()>();

        l4 = (org.apache.commons.cli.Option) $stack9;

        $stack10 = virtualinvoke l4.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        $stack11 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>($stack10);

        if $stack11 != 0 goto label2;

        $stack21 = virtualinvoke l4.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        $stack22 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>($stack21);

        if $stack22 == 0 goto label4;

     label2:
        $stack12 = virtualinvoke l4.<org.apache.commons.cli.Option: java.util.List getValuesList()>();

        $stack13 = interfaceinvoke $stack12.<java.util.List: int size()>();

        if $stack13 < 2 goto label3;

        $stack18 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(0);

        $stack19 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(1);

        virtualinvoke l2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        goto label4;

     label3:
        $stack14 = interfaceinvoke $stack12.<java.util.List: int size()>();

        if $stack14 != 1 goto label4;

        $stack16 = interfaceinvoke $stack12.<java.util.List: java.lang.Object get(int)>(0);

        virtualinvoke l2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack16, "true");

     label4:
        goto label1;

     label5:
        return l2;
    }

    public java.lang.String getOptionValue(java.lang.String)
    {
        org.apache.commons.cli.CommandLine l0;
        java.lang.String l1, l3#1;
        java.lang.String[] $stack4;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        $stack4 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>(l1);

        if $stack4 != null goto label1;

        l3#1 = null;

        goto label2;

     label1:
        l3#1 = $stack4[0];

     label2:
        return l3#1;
    }

    public java.lang.String getOptionValue(char)
    {
        org.apache.commons.cli.CommandLine l0;
        char l1;
        java.lang.String $stack2, $stack3;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: char;

        $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l1);

        $stack3 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>($stack2);

        return $stack3;
    }

    public java.lang.String getOptionValue(java.lang.String, java.lang.String)
    {
        org.apache.commons.cli.CommandLine l0;
        java.lang.String l1, $stack5, l2, l4#1;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.String;

        $stack5 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(l1);

        if $stack5 == null goto label1;

        l4#1 = $stack5;

        goto label2;

     label1:
        l4#1 = l2;

     label2:
        return l4#1;
    }

    public java.lang.String getOptionValue(char, java.lang.String)
    {
        org.apache.commons.cli.CommandLine l0;
        char l1;
        java.lang.String $stack3, l2, $stack4;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: char;

        l2 := @parameter1: java.lang.String;

        $stack3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l1);

        $stack4 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String,java.lang.String)>($stack3, l2);

        return $stack4;
    }

    public java.lang.String[] getOptionValues(java.lang.String)
    {
        java.util.ArrayList l2;
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack6, $stack18;
        java.util.Iterator $stack7;
        boolean $stack8, $stack9, $stack17, $stack22;
        int $stack10;
        java.lang.String[] $stack11, $stack13, l5#1;
        java.lang.Object[] $stack12;
        java.lang.Object $stack15;
        org.apache.commons.cli.Option l4;
        java.lang.String l1, $stack16, $stack21;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        l2 = new java.util.ArrayList;

        specialinvoke l2.<java.util.ArrayList: void <init>()>();

        $stack6 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke $stack7.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label4;

        $stack15 = interfaceinvoke $stack7.<java.util.Iterator: java.lang.Object next()>();

        l4 = (org.apache.commons.cli.Option) $stack15;

        $stack16 = virtualinvoke l4.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        $stack17 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>($stack16);

        if $stack17 != 0 goto label2;

        $stack21 = virtualinvoke l4.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        $stack22 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>($stack21);

        if $stack22 == 0 goto label3;

     label2:
        $stack18 = virtualinvoke l4.<org.apache.commons.cli.Option: java.util.List getValuesList()>();

        interfaceinvoke l2.<java.util.List: boolean addAll(java.util.Collection)>($stack18);

     label3:
        goto label1;

     label4:
        $stack9 = interfaceinvoke l2.<java.util.List: boolean isEmpty()>();

        if $stack9 == 0 goto label5;

        l5#1 = null;

        goto label6;

     label5:
        $stack10 = interfaceinvoke l2.<java.util.List: int size()>();

        $stack11 = newarray (java.lang.String)[$stack10];

        $stack12 = interfaceinvoke l2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack11);

        $stack13 = (java.lang.String[]) $stack12;

        l5#1 = (java.lang.String[]) $stack13;

     label6:
        return l5#1;
    }

    public java.lang.String[] getOptionValues(char)
    {
        org.apache.commons.cli.CommandLine l0;
        char l1;
        java.lang.String $stack2;
        java.lang.String[] $stack3;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: char;

        $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l1);

        $stack3 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>($stack2);

        return $stack3;
    }

    public org.apache.commons.cli.Option[] getOptions()
    {
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack1;
        int $stack2;
        org.apache.commons.cli.Option[] $stack3, $stack5, $stack6;
        java.lang.Object[] $stack4;

        l0 := @this: org.apache.commons.cli.CommandLine;

        $stack1 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        $stack2 = interfaceinvoke $stack1.<java.util.Collection: int size()>();

        $stack3 = newarray (org.apache.commons.cli.Option)[$stack2];

        $stack4 = interfaceinvoke $stack1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($stack3);

        $stack5 = (org.apache.commons.cli.Option[]) $stack4;

        $stack6 = (org.apache.commons.cli.Option[]) $stack5;

        return $stack6;
    }

    public java.lang.Object getParsedOptionValue(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.CommandLine l0;
        java.lang.String l1, $stack6;
        org.apache.commons.cli.Option $stack7;
        java.lang.Object $stack8, $stack9, l5#1;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        $stack6 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>(l1);

        $stack7 = specialinvoke l0.<org.apache.commons.cli.CommandLine: org.apache.commons.cli.Option resolveOption(java.lang.String)>(l1);

        if $stack7 != null goto label1;

        return null;

     label1:
        $stack8 = virtualinvoke $stack7.<org.apache.commons.cli.Option: java.lang.Object getType()>();

        if $stack6 != null goto label2;

        l5#1 = null;

        goto label3;

     label2:
        $stack9 = staticinvoke <org.apache.commons.cli.TypeHandler: java.lang.Object createValue(java.lang.String,java.lang.Object)>($stack6, $stack8);

        l5#1 = $stack9;

     label3:
        return l5#1;
    }

    public boolean hasOption(java.lang.String)
    {
        org.apache.commons.cli.CommandLine l0;
        java.lang.String l1;
        java.util.List $stack2;
        org.apache.commons.cli.Option $stack3;
        boolean $stack4;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        $stack2 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        $stack3 = specialinvoke l0.<org.apache.commons.cli.CommandLine: org.apache.commons.cli.Option resolveOption(java.lang.String)>(l1);

        $stack4 = interfaceinvoke $stack2.<java.util.List: boolean contains(java.lang.Object)>($stack3);

        return $stack4;
    }

    public boolean hasOption(char)
    {
        org.apache.commons.cli.CommandLine l0;
        char l1;
        java.lang.String $stack2;
        boolean $stack3;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: char;

        $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l1);

        $stack3 = virtualinvoke l0.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>($stack2);

        return $stack3;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack1;
        java.util.Iterator $stack2;

        l0 := @this: org.apache.commons.cli.CommandLine;

        $stack1 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: java.util.Iterator iterator()>();

        return $stack2;
    }

    private org.apache.commons.cli.Option resolveOption(java.lang.String)
    {
        java.lang.String l1, $stack5, $stack10, $stack12;
        org.apache.commons.cli.CommandLine l0;
        java.util.List $stack6;
        java.util.Iterator $stack7;
        boolean $stack8, $stack11, $stack13;
        java.lang.Object $stack9;
        org.apache.commons.cli.Option l4;

        l0 := @this: org.apache.commons.cli.CommandLine;

        l1 := @parameter0: java.lang.String;

        $stack5 = staticinvoke <org.apache.commons.cli.Util: java.lang.String stripLeadingHyphens(java.lang.String)>(l1);

        $stack6 = l0.<org.apache.commons.cli.CommandLine: java.util.List options>;

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke $stack7.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label4;

        $stack9 = interfaceinvoke $stack7.<java.util.Iterator: java.lang.Object next()>();

        l4 = (org.apache.commons.cli.Option) $stack9;

        $stack10 = virtualinvoke l4.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        $stack11 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack10);

        if $stack11 == 0 goto label2;

        return l4;

     label2:
        $stack12 = virtualinvoke l4.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        $stack13 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack12);

        if $stack13 == 0 goto label3;

        return l4;

     label3:
        goto label1;

     label4:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.commons.cli.CommandLine: long serialVersionUID> = 1L;

        return;
    }
}
